//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// ARM/Thumb Decoders
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

#include "llvm/System/DataTypes.h"
#include <assert.h>

namespace llvm {

static const ARMFormat ARMFormats[] = {
  ARM_FORMAT_NA,	// Inst #0 = PHI
  ARM_FORMAT_NA,	// Inst #1 = INLINEASM
  ARM_FORMAT_NA,	// Inst #2 = PROLOG_LABEL
  ARM_FORMAT_NA,	// Inst #3 = EH_LABEL
  ARM_FORMAT_NA,	// Inst #4 = GC_LABEL
  ARM_FORMAT_NA,	// Inst #5 = KILL
  ARM_FORMAT_NA,	// Inst #6 = EXTRACT_SUBREG
  ARM_FORMAT_NA,	// Inst #7 = INSERT_SUBREG
  ARM_FORMAT_NA,	// Inst #8 = IMPLICIT_DEF
  ARM_FORMAT_NA,	// Inst #9 = SUBREG_TO_REG
  ARM_FORMAT_NA,	// Inst #10 = COPY_TO_REGCLASS
  ARM_FORMAT_NA,	// Inst #11 = DBG_VALUE
  ARM_FORMAT_NA,	// Inst #12 = REG_SEQUENCE
  ARM_FORMAT_NA,	// Inst #13 = COPY
  ARM_FORMAT_DPFRM,	// Inst #14 = ADCSSri
  ARM_FORMAT_DPFRM,	// Inst #15 = ADCSSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #16 = ADCSSrs
  ARM_FORMAT_DPFRM,	// Inst #17 = ADCri
  ARM_FORMAT_DPFRM,	// Inst #18 = ADCrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #19 = ADCrs
  ARM_FORMAT_DPFRM,	// Inst #20 = ADDSri
  ARM_FORMAT_DPFRM,	// Inst #21 = ADDSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #22 = ADDSrs
  ARM_FORMAT_DPFRM,	// Inst #23 = ADDri
  ARM_FORMAT_DPFRM,	// Inst #24 = ADDrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #25 = ADDrs
  ARM_FORMAT_PSEUDO,	// Inst #26 = ADJCALLSTACKDOWN
  ARM_FORMAT_PSEUDO,	// Inst #27 = ADJCALLSTACKUP
  ARM_FORMAT_DPFRM,	// Inst #28 = ANDSri
  ARM_FORMAT_DPFRM,	// Inst #29 = ANDSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #30 = ANDSrs
  ARM_FORMAT_DPFRM,	// Inst #31 = ANDri
  ARM_FORMAT_DPFRM,	// Inst #32 = ANDrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #33 = ANDrs
  ARM_FORMAT_PSEUDO,	// Inst #34 = ATOMIC_CMP_SWAP_I16
  ARM_FORMAT_PSEUDO,	// Inst #35 = ATOMIC_CMP_SWAP_I32
  ARM_FORMAT_PSEUDO,	// Inst #36 = ATOMIC_CMP_SWAP_I8
  ARM_FORMAT_PSEUDO,	// Inst #37 = ATOMIC_LOAD_ADD_I16
  ARM_FORMAT_PSEUDO,	// Inst #38 = ATOMIC_LOAD_ADD_I32
  ARM_FORMAT_PSEUDO,	// Inst #39 = ATOMIC_LOAD_ADD_I8
  ARM_FORMAT_PSEUDO,	// Inst #40 = ATOMIC_LOAD_AND_I16
  ARM_FORMAT_PSEUDO,	// Inst #41 = ATOMIC_LOAD_AND_I32
  ARM_FORMAT_PSEUDO,	// Inst #42 = ATOMIC_LOAD_AND_I8
  ARM_FORMAT_PSEUDO,	// Inst #43 = ATOMIC_LOAD_NAND_I16
  ARM_FORMAT_PSEUDO,	// Inst #44 = ATOMIC_LOAD_NAND_I32
  ARM_FORMAT_PSEUDO,	// Inst #45 = ATOMIC_LOAD_NAND_I8
  ARM_FORMAT_PSEUDO,	// Inst #46 = ATOMIC_LOAD_OR_I16
  ARM_FORMAT_PSEUDO,	// Inst #47 = ATOMIC_LOAD_OR_I32
  ARM_FORMAT_PSEUDO,	// Inst #48 = ATOMIC_LOAD_OR_I8
  ARM_FORMAT_PSEUDO,	// Inst #49 = ATOMIC_LOAD_SUB_I16
  ARM_FORMAT_PSEUDO,	// Inst #50 = ATOMIC_LOAD_SUB_I32
  ARM_FORMAT_PSEUDO,	// Inst #51 = ATOMIC_LOAD_SUB_I8
  ARM_FORMAT_PSEUDO,	// Inst #52 = ATOMIC_LOAD_XOR_I16
  ARM_FORMAT_PSEUDO,	// Inst #53 = ATOMIC_LOAD_XOR_I32
  ARM_FORMAT_PSEUDO,	// Inst #54 = ATOMIC_LOAD_XOR_I8
  ARM_FORMAT_PSEUDO,	// Inst #55 = ATOMIC_SWAP_I16
  ARM_FORMAT_PSEUDO,	// Inst #56 = ATOMIC_SWAP_I32
  ARM_FORMAT_PSEUDO,	// Inst #57 = ATOMIC_SWAP_I8
  ARM_FORMAT_BRFRM,	// Inst #58 = B
  ARM_FORMAT_PSEUDO,	// Inst #59 = BCCZi64
  ARM_FORMAT_PSEUDO,	// Inst #60 = BCCi64
  ARM_FORMAT_DPFRM,	// Inst #61 = BFC
  ARM_FORMAT_DPFRM,	// Inst #62 = BFI
  ARM_FORMAT_DPFRM,	// Inst #63 = BICri
  ARM_FORMAT_DPFRM,	// Inst #64 = BICrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #65 = BICrs
  ARM_FORMAT_MISCFRM,	// Inst #66 = BKPT
  ARM_FORMAT_BRFRM,	// Inst #67 = BL
  ARM_FORMAT_BRMISCFRM,	// Inst #68 = BLX
  ARM_FORMAT_BRMISCFRM,	// Inst #69 = BLXr9
  ARM_FORMAT_BRFRM,	// Inst #70 = BL_pred
  ARM_FORMAT_BRFRM,	// Inst #71 = BLr9
  ARM_FORMAT_BRFRM,	// Inst #72 = BLr9_pred
  ARM_FORMAT_PSEUDO,	// Inst #73 = BMOVPCRX
  ARM_FORMAT_PSEUDO,	// Inst #74 = BMOVPCRXr9
  ARM_FORMAT_BRMISCFRM,	// Inst #75 = BRIND
  ARM_FORMAT_BRMISCFRM,	// Inst #76 = BR_JTadd
  ARM_FORMAT_BRMISCFRM,	// Inst #77 = BR_JTm
  ARM_FORMAT_BRMISCFRM,	// Inst #78 = BR_JTr
  ARM_FORMAT_PSEUDO,	// Inst #79 = BX
  ARM_FORMAT_BRFRM,	// Inst #80 = BXJ
  ARM_FORMAT_BRMISCFRM,	// Inst #81 = BX_RET
  ARM_FORMAT_PSEUDO,	// Inst #82 = BXr9
  ARM_FORMAT_BRFRM,	// Inst #83 = Bcc
  ARM_FORMAT_BRFRM,	// Inst #84 = CDP
  ARM_FORMAT_BRFRM,	// Inst #85 = CDP2
  ARM_FORMAT_MISCFRM,	// Inst #86 = CLREX
  ARM_FORMAT_ARITHMISCFRM,	// Inst #87 = CLZ
  ARM_FORMAT_DPFRM,	// Inst #88 = CMNzri
  ARM_FORMAT_DPFRM,	// Inst #89 = CMNzrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #90 = CMNzrs
  ARM_FORMAT_DPFRM,	// Inst #91 = CMPri
  ARM_FORMAT_DPFRM,	// Inst #92 = CMPrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #93 = CMPrs
  ARM_FORMAT_DPFRM,	// Inst #94 = CMPzri
  ARM_FORMAT_DPFRM,	// Inst #95 = CMPzrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #96 = CMPzrs
  ARM_FORMAT_PSEUDO,	// Inst #97 = CONSTPOOL_ENTRY
  ARM_FORMAT_MISCFRM,	// Inst #98 = CPS
  ARM_FORMAT_MISCFRM,	// Inst #99 = DBG
  ARM_FORMAT_MISCFRM,	// Inst #100 = DMB_MCR
  ARM_FORMAT_MISCFRM,	// Inst #101 = DMBsy
  ARM_FORMAT_MISCFRM,	// Inst #102 = DMBvar
  ARM_FORMAT_MISCFRM,	// Inst #103 = DSB_MCR
  ARM_FORMAT_MISCFRM,	// Inst #104 = DSBsy
  ARM_FORMAT_MISCFRM,	// Inst #105 = DSBvar
  ARM_FORMAT_DPFRM,	// Inst #106 = EORri
  ARM_FORMAT_DPFRM,	// Inst #107 = EORrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #108 = EORrs
  ARM_FORMAT_VFPMISCFRM,	// Inst #109 = FCONSTD
  ARM_FORMAT_VFPMISCFRM,	// Inst #110 = FCONSTS
  ARM_FORMAT_VFPMISCFRM,	// Inst #111 = FMSTAT
  ARM_FORMAT_MISCFRM,	// Inst #112 = ISBsy
  ARM_FORMAT_PSEUDO,	// Inst #113 = Int_eh_sjlj_longjmp
  ARM_FORMAT_PSEUDO,	// Inst #114 = Int_eh_sjlj_setjmp
  ARM_FORMAT_PSEUDO,	// Inst #115 = Int_eh_sjlj_setjmp_nofp
  ARM_FORMAT_BRFRM,	// Inst #116 = LDC2L_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #117 = LDC2L_OPTION
  ARM_FORMAT_BRFRM,	// Inst #118 = LDC2L_POST
  ARM_FORMAT_BRFRM,	// Inst #119 = LDC2L_PRE
  ARM_FORMAT_BRFRM,	// Inst #120 = LDC2_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #121 = LDC2_OPTION
  ARM_FORMAT_BRFRM,	// Inst #122 = LDC2_POST
  ARM_FORMAT_BRFRM,	// Inst #123 = LDC2_PRE
  ARM_FORMAT_BRFRM,	// Inst #124 = LDCL_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #125 = LDCL_OPTION
  ARM_FORMAT_BRFRM,	// Inst #126 = LDCL_POST
  ARM_FORMAT_BRFRM,	// Inst #127 = LDCL_PRE
  ARM_FORMAT_BRFRM,	// Inst #128 = LDC_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #129 = LDC_OPTION
  ARM_FORMAT_BRFRM,	// Inst #130 = LDC_POST
  ARM_FORMAT_BRFRM,	// Inst #131 = LDC_PRE
  ARM_FORMAT_LDSTMULFRM,	// Inst #132 = LDM
  ARM_FORMAT_LDSTMULFRM,	// Inst #133 = LDM_RET
  ARM_FORMAT_LDSTMULFRM,	// Inst #134 = LDM_UPD
  ARM_FORMAT_LDFRM,	// Inst #135 = LDR
  ARM_FORMAT_LDFRM,	// Inst #136 = LDRB
  ARM_FORMAT_LDFRM,	// Inst #137 = LDRBT
  ARM_FORMAT_LDFRM,	// Inst #138 = LDRB_POST
  ARM_FORMAT_LDFRM,	// Inst #139 = LDRB_PRE
  ARM_FORMAT_LDMISCFRM,	// Inst #140 = LDRD
  ARM_FORMAT_LDMISCFRM,	// Inst #141 = LDRD_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #142 = LDRD_PRE
  ARM_FORMAT_LDSTEXFRM,	// Inst #143 = LDREX
  ARM_FORMAT_LDSTEXFRM,	// Inst #144 = LDREXB
  ARM_FORMAT_LDSTEXFRM,	// Inst #145 = LDREXD
  ARM_FORMAT_LDSTEXFRM,	// Inst #146 = LDREXH
  ARM_FORMAT_LDMISCFRM,	// Inst #147 = LDRH
  ARM_FORMAT_LDMISCFRM,	// Inst #148 = LDRHT
  ARM_FORMAT_LDMISCFRM,	// Inst #149 = LDRH_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #150 = LDRH_PRE
  ARM_FORMAT_LDMISCFRM,	// Inst #151 = LDRSB
  ARM_FORMAT_LDMISCFRM,	// Inst #152 = LDRSBT
  ARM_FORMAT_LDMISCFRM,	// Inst #153 = LDRSB_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #154 = LDRSB_PRE
  ARM_FORMAT_LDMISCFRM,	// Inst #155 = LDRSH
  ARM_FORMAT_LDMISCFRM,	// Inst #156 = LDRSHT
  ARM_FORMAT_LDMISCFRM,	// Inst #157 = LDRSH_POST
  ARM_FORMAT_LDMISCFRM,	// Inst #158 = LDRSH_PRE
  ARM_FORMAT_LDFRM,	// Inst #159 = LDRT
  ARM_FORMAT_LDFRM,	// Inst #160 = LDR_POST
  ARM_FORMAT_LDFRM,	// Inst #161 = LDR_PRE
  ARM_FORMAT_LDFRM,	// Inst #162 = LDRcp
  ARM_FORMAT_PSEUDO,	// Inst #163 = LEApcrel
  ARM_FORMAT_PSEUDO,	// Inst #164 = LEApcrelJT
  ARM_FORMAT_BRFRM,	// Inst #165 = MCR
  ARM_FORMAT_BRFRM,	// Inst #166 = MCR2
  ARM_FORMAT_BRFRM,	// Inst #167 = MCRR
  ARM_FORMAT_BRFRM,	// Inst #168 = MCRR2
  ARM_FORMAT_MULFRM,	// Inst #169 = MLA
  ARM_FORMAT_MULFRM,	// Inst #170 = MLS
  ARM_FORMAT_DPFRM,	// Inst #171 = MOVCCi
  ARM_FORMAT_DPFRM,	// Inst #172 = MOVCCr
  ARM_FORMAT_DPSOREGFRM,	// Inst #173 = MOVCCs
  ARM_FORMAT_BRMISCFRM,	// Inst #174 = MOVPCLR
  ARM_FORMAT_BRMISCFRM,	// Inst #175 = MOVPCRX
  ARM_FORMAT_DPFRM,	// Inst #176 = MOVTi16
  ARM_FORMAT_DPFRM,	// Inst #177 = MOVi
  ARM_FORMAT_DPFRM,	// Inst #178 = MOVi16
  ARM_FORMAT_PSEUDO,	// Inst #179 = MOVi2pieces
  ARM_FORMAT_PSEUDO,	// Inst #180 = MOVi32imm
  ARM_FORMAT_DPFRM,	// Inst #181 = MOVr
  ARM_FORMAT_DPFRM,	// Inst #182 = MOVr_TC
  ARM_FORMAT_PSEUDO,	// Inst #183 = MOVrx
  ARM_FORMAT_DPSOREGFRM,	// Inst #184 = MOVs
  ARM_FORMAT_PSEUDO,	// Inst #185 = MOVsra_flag
  ARM_FORMAT_PSEUDO,	// Inst #186 = MOVsrl_flag
  ARM_FORMAT_BRFRM,	// Inst #187 = MRC
  ARM_FORMAT_BRFRM,	// Inst #188 = MRC2
  ARM_FORMAT_BRFRM,	// Inst #189 = MRRC
  ARM_FORMAT_BRFRM,	// Inst #190 = MRRC2
  ARM_FORMAT_BRFRM,	// Inst #191 = MRS
  ARM_FORMAT_BRFRM,	// Inst #192 = MRSsys
  ARM_FORMAT_BRFRM,	// Inst #193 = MSR
  ARM_FORMAT_BRFRM,	// Inst #194 = MSRi
  ARM_FORMAT_BRFRM,	// Inst #195 = MSRsys
  ARM_FORMAT_BRFRM,	// Inst #196 = MSRsysi
  ARM_FORMAT_MULFRM,	// Inst #197 = MUL
  ARM_FORMAT_DPFRM,	// Inst #198 = MVNi
  ARM_FORMAT_DPFRM,	// Inst #199 = MVNr
  ARM_FORMAT_DPSOREGFRM,	// Inst #200 = MVNs
  ARM_FORMAT_MISCFRM,	// Inst #201 = NOP
  ARM_FORMAT_DPFRM,	// Inst #202 = ORRri
  ARM_FORMAT_DPFRM,	// Inst #203 = ORRrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #204 = ORRrs
  ARM_FORMAT_PSEUDO,	// Inst #205 = PICADD
  ARM_FORMAT_PSEUDO,	// Inst #206 = PICLDR
  ARM_FORMAT_PSEUDO,	// Inst #207 = PICLDRB
  ARM_FORMAT_PSEUDO,	// Inst #208 = PICLDRH
  ARM_FORMAT_PSEUDO,	// Inst #209 = PICLDRSB
  ARM_FORMAT_PSEUDO,	// Inst #210 = PICLDRSH
  ARM_FORMAT_PSEUDO,	// Inst #211 = PICSTR
  ARM_FORMAT_PSEUDO,	// Inst #212 = PICSTRB
  ARM_FORMAT_PSEUDO,	// Inst #213 = PICSTRH
  ARM_FORMAT_ARITHMISCFRM,	// Inst #214 = PKHBT
  ARM_FORMAT_ARITHMISCFRM,	// Inst #215 = PKHTB
  ARM_FORMAT_MISCFRM,	// Inst #216 = PLDWi
  ARM_FORMAT_MISCFRM,	// Inst #217 = PLDWr
  ARM_FORMAT_MISCFRM,	// Inst #218 = PLDi
  ARM_FORMAT_MISCFRM,	// Inst #219 = PLDr
  ARM_FORMAT_MISCFRM,	// Inst #220 = PLIi
  ARM_FORMAT_MISCFRM,	// Inst #221 = PLIr
  ARM_FORMAT_DPFRM,	// Inst #222 = QADD
  ARM_FORMAT_DPFRM,	// Inst #223 = QADD16
  ARM_FORMAT_DPFRM,	// Inst #224 = QADD8
  ARM_FORMAT_DPFRM,	// Inst #225 = QASX
  ARM_FORMAT_DPFRM,	// Inst #226 = QDADD
  ARM_FORMAT_DPFRM,	// Inst #227 = QDSUB
  ARM_FORMAT_DPFRM,	// Inst #228 = QSAX
  ARM_FORMAT_DPFRM,	// Inst #229 = QSUB
  ARM_FORMAT_DPFRM,	// Inst #230 = QSUB16
  ARM_FORMAT_DPFRM,	// Inst #231 = QSUB8
  ARM_FORMAT_ARITHMISCFRM,	// Inst #232 = RBIT
  ARM_FORMAT_ARITHMISCFRM,	// Inst #233 = REV
  ARM_FORMAT_ARITHMISCFRM,	// Inst #234 = REV16
  ARM_FORMAT_ARITHMISCFRM,	// Inst #235 = REVSH
  ARM_FORMAT_BRFRM,	// Inst #236 = RFE
  ARM_FORMAT_BRFRM,	// Inst #237 = RFEW
  ARM_FORMAT_DPFRM,	// Inst #238 = RSBSri
  ARM_FORMAT_DPSOREGFRM,	// Inst #239 = RSBSrs
  ARM_FORMAT_DPFRM,	// Inst #240 = RSBri
  ARM_FORMAT_DPFRM,	// Inst #241 = RSBrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #242 = RSBrs
  ARM_FORMAT_DPFRM,	// Inst #243 = RSCSri
  ARM_FORMAT_DPSOREGFRM,	// Inst #244 = RSCSrs
  ARM_FORMAT_DPFRM,	// Inst #245 = RSCri
  ARM_FORMAT_DPFRM,	// Inst #246 = RSCrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #247 = RSCrs
  ARM_FORMAT_DPFRM,	// Inst #248 = SADD16
  ARM_FORMAT_DPFRM,	// Inst #249 = SADD8
  ARM_FORMAT_DPFRM,	// Inst #250 = SASX
  ARM_FORMAT_DPFRM,	// Inst #251 = SBCSSri
  ARM_FORMAT_DPFRM,	// Inst #252 = SBCSSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #253 = SBCSSrs
  ARM_FORMAT_DPFRM,	// Inst #254 = SBCri
  ARM_FORMAT_DPFRM,	// Inst #255 = SBCrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #256 = SBCrs
  ARM_FORMAT_DPFRM,	// Inst #257 = SBFX
  ARM_FORMAT_DPFRM,	// Inst #258 = SEL
  ARM_FORMAT_MISCFRM,	// Inst #259 = SETENDBE
  ARM_FORMAT_MISCFRM,	// Inst #260 = SETENDLE
  ARM_FORMAT_MISCFRM,	// Inst #261 = SEV
  ARM_FORMAT_DPFRM,	// Inst #262 = SHADD16
  ARM_FORMAT_DPFRM,	// Inst #263 = SHADD8
  ARM_FORMAT_DPFRM,	// Inst #264 = SHASX
  ARM_FORMAT_DPFRM,	// Inst #265 = SHSAX
  ARM_FORMAT_DPFRM,	// Inst #266 = SHSUB16
  ARM_FORMAT_DPFRM,	// Inst #267 = SHSUB8
  ARM_FORMAT_BRFRM,	// Inst #268 = SMC
  ARM_FORMAT_MULFRM,	// Inst #269 = SMLABB
  ARM_FORMAT_MULFRM,	// Inst #270 = SMLABT
  ARM_FORMAT_MULFRM,	// Inst #271 = SMLAD
  ARM_FORMAT_MULFRM,	// Inst #272 = SMLADX
  ARM_FORMAT_MULFRM,	// Inst #273 = SMLAL
  ARM_FORMAT_MULFRM,	// Inst #274 = SMLALBB
  ARM_FORMAT_MULFRM,	// Inst #275 = SMLALBT
  ARM_FORMAT_MULFRM,	// Inst #276 = SMLALD
  ARM_FORMAT_MULFRM,	// Inst #277 = SMLALDX
  ARM_FORMAT_MULFRM,	// Inst #278 = SMLALTB
  ARM_FORMAT_MULFRM,	// Inst #279 = SMLALTT
  ARM_FORMAT_MULFRM,	// Inst #280 = SMLATB
  ARM_FORMAT_MULFRM,	// Inst #281 = SMLATT
  ARM_FORMAT_MULFRM,	// Inst #282 = SMLAWB
  ARM_FORMAT_MULFRM,	// Inst #283 = SMLAWT
  ARM_FORMAT_MULFRM,	// Inst #284 = SMLSD
  ARM_FORMAT_MULFRM,	// Inst #285 = SMLSDX
  ARM_FORMAT_MULFRM,	// Inst #286 = SMLSLD
  ARM_FORMAT_MULFRM,	// Inst #287 = SMLSLDX
  ARM_FORMAT_MULFRM,	// Inst #288 = SMMLA
  ARM_FORMAT_MULFRM,	// Inst #289 = SMMLAR
  ARM_FORMAT_MULFRM,	// Inst #290 = SMMLS
  ARM_FORMAT_MULFRM,	// Inst #291 = SMMLSR
  ARM_FORMAT_MULFRM,	// Inst #292 = SMMUL
  ARM_FORMAT_MULFRM,	// Inst #293 = SMMULR
  ARM_FORMAT_MULFRM,	// Inst #294 = SMUAD
  ARM_FORMAT_MULFRM,	// Inst #295 = SMUADX
  ARM_FORMAT_MULFRM,	// Inst #296 = SMULBB
  ARM_FORMAT_MULFRM,	// Inst #297 = SMULBT
  ARM_FORMAT_MULFRM,	// Inst #298 = SMULL
  ARM_FORMAT_MULFRM,	// Inst #299 = SMULTB
  ARM_FORMAT_MULFRM,	// Inst #300 = SMULTT
  ARM_FORMAT_MULFRM,	// Inst #301 = SMULWB
  ARM_FORMAT_MULFRM,	// Inst #302 = SMULWT
  ARM_FORMAT_MULFRM,	// Inst #303 = SMUSD
  ARM_FORMAT_MULFRM,	// Inst #304 = SMUSDX
  ARM_FORMAT_BRFRM,	// Inst #305 = SRS
  ARM_FORMAT_BRFRM,	// Inst #306 = SRSW
  ARM_FORMAT_SATFRM,	// Inst #307 = SSAT
  ARM_FORMAT_SATFRM,	// Inst #308 = SSAT16
  ARM_FORMAT_DPFRM,	// Inst #309 = SSAX
  ARM_FORMAT_DPFRM,	// Inst #310 = SSUB16
  ARM_FORMAT_DPFRM,	// Inst #311 = SSUB8
  ARM_FORMAT_BRFRM,	// Inst #312 = STC2L_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #313 = STC2L_OPTION
  ARM_FORMAT_BRFRM,	// Inst #314 = STC2L_POST
  ARM_FORMAT_BRFRM,	// Inst #315 = STC2L_PRE
  ARM_FORMAT_BRFRM,	// Inst #316 = STC2_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #317 = STC2_OPTION
  ARM_FORMAT_BRFRM,	// Inst #318 = STC2_POST
  ARM_FORMAT_BRFRM,	// Inst #319 = STC2_PRE
  ARM_FORMAT_BRFRM,	// Inst #320 = STCL_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #321 = STCL_OPTION
  ARM_FORMAT_BRFRM,	// Inst #322 = STCL_POST
  ARM_FORMAT_BRFRM,	// Inst #323 = STCL_PRE
  ARM_FORMAT_BRFRM,	// Inst #324 = STC_OFFSET
  ARM_FORMAT_BRFRM,	// Inst #325 = STC_OPTION
  ARM_FORMAT_BRFRM,	// Inst #326 = STC_POST
  ARM_FORMAT_BRFRM,	// Inst #327 = STC_PRE
  ARM_FORMAT_LDSTMULFRM,	// Inst #328 = STM
  ARM_FORMAT_LDSTMULFRM,	// Inst #329 = STM_UPD
  ARM_FORMAT_STFRM,	// Inst #330 = STR
  ARM_FORMAT_STFRM,	// Inst #331 = STRB
  ARM_FORMAT_STFRM,	// Inst #332 = STRBT
  ARM_FORMAT_STFRM,	// Inst #333 = STRB_POST
  ARM_FORMAT_STFRM,	// Inst #334 = STRB_PRE
  ARM_FORMAT_STMISCFRM,	// Inst #335 = STRD
  ARM_FORMAT_STMISCFRM,	// Inst #336 = STRD_POST
  ARM_FORMAT_STMISCFRM,	// Inst #337 = STRD_PRE
  ARM_FORMAT_LDSTEXFRM,	// Inst #338 = STREX
  ARM_FORMAT_LDSTEXFRM,	// Inst #339 = STREXB
  ARM_FORMAT_LDSTEXFRM,	// Inst #340 = STREXD
  ARM_FORMAT_LDSTEXFRM,	// Inst #341 = STREXH
  ARM_FORMAT_STMISCFRM,	// Inst #342 = STRH
  ARM_FORMAT_STMISCFRM,	// Inst #343 = STRHT
  ARM_FORMAT_STMISCFRM,	// Inst #344 = STRH_POST
  ARM_FORMAT_STMISCFRM,	// Inst #345 = STRH_PRE
  ARM_FORMAT_STFRM,	// Inst #346 = STRT
  ARM_FORMAT_STFRM,	// Inst #347 = STR_POST
  ARM_FORMAT_STFRM,	// Inst #348 = STR_PRE
  ARM_FORMAT_DPFRM,	// Inst #349 = SUBSri
  ARM_FORMAT_DPFRM,	// Inst #350 = SUBSrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #351 = SUBSrs
  ARM_FORMAT_DPFRM,	// Inst #352 = SUBri
  ARM_FORMAT_DPFRM,	// Inst #353 = SUBrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #354 = SUBrs
  ARM_FORMAT_BRFRM,	// Inst #355 = SVC
  ARM_FORMAT_LDSTEXFRM,	// Inst #356 = SWP
  ARM_FORMAT_LDSTEXFRM,	// Inst #357 = SWPB
  ARM_FORMAT_EXTFRM,	// Inst #358 = SXTAB16rr
  ARM_FORMAT_EXTFRM,	// Inst #359 = SXTAB16rr_rot
  ARM_FORMAT_EXTFRM,	// Inst #360 = SXTABrr
  ARM_FORMAT_EXTFRM,	// Inst #361 = SXTABrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #362 = SXTAHrr
  ARM_FORMAT_EXTFRM,	// Inst #363 = SXTAHrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #364 = SXTB16r
  ARM_FORMAT_EXTFRM,	// Inst #365 = SXTB16r_rot
  ARM_FORMAT_EXTFRM,	// Inst #366 = SXTBr
  ARM_FORMAT_EXTFRM,	// Inst #367 = SXTBr_rot
  ARM_FORMAT_EXTFRM,	// Inst #368 = SXTHr
  ARM_FORMAT_EXTFRM,	// Inst #369 = SXTHr_rot
  ARM_FORMAT_BRFRM,	// Inst #370 = TAILJMPd
  ARM_FORMAT_BRFRM,	// Inst #371 = TAILJMPdND
  ARM_FORMAT_BRFRM,	// Inst #372 = TAILJMPdNDt
  ARM_FORMAT_BRFRM,	// Inst #373 = TAILJMPdt
  ARM_FORMAT_BRMISCFRM,	// Inst #374 = TAILJMPr
  ARM_FORMAT_BRMISCFRM,	// Inst #375 = TAILJMPrND
  ARM_FORMAT_PSEUDO,	// Inst #376 = TCRETURNdi
  ARM_FORMAT_PSEUDO,	// Inst #377 = TCRETURNdiND
  ARM_FORMAT_PSEUDO,	// Inst #378 = TCRETURNri
  ARM_FORMAT_PSEUDO,	// Inst #379 = TCRETURNriND
  ARM_FORMAT_DPFRM,	// Inst #380 = TEQri
  ARM_FORMAT_DPFRM,	// Inst #381 = TEQrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #382 = TEQrs
  ARM_FORMAT_BRFRM,	// Inst #383 = TPsoft
  ARM_FORMAT_MISCFRM,	// Inst #384 = TRAP
  ARM_FORMAT_DPFRM,	// Inst #385 = TSTri
  ARM_FORMAT_DPFRM,	// Inst #386 = TSTrr
  ARM_FORMAT_DPSOREGFRM,	// Inst #387 = TSTrs
  ARM_FORMAT_DPFRM,	// Inst #388 = UADD16
  ARM_FORMAT_DPFRM,	// Inst #389 = UADD8
  ARM_FORMAT_DPFRM,	// Inst #390 = UASX
  ARM_FORMAT_DPFRM,	// Inst #391 = UBFX
  ARM_FORMAT_DPFRM,	// Inst #392 = UHADD16
  ARM_FORMAT_DPFRM,	// Inst #393 = UHADD8
  ARM_FORMAT_DPFRM,	// Inst #394 = UHASX
  ARM_FORMAT_DPFRM,	// Inst #395 = UHSAX
  ARM_FORMAT_DPFRM,	// Inst #396 = UHSUB16
  ARM_FORMAT_DPFRM,	// Inst #397 = UHSUB8
  ARM_FORMAT_MULFRM,	// Inst #398 = UMAAL
  ARM_FORMAT_MULFRM,	// Inst #399 = UMLAL
  ARM_FORMAT_MULFRM,	// Inst #400 = UMULL
  ARM_FORMAT_DPFRM,	// Inst #401 = UQADD16
  ARM_FORMAT_DPFRM,	// Inst #402 = UQADD8
  ARM_FORMAT_DPFRM,	// Inst #403 = UQASX
  ARM_FORMAT_DPFRM,	// Inst #404 = UQSAX
  ARM_FORMAT_DPFRM,	// Inst #405 = UQSUB16
  ARM_FORMAT_DPFRM,	// Inst #406 = UQSUB8
  ARM_FORMAT_MULFRM,	// Inst #407 = USAD8
  ARM_FORMAT_MULFRM,	// Inst #408 = USADA8
  ARM_FORMAT_SATFRM,	// Inst #409 = USAT
  ARM_FORMAT_SATFRM,	// Inst #410 = USAT16
  ARM_FORMAT_DPFRM,	// Inst #411 = USAX
  ARM_FORMAT_DPFRM,	// Inst #412 = USUB16
  ARM_FORMAT_DPFRM,	// Inst #413 = USUB8
  ARM_FORMAT_EXTFRM,	// Inst #414 = UXTAB16rr
  ARM_FORMAT_EXTFRM,	// Inst #415 = UXTAB16rr_rot
  ARM_FORMAT_EXTFRM,	// Inst #416 = UXTABrr
  ARM_FORMAT_EXTFRM,	// Inst #417 = UXTABrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #418 = UXTAHrr
  ARM_FORMAT_EXTFRM,	// Inst #419 = UXTAHrr_rot
  ARM_FORMAT_EXTFRM,	// Inst #420 = UXTB16r
  ARM_FORMAT_EXTFRM,	// Inst #421 = UXTB16r_rot
  ARM_FORMAT_EXTFRM,	// Inst #422 = UXTBr
  ARM_FORMAT_EXTFRM,	// Inst #423 = UXTBr_rot
  ARM_FORMAT_EXTFRM,	// Inst #424 = UXTHr
  ARM_FORMAT_EXTFRM,	// Inst #425 = UXTHr_rot
  ARM_FORMAT_N3Reg,	// Inst #426 = VABALsv2i64
  ARM_FORMAT_N3Reg,	// Inst #427 = VABALsv4i32
  ARM_FORMAT_N3Reg,	// Inst #428 = VABALsv8i16
  ARM_FORMAT_N3Reg,	// Inst #429 = VABALuv2i64
  ARM_FORMAT_N3Reg,	// Inst #430 = VABALuv4i32
  ARM_FORMAT_N3Reg,	// Inst #431 = VABALuv8i16
  ARM_FORMAT_N3Reg,	// Inst #432 = VABAsv16i8
  ARM_FORMAT_N3Reg,	// Inst #433 = VABAsv2i32
  ARM_FORMAT_N3Reg,	// Inst #434 = VABAsv4i16
  ARM_FORMAT_N3Reg,	// Inst #435 = VABAsv4i32
  ARM_FORMAT_N3Reg,	// Inst #436 = VABAsv8i16
  ARM_FORMAT_N3Reg,	// Inst #437 = VABAsv8i8
  ARM_FORMAT_N3Reg,	// Inst #438 = VABAuv16i8
  ARM_FORMAT_N3Reg,	// Inst #439 = VABAuv2i32
  ARM_FORMAT_N3Reg,	// Inst #440 = VABAuv4i16
  ARM_FORMAT_N3Reg,	// Inst #441 = VABAuv4i32
  ARM_FORMAT_N3Reg,	// Inst #442 = VABAuv8i16
  ARM_FORMAT_N3Reg,	// Inst #443 = VABAuv8i8
  ARM_FORMAT_N3Reg,	// Inst #444 = VABDLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #445 = VABDLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #446 = VABDLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #447 = VABDLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #448 = VABDLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #449 = VABDLuv8i16
  ARM_FORMAT_N3Reg,	// Inst #450 = VABDfd
  ARM_FORMAT_N3Reg,	// Inst #451 = VABDfq
  ARM_FORMAT_N3Reg,	// Inst #452 = VABDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #453 = VABDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #454 = VABDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #455 = VABDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #456 = VABDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #457 = VABDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #458 = VABDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #459 = VABDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #460 = VABDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #461 = VABDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #462 = VABDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #463 = VABDuv8i8
  ARM_FORMAT_VFPUNARYFRM,	// Inst #464 = VABSD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #465 = VABSS
  ARM_FORMAT_N2Reg,	// Inst #466 = VABSfd
  ARM_FORMAT_N2Reg,	// Inst #467 = VABSfd_sfp
  ARM_FORMAT_N2Reg,	// Inst #468 = VABSfq
  ARM_FORMAT_N2Reg,	// Inst #469 = VABSv16i8
  ARM_FORMAT_N2Reg,	// Inst #470 = VABSv2i32
  ARM_FORMAT_N2Reg,	// Inst #471 = VABSv4i16
  ARM_FORMAT_N2Reg,	// Inst #472 = VABSv4i32
  ARM_FORMAT_N2Reg,	// Inst #473 = VABSv8i16
  ARM_FORMAT_N2Reg,	// Inst #474 = VABSv8i8
  ARM_FORMAT_N3Reg,	// Inst #475 = VACGEd
  ARM_FORMAT_N3Reg,	// Inst #476 = VACGEq
  ARM_FORMAT_N3Reg,	// Inst #477 = VACGTd
  ARM_FORMAT_N3Reg,	// Inst #478 = VACGTq
  ARM_FORMAT_VFPBINARYFRM,	// Inst #479 = VADDD
  ARM_FORMAT_N3Reg,	// Inst #480 = VADDHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #481 = VADDHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #482 = VADDHNv8i8
  ARM_FORMAT_N3Reg,	// Inst #483 = VADDLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #484 = VADDLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #485 = VADDLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #486 = VADDLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #487 = VADDLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #488 = VADDLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #489 = VADDS
  ARM_FORMAT_N3Reg,	// Inst #490 = VADDWsv2i64
  ARM_FORMAT_N3Reg,	// Inst #491 = VADDWsv4i32
  ARM_FORMAT_N3Reg,	// Inst #492 = VADDWsv8i16
  ARM_FORMAT_N3Reg,	// Inst #493 = VADDWuv2i64
  ARM_FORMAT_N3Reg,	// Inst #494 = VADDWuv4i32
  ARM_FORMAT_N3Reg,	// Inst #495 = VADDWuv8i16
  ARM_FORMAT_N3Reg,	// Inst #496 = VADDfd
  ARM_FORMAT_N3Reg,	// Inst #497 = VADDfd_sfp
  ARM_FORMAT_N3Reg,	// Inst #498 = VADDfq
  ARM_FORMAT_N3Reg,	// Inst #499 = VADDv16i8
  ARM_FORMAT_N3Reg,	// Inst #500 = VADDv1i64
  ARM_FORMAT_N3Reg,	// Inst #501 = VADDv2i32
  ARM_FORMAT_N3Reg,	// Inst #502 = VADDv2i64
  ARM_FORMAT_N3Reg,	// Inst #503 = VADDv4i16
  ARM_FORMAT_N3Reg,	// Inst #504 = VADDv4i32
  ARM_FORMAT_N3Reg,	// Inst #505 = VADDv8i16
  ARM_FORMAT_N3Reg,	// Inst #506 = VADDv8i8
  ARM_FORMAT_N3Reg,	// Inst #507 = VANDd
  ARM_FORMAT_N3Reg,	// Inst #508 = VANDq
  ARM_FORMAT_N3Reg,	// Inst #509 = VBICd
  ARM_FORMAT_N3Reg,	// Inst #510 = VBICq
  ARM_FORMAT_N3Reg,	// Inst #511 = VBIFd
  ARM_FORMAT_N3Reg,	// Inst #512 = VBIFq
  ARM_FORMAT_N3Reg,	// Inst #513 = VBITd
  ARM_FORMAT_N3Reg,	// Inst #514 = VBITq
  ARM_FORMAT_N3Reg,	// Inst #515 = VBSLd
  ARM_FORMAT_N3Reg,	// Inst #516 = VBSLq
  ARM_FORMAT_N3Reg,	// Inst #517 = VCEQfd
  ARM_FORMAT_N3Reg,	// Inst #518 = VCEQfq
  ARM_FORMAT_N3Reg,	// Inst #519 = VCEQv16i8
  ARM_FORMAT_N3Reg,	// Inst #520 = VCEQv2i32
  ARM_FORMAT_N3Reg,	// Inst #521 = VCEQv4i16
  ARM_FORMAT_N3Reg,	// Inst #522 = VCEQv4i32
  ARM_FORMAT_N3Reg,	// Inst #523 = VCEQv8i16
  ARM_FORMAT_N3Reg,	// Inst #524 = VCEQv8i8
  ARM_FORMAT_N2Reg,	// Inst #525 = VCEQzv16i8
  ARM_FORMAT_N2Reg,	// Inst #526 = VCEQzv2f32
  ARM_FORMAT_N2Reg,	// Inst #527 = VCEQzv2i32
  ARM_FORMAT_N2Reg,	// Inst #528 = VCEQzv4f32
  ARM_FORMAT_N2Reg,	// Inst #529 = VCEQzv4i16
  ARM_FORMAT_N2Reg,	// Inst #530 = VCEQzv4i32
  ARM_FORMAT_N2Reg,	// Inst #531 = VCEQzv8i16
  ARM_FORMAT_N2Reg,	// Inst #532 = VCEQzv8i8
  ARM_FORMAT_N3Reg,	// Inst #533 = VCGEfd
  ARM_FORMAT_N3Reg,	// Inst #534 = VCGEfq
  ARM_FORMAT_N3Reg,	// Inst #535 = VCGEsv16i8
  ARM_FORMAT_N3Reg,	// Inst #536 = VCGEsv2i32
  ARM_FORMAT_N3Reg,	// Inst #537 = VCGEsv4i16
  ARM_FORMAT_N3Reg,	// Inst #538 = VCGEsv4i32
  ARM_FORMAT_N3Reg,	// Inst #539 = VCGEsv8i16
  ARM_FORMAT_N3Reg,	// Inst #540 = VCGEsv8i8
  ARM_FORMAT_N3Reg,	// Inst #541 = VCGEuv16i8
  ARM_FORMAT_N3Reg,	// Inst #542 = VCGEuv2i32
  ARM_FORMAT_N3Reg,	// Inst #543 = VCGEuv4i16
  ARM_FORMAT_N3Reg,	// Inst #544 = VCGEuv4i32
  ARM_FORMAT_N3Reg,	// Inst #545 = VCGEuv8i16
  ARM_FORMAT_N3Reg,	// Inst #546 = VCGEuv8i8
  ARM_FORMAT_N2Reg,	// Inst #547 = VCGEzv16i8
  ARM_FORMAT_N2Reg,	// Inst #548 = VCGEzv2f32
  ARM_FORMAT_N2Reg,	// Inst #549 = VCGEzv2i32
  ARM_FORMAT_N2Reg,	// Inst #550 = VCGEzv4f32
  ARM_FORMAT_N2Reg,	// Inst #551 = VCGEzv4i16
  ARM_FORMAT_N2Reg,	// Inst #552 = VCGEzv4i32
  ARM_FORMAT_N2Reg,	// Inst #553 = VCGEzv8i16
  ARM_FORMAT_N2Reg,	// Inst #554 = VCGEzv8i8
  ARM_FORMAT_N3Reg,	// Inst #555 = VCGTfd
  ARM_FORMAT_N3Reg,	// Inst #556 = VCGTfq
  ARM_FORMAT_N3Reg,	// Inst #557 = VCGTsv16i8
  ARM_FORMAT_N3Reg,	// Inst #558 = VCGTsv2i32
  ARM_FORMAT_N3Reg,	// Inst #559 = VCGTsv4i16
  ARM_FORMAT_N3Reg,	// Inst #560 = VCGTsv4i32
  ARM_FORMAT_N3Reg,	// Inst #561 = VCGTsv8i16
  ARM_FORMAT_N3Reg,	// Inst #562 = VCGTsv8i8
  ARM_FORMAT_N3Reg,	// Inst #563 = VCGTuv16i8
  ARM_FORMAT_N3Reg,	// Inst #564 = VCGTuv2i32
  ARM_FORMAT_N3Reg,	// Inst #565 = VCGTuv4i16
  ARM_FORMAT_N3Reg,	// Inst #566 = VCGTuv4i32
  ARM_FORMAT_N3Reg,	// Inst #567 = VCGTuv8i16
  ARM_FORMAT_N3Reg,	// Inst #568 = VCGTuv8i8
  ARM_FORMAT_N2Reg,	// Inst #569 = VCGTzv16i8
  ARM_FORMAT_N2Reg,	// Inst #570 = VCGTzv2f32
  ARM_FORMAT_N2Reg,	// Inst #571 = VCGTzv2i32
  ARM_FORMAT_N2Reg,	// Inst #572 = VCGTzv4f32
  ARM_FORMAT_N2Reg,	// Inst #573 = VCGTzv4i16
  ARM_FORMAT_N2Reg,	// Inst #574 = VCGTzv4i32
  ARM_FORMAT_N2Reg,	// Inst #575 = VCGTzv8i16
  ARM_FORMAT_N2Reg,	// Inst #576 = VCGTzv8i8
  ARM_FORMAT_N2Reg,	// Inst #577 = VCLEzv16i8
  ARM_FORMAT_N2Reg,	// Inst #578 = VCLEzv2f32
  ARM_FORMAT_N2Reg,	// Inst #579 = VCLEzv2i32
  ARM_FORMAT_N2Reg,	// Inst #580 = VCLEzv4f32
  ARM_FORMAT_N2Reg,	// Inst #581 = VCLEzv4i16
  ARM_FORMAT_N2Reg,	// Inst #582 = VCLEzv4i32
  ARM_FORMAT_N2Reg,	// Inst #583 = VCLEzv8i16
  ARM_FORMAT_N2Reg,	// Inst #584 = VCLEzv8i8
  ARM_FORMAT_N2Reg,	// Inst #585 = VCLSv16i8
  ARM_FORMAT_N2Reg,	// Inst #586 = VCLSv2i32
  ARM_FORMAT_N2Reg,	// Inst #587 = VCLSv4i16
  ARM_FORMAT_N2Reg,	// Inst #588 = VCLSv4i32
  ARM_FORMAT_N2Reg,	// Inst #589 = VCLSv8i16
  ARM_FORMAT_N2Reg,	// Inst #590 = VCLSv8i8
  ARM_FORMAT_N2Reg,	// Inst #591 = VCLTzv16i8
  ARM_FORMAT_N2Reg,	// Inst #592 = VCLTzv2f32
  ARM_FORMAT_N2Reg,	// Inst #593 = VCLTzv2i32
  ARM_FORMAT_N2Reg,	// Inst #594 = VCLTzv4f32
  ARM_FORMAT_N2Reg,	// Inst #595 = VCLTzv4i16
  ARM_FORMAT_N2Reg,	// Inst #596 = VCLTzv4i32
  ARM_FORMAT_N2Reg,	// Inst #597 = VCLTzv8i16
  ARM_FORMAT_N2Reg,	// Inst #598 = VCLTzv8i8
  ARM_FORMAT_N2Reg,	// Inst #599 = VCLZv16i8
  ARM_FORMAT_N2Reg,	// Inst #600 = VCLZv2i32
  ARM_FORMAT_N2Reg,	// Inst #601 = VCLZv4i16
  ARM_FORMAT_N2Reg,	// Inst #602 = VCLZv4i32
  ARM_FORMAT_N2Reg,	// Inst #603 = VCLZv8i16
  ARM_FORMAT_N2Reg,	// Inst #604 = VCLZv8i8
  ARM_FORMAT_VFPUNARYFRM,	// Inst #605 = VCMPD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #606 = VCMPED
  ARM_FORMAT_VFPUNARYFRM,	// Inst #607 = VCMPES
  ARM_FORMAT_VFPUNARYFRM,	// Inst #608 = VCMPEZD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #609 = VCMPEZS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #610 = VCMPS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #611 = VCMPZD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #612 = VCMPZS
  ARM_FORMAT_N2Reg,	// Inst #613 = VCNTd
  ARM_FORMAT_N2Reg,	// Inst #614 = VCNTq
  ARM_FORMAT_VFPUNARYFRM,	// Inst #615 = VCVTBHS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #616 = VCVTBSH
  ARM_FORMAT_VFPUNARYFRM,	// Inst #617 = VCVTDS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #618 = VCVTSD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #619 = VCVTTHS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #620 = VCVTTSH
  ARM_FORMAT_N2Reg,	// Inst #621 = VCVTf2sd
  ARM_FORMAT_N2Reg,	// Inst #622 = VCVTf2sd_sfp
  ARM_FORMAT_N2Reg,	// Inst #623 = VCVTf2sq
  ARM_FORMAT_N2Reg,	// Inst #624 = VCVTf2ud
  ARM_FORMAT_N2Reg,	// Inst #625 = VCVTf2ud_sfp
  ARM_FORMAT_N2Reg,	// Inst #626 = VCVTf2uq
  ARM_FORMAT_NVCVT,	// Inst #627 = VCVTf2xsd
  ARM_FORMAT_NVCVT,	// Inst #628 = VCVTf2xsq
  ARM_FORMAT_NVCVT,	// Inst #629 = VCVTf2xud
  ARM_FORMAT_NVCVT,	// Inst #630 = VCVTf2xuq
  ARM_FORMAT_N2Reg,	// Inst #631 = VCVTs2fd
  ARM_FORMAT_N2Reg,	// Inst #632 = VCVTs2fd_sfp
  ARM_FORMAT_N2Reg,	// Inst #633 = VCVTs2fq
  ARM_FORMAT_N2Reg,	// Inst #634 = VCVTu2fd
  ARM_FORMAT_N2Reg,	// Inst #635 = VCVTu2fd_sfp
  ARM_FORMAT_N2Reg,	// Inst #636 = VCVTu2fq
  ARM_FORMAT_NVCVT,	// Inst #637 = VCVTxs2fd
  ARM_FORMAT_NVCVT,	// Inst #638 = VCVTxs2fq
  ARM_FORMAT_NVCVT,	// Inst #639 = VCVTxu2fd
  ARM_FORMAT_NVCVT,	// Inst #640 = VCVTxu2fq
  ARM_FORMAT_VFPBINARYFRM,	// Inst #641 = VDIVD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #642 = VDIVS
  ARM_FORMAT_NEONDUPFRM,	// Inst #643 = VDUP16d
  ARM_FORMAT_NEONDUPFRM,	// Inst #644 = VDUP16q
  ARM_FORMAT_NEONDUPFRM,	// Inst #645 = VDUP32d
  ARM_FORMAT_NEONDUPFRM,	// Inst #646 = VDUP32q
  ARM_FORMAT_NEONDUPFRM,	// Inst #647 = VDUP8d
  ARM_FORMAT_NEONDUPFRM,	// Inst #648 = VDUP8q
  ARM_FORMAT_NVecDupLn,	// Inst #649 = VDUPLN16d
  ARM_FORMAT_NVecDupLn,	// Inst #650 = VDUPLN16q
  ARM_FORMAT_NVecDupLn,	// Inst #651 = VDUPLN32d
  ARM_FORMAT_NVecDupLn,	// Inst #652 = VDUPLN32q
  ARM_FORMAT_NVecDupLn,	// Inst #653 = VDUPLN8d
  ARM_FORMAT_NVecDupLn,	// Inst #654 = VDUPLN8q
  ARM_FORMAT_NVecDupLn,	// Inst #655 = VDUPLNfd
  ARM_FORMAT_NVecDupLn,	// Inst #656 = VDUPLNfq
  ARM_FORMAT_NEONDUPFRM,	// Inst #657 = VDUPfd
  ARM_FORMAT_N2Reg,	// Inst #658 = VDUPfdf
  ARM_FORMAT_NEONDUPFRM,	// Inst #659 = VDUPfq
  ARM_FORMAT_N2Reg,	// Inst #660 = VDUPfqf
  ARM_FORMAT_N3Reg,	// Inst #661 = VEORd
  ARM_FORMAT_N3Reg,	// Inst #662 = VEORq
  ARM_FORMAT_NVecExtract,	// Inst #663 = VEXTd16
  ARM_FORMAT_NVecExtract,	// Inst #664 = VEXTd32
  ARM_FORMAT_NVecExtract,	// Inst #665 = VEXTd8
  ARM_FORMAT_NVecExtract,	// Inst #666 = VEXTdf
  ARM_FORMAT_NVecExtract,	// Inst #667 = VEXTq16
  ARM_FORMAT_NVecExtract,	// Inst #668 = VEXTq32
  ARM_FORMAT_NVecExtract,	// Inst #669 = VEXTq8
  ARM_FORMAT_NVecExtract,	// Inst #670 = VEXTqf
  ARM_FORMAT_NEONGETLNFRM,	// Inst #671 = VGETLNi32
  ARM_FORMAT_NEONGETLNFRM,	// Inst #672 = VGETLNs16
  ARM_FORMAT_NEONGETLNFRM,	// Inst #673 = VGETLNs8
  ARM_FORMAT_NEONGETLNFRM,	// Inst #674 = VGETLNu16
  ARM_FORMAT_NEONGETLNFRM,	// Inst #675 = VGETLNu8
  ARM_FORMAT_N3Reg,	// Inst #676 = VHADDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #677 = VHADDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #678 = VHADDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #679 = VHADDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #680 = VHADDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #681 = VHADDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #682 = VHADDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #683 = VHADDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #684 = VHADDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #685 = VHADDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #686 = VHADDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #687 = VHADDuv8i8
  ARM_FORMAT_N3Reg,	// Inst #688 = VHSUBsv16i8
  ARM_FORMAT_N3Reg,	// Inst #689 = VHSUBsv2i32
  ARM_FORMAT_N3Reg,	// Inst #690 = VHSUBsv4i16
  ARM_FORMAT_N3Reg,	// Inst #691 = VHSUBsv4i32
  ARM_FORMAT_N3Reg,	// Inst #692 = VHSUBsv8i16
  ARM_FORMAT_N3Reg,	// Inst #693 = VHSUBsv8i8
  ARM_FORMAT_N3Reg,	// Inst #694 = VHSUBuv16i8
  ARM_FORMAT_N3Reg,	// Inst #695 = VHSUBuv2i32
  ARM_FORMAT_N3Reg,	// Inst #696 = VHSUBuv4i16
  ARM_FORMAT_N3Reg,	// Inst #697 = VHSUBuv4i32
  ARM_FORMAT_N3Reg,	// Inst #698 = VHSUBuv8i16
  ARM_FORMAT_N3Reg,	// Inst #699 = VHSUBuv8i8
  ARM_FORMAT_NLdSt,	// Inst #700 = VLD1d16
  ARM_FORMAT_NLdSt,	// Inst #701 = VLD1d16Q
  ARM_FORMAT_NLdSt,	// Inst #702 = VLD1d16Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #703 = VLD1d16T
  ARM_FORMAT_NLdSt,	// Inst #704 = VLD1d16T_UPD
  ARM_FORMAT_NLdSt,	// Inst #705 = VLD1d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #706 = VLD1d32
  ARM_FORMAT_NLdSt,	// Inst #707 = VLD1d32Q
  ARM_FORMAT_NLdSt,	// Inst #708 = VLD1d32Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #709 = VLD1d32T
  ARM_FORMAT_NLdSt,	// Inst #710 = VLD1d32T_UPD
  ARM_FORMAT_NLdSt,	// Inst #711 = VLD1d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #712 = VLD1d64
  ARM_FORMAT_NLdSt,	// Inst #713 = VLD1d64Q
  ARM_FORMAT_PSEUDO,	// Inst #714 = VLD1d64QPseudo
  ARM_FORMAT_PSEUDO,	// Inst #715 = VLD1d64QPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #716 = VLD1d64Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #717 = VLD1d64T
  ARM_FORMAT_PSEUDO,	// Inst #718 = VLD1d64TPseudo
  ARM_FORMAT_PSEUDO,	// Inst #719 = VLD1d64TPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #720 = VLD1d64T_UPD
  ARM_FORMAT_NLdSt,	// Inst #721 = VLD1d64_UPD
  ARM_FORMAT_NLdSt,	// Inst #722 = VLD1d8
  ARM_FORMAT_NLdSt,	// Inst #723 = VLD1d8Q
  ARM_FORMAT_NLdSt,	// Inst #724 = VLD1d8Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #725 = VLD1d8T
  ARM_FORMAT_NLdSt,	// Inst #726 = VLD1d8T_UPD
  ARM_FORMAT_NLdSt,	// Inst #727 = VLD1d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #728 = VLD1q
  ARM_FORMAT_NLdSt,	// Inst #729 = VLD1q16
  ARM_FORMAT_PSEUDO,	// Inst #730 = VLD1q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #731 = VLD1q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #732 = VLD1q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #733 = VLD1q32
  ARM_FORMAT_PSEUDO,	// Inst #734 = VLD1q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #735 = VLD1q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #736 = VLD1q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #737 = VLD1q64
  ARM_FORMAT_PSEUDO,	// Inst #738 = VLD1q64Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #739 = VLD1q64Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #740 = VLD1q64_UPD
  ARM_FORMAT_NLdSt,	// Inst #741 = VLD1q8
  ARM_FORMAT_PSEUDO,	// Inst #742 = VLD1q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #743 = VLD1q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #744 = VLD1q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #745 = VLD2LNd16
  ARM_FORMAT_NLdSt,	// Inst #746 = VLD2LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #747 = VLD2LNd32
  ARM_FORMAT_NLdSt,	// Inst #748 = VLD2LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #749 = VLD2LNd8
  ARM_FORMAT_NLdSt,	// Inst #750 = VLD2LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #751 = VLD2LNq16
  ARM_FORMAT_NLdSt,	// Inst #752 = VLD2LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #753 = VLD2LNq16odd
  ARM_FORMAT_NLdSt,	// Inst #754 = VLD2LNq32
  ARM_FORMAT_NLdSt,	// Inst #755 = VLD2LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #756 = VLD2LNq32odd
  ARM_FORMAT_NLdSt,	// Inst #757 = VLD2b16
  ARM_FORMAT_NLdSt,	// Inst #758 = VLD2b16_UPD
  ARM_FORMAT_NLdSt,	// Inst #759 = VLD2b32
  ARM_FORMAT_NLdSt,	// Inst #760 = VLD2b32_UPD
  ARM_FORMAT_NLdSt,	// Inst #761 = VLD2b8
  ARM_FORMAT_NLdSt,	// Inst #762 = VLD2b8_UPD
  ARM_FORMAT_NLdSt,	// Inst #763 = VLD2d16
  ARM_FORMAT_PSEUDO,	// Inst #764 = VLD2d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #765 = VLD2d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #766 = VLD2d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #767 = VLD2d32
  ARM_FORMAT_PSEUDO,	// Inst #768 = VLD2d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #769 = VLD2d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #770 = VLD2d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #771 = VLD2d8
  ARM_FORMAT_PSEUDO,	// Inst #772 = VLD2d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #773 = VLD2d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #774 = VLD2d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #775 = VLD2q16
  ARM_FORMAT_PSEUDO,	// Inst #776 = VLD2q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #777 = VLD2q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #778 = VLD2q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #779 = VLD2q32
  ARM_FORMAT_PSEUDO,	// Inst #780 = VLD2q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #781 = VLD2q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #782 = VLD2q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #783 = VLD2q8
  ARM_FORMAT_PSEUDO,	// Inst #784 = VLD2q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #785 = VLD2q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #786 = VLD2q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #787 = VLD3LNd16
  ARM_FORMAT_NLdSt,	// Inst #788 = VLD3LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #789 = VLD3LNd32
  ARM_FORMAT_NLdSt,	// Inst #790 = VLD3LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #791 = VLD3LNd8
  ARM_FORMAT_NLdSt,	// Inst #792 = VLD3LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #793 = VLD3LNq16
  ARM_FORMAT_NLdSt,	// Inst #794 = VLD3LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #795 = VLD3LNq16odd
  ARM_FORMAT_NLdSt,	// Inst #796 = VLD3LNq32
  ARM_FORMAT_NLdSt,	// Inst #797 = VLD3LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #798 = VLD3LNq32odd
  ARM_FORMAT_NLdSt,	// Inst #799 = VLD3d16
  ARM_FORMAT_PSEUDO,	// Inst #800 = VLD3d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #801 = VLD3d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #802 = VLD3d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #803 = VLD3d32
  ARM_FORMAT_PSEUDO,	// Inst #804 = VLD3d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #805 = VLD3d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #806 = VLD3d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #807 = VLD3d8
  ARM_FORMAT_PSEUDO,	// Inst #808 = VLD3d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #809 = VLD3d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #810 = VLD3d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #811 = VLD3q16
  ARM_FORMAT_PSEUDO,	// Inst #812 = VLD3q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #813 = VLD3q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #814 = VLD3q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #815 = VLD3q32
  ARM_FORMAT_PSEUDO,	// Inst #816 = VLD3q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #817 = VLD3q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #818 = VLD3q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #819 = VLD3q8
  ARM_FORMAT_PSEUDO,	// Inst #820 = VLD3q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #821 = VLD3q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #822 = VLD3q8oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #823 = VLD4LNd16
  ARM_FORMAT_NLdSt,	// Inst #824 = VLD4LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #825 = VLD4LNd32
  ARM_FORMAT_NLdSt,	// Inst #826 = VLD4LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #827 = VLD4LNd8
  ARM_FORMAT_NLdSt,	// Inst #828 = VLD4LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #829 = VLD4LNq16
  ARM_FORMAT_NLdSt,	// Inst #830 = VLD4LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #831 = VLD4LNq16odd
  ARM_FORMAT_NLdSt,	// Inst #832 = VLD4LNq32
  ARM_FORMAT_NLdSt,	// Inst #833 = VLD4LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #834 = VLD4LNq32odd
  ARM_FORMAT_NLdSt,	// Inst #835 = VLD4d16
  ARM_FORMAT_PSEUDO,	// Inst #836 = VLD4d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #837 = VLD4d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #838 = VLD4d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #839 = VLD4d32
  ARM_FORMAT_PSEUDO,	// Inst #840 = VLD4d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #841 = VLD4d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #842 = VLD4d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #843 = VLD4d8
  ARM_FORMAT_PSEUDO,	// Inst #844 = VLD4d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #845 = VLD4d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #846 = VLD4d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #847 = VLD4q16
  ARM_FORMAT_PSEUDO,	// Inst #848 = VLD4q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #849 = VLD4q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #850 = VLD4q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #851 = VLD4q32
  ARM_FORMAT_PSEUDO,	// Inst #852 = VLD4q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #853 = VLD4q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #854 = VLD4q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #855 = VLD4q8
  ARM_FORMAT_PSEUDO,	// Inst #856 = VLD4q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #857 = VLD4q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #858 = VLD4q8oddPseudo_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #859 = VLDMD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #860 = VLDMD_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #861 = VLDMQ
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #862 = VLDMS
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #863 = VLDMS_UPD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #864 = VLDRD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #865 = VLDRS
  ARM_FORMAT_N3Reg,	// Inst #866 = VMAXfd
  ARM_FORMAT_N3Reg,	// Inst #867 = VMAXfd_sfp
  ARM_FORMAT_N3Reg,	// Inst #868 = VMAXfq
  ARM_FORMAT_N3Reg,	// Inst #869 = VMAXsv16i8
  ARM_FORMAT_N3Reg,	// Inst #870 = VMAXsv2i32
  ARM_FORMAT_N3Reg,	// Inst #871 = VMAXsv4i16
  ARM_FORMAT_N3Reg,	// Inst #872 = VMAXsv4i32
  ARM_FORMAT_N3Reg,	// Inst #873 = VMAXsv8i16
  ARM_FORMAT_N3Reg,	// Inst #874 = VMAXsv8i8
  ARM_FORMAT_N3Reg,	// Inst #875 = VMAXuv16i8
  ARM_FORMAT_N3Reg,	// Inst #876 = VMAXuv2i32
  ARM_FORMAT_N3Reg,	// Inst #877 = VMAXuv4i16
  ARM_FORMAT_N3Reg,	// Inst #878 = VMAXuv4i32
  ARM_FORMAT_N3Reg,	// Inst #879 = VMAXuv8i16
  ARM_FORMAT_N3Reg,	// Inst #880 = VMAXuv8i8
  ARM_FORMAT_N3Reg,	// Inst #881 = VMINfd
  ARM_FORMAT_N3Reg,	// Inst #882 = VMINfd_sfp
  ARM_FORMAT_N3Reg,	// Inst #883 = VMINfq
  ARM_FORMAT_N3Reg,	// Inst #884 = VMINsv16i8
  ARM_FORMAT_N3Reg,	// Inst #885 = VMINsv2i32
  ARM_FORMAT_N3Reg,	// Inst #886 = VMINsv4i16
  ARM_FORMAT_N3Reg,	// Inst #887 = VMINsv4i32
  ARM_FORMAT_N3Reg,	// Inst #888 = VMINsv8i16
  ARM_FORMAT_N3Reg,	// Inst #889 = VMINsv8i8
  ARM_FORMAT_N3Reg,	// Inst #890 = VMINuv16i8
  ARM_FORMAT_N3Reg,	// Inst #891 = VMINuv2i32
  ARM_FORMAT_N3Reg,	// Inst #892 = VMINuv4i16
  ARM_FORMAT_N3Reg,	// Inst #893 = VMINuv4i32
  ARM_FORMAT_N3Reg,	// Inst #894 = VMINuv8i16
  ARM_FORMAT_N3Reg,	// Inst #895 = VMINuv8i8
  ARM_FORMAT_VFPBINARYFRM,	// Inst #896 = VMLAD
  ARM_FORMAT_NVecMulScalar,	// Inst #897 = VMLALslsv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #898 = VMLALslsv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #899 = VMLALsluv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #900 = VMLALsluv4i16
  ARM_FORMAT_N3Reg,	// Inst #901 = VMLALsv2i64
  ARM_FORMAT_N3Reg,	// Inst #902 = VMLALsv4i32
  ARM_FORMAT_N3Reg,	// Inst #903 = VMLALsv8i16
  ARM_FORMAT_N3Reg,	// Inst #904 = VMLALuv2i64
  ARM_FORMAT_N3Reg,	// Inst #905 = VMLALuv4i32
  ARM_FORMAT_N3Reg,	// Inst #906 = VMLALuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #907 = VMLAS
  ARM_FORMAT_N3Reg,	// Inst #908 = VMLAfd
  ARM_FORMAT_N3Reg,	// Inst #909 = VMLAfq
  ARM_FORMAT_NVecMulScalar,	// Inst #910 = VMLAslfd
  ARM_FORMAT_NVecMulScalar,	// Inst #911 = VMLAslfq
  ARM_FORMAT_NVecMulScalar,	// Inst #912 = VMLAslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #913 = VMLAslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #914 = VMLAslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #915 = VMLAslv8i16
  ARM_FORMAT_N3Reg,	// Inst #916 = VMLAv16i8
  ARM_FORMAT_N3Reg,	// Inst #917 = VMLAv2i32
  ARM_FORMAT_N3Reg,	// Inst #918 = VMLAv4i16
  ARM_FORMAT_N3Reg,	// Inst #919 = VMLAv4i32
  ARM_FORMAT_N3Reg,	// Inst #920 = VMLAv8i16
  ARM_FORMAT_N3Reg,	// Inst #921 = VMLAv8i8
  ARM_FORMAT_VFPBINARYFRM,	// Inst #922 = VMLSD
  ARM_FORMAT_NVecMulScalar,	// Inst #923 = VMLSLslsv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #924 = VMLSLslsv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #925 = VMLSLsluv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #926 = VMLSLsluv4i16
  ARM_FORMAT_N3Reg,	// Inst #927 = VMLSLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #928 = VMLSLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #929 = VMLSLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #930 = VMLSLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #931 = VMLSLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #932 = VMLSLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #933 = VMLSS
  ARM_FORMAT_N3Reg,	// Inst #934 = VMLSfd
  ARM_FORMAT_N3Reg,	// Inst #935 = VMLSfq
  ARM_FORMAT_NVecMulScalar,	// Inst #936 = VMLSslfd
  ARM_FORMAT_NVecMulScalar,	// Inst #937 = VMLSslfq
  ARM_FORMAT_NVecMulScalar,	// Inst #938 = VMLSslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #939 = VMLSslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #940 = VMLSslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #941 = VMLSslv8i16
  ARM_FORMAT_N3Reg,	// Inst #942 = VMLSv16i8
  ARM_FORMAT_N3Reg,	// Inst #943 = VMLSv2i32
  ARM_FORMAT_N3Reg,	// Inst #944 = VMLSv4i16
  ARM_FORMAT_N3Reg,	// Inst #945 = VMLSv4i32
  ARM_FORMAT_N3Reg,	// Inst #946 = VMLSv8i16
  ARM_FORMAT_N3Reg,	// Inst #947 = VMLSv8i8
  ARM_FORMAT_VFPUNARYFRM,	// Inst #948 = VMOVD
  ARM_FORMAT_VFPCONV5FRM,	// Inst #949 = VMOVDRR
  ARM_FORMAT_VFPUNARYFRM,	// Inst #950 = VMOVDcc
  ARM_FORMAT_N3Reg,	// Inst #951 = VMOVDneon
  ARM_FORMAT_N2Reg,	// Inst #952 = VMOVLsv2i64
  ARM_FORMAT_N2Reg,	// Inst #953 = VMOVLsv4i32
  ARM_FORMAT_N2Reg,	// Inst #954 = VMOVLsv8i16
  ARM_FORMAT_N2Reg,	// Inst #955 = VMOVLuv2i64
  ARM_FORMAT_N2Reg,	// Inst #956 = VMOVLuv4i32
  ARM_FORMAT_N2Reg,	// Inst #957 = VMOVLuv8i16
  ARM_FORMAT_N2Reg,	// Inst #958 = VMOVNv2i32
  ARM_FORMAT_N2Reg,	// Inst #959 = VMOVNv4i16
  ARM_FORMAT_N2Reg,	// Inst #960 = VMOVNv8i8
  ARM_FORMAT_N3Reg,	// Inst #961 = VMOVQ
  ARM_FORMAT_PSEUDO,	// Inst #962 = VMOVQQ
  ARM_FORMAT_PSEUDO,	// Inst #963 = VMOVQQQQ
  ARM_FORMAT_VFPCONV3FRM,	// Inst #964 = VMOVRRD
  ARM_FORMAT_VFPCONV3FRM,	// Inst #965 = VMOVRRS
  ARM_FORMAT_VFPCONV2FRM,	// Inst #966 = VMOVRS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #967 = VMOVS
  ARM_FORMAT_VFPCONV4FRM,	// Inst #968 = VMOVSR
  ARM_FORMAT_VFPCONV5FRM,	// Inst #969 = VMOVSRR
  ARM_FORMAT_VFPUNARYFRM,	// Inst #970 = VMOVScc
  ARM_FORMAT_N1RegModImm,	// Inst #971 = VMOVv16i8
  ARM_FORMAT_N1RegModImm,	// Inst #972 = VMOVv1i64
  ARM_FORMAT_N1RegModImm,	// Inst #973 = VMOVv2i32
  ARM_FORMAT_N1RegModImm,	// Inst #974 = VMOVv2i64
  ARM_FORMAT_N1RegModImm,	// Inst #975 = VMOVv4i16
  ARM_FORMAT_N1RegModImm,	// Inst #976 = VMOVv4i32
  ARM_FORMAT_N1RegModImm,	// Inst #977 = VMOVv8i16
  ARM_FORMAT_N1RegModImm,	// Inst #978 = VMOVv8i8
  ARM_FORMAT_VFPMISCFRM,	// Inst #979 = VMRS
  ARM_FORMAT_VFPMISCFRM,	// Inst #980 = VMSR
  ARM_FORMAT_VFPBINARYFRM,	// Inst #981 = VMULD
  ARM_FORMAT_N3Reg,	// Inst #982 = VMULLp
  ARM_FORMAT_NVecMulScalar,	// Inst #983 = VMULLslsv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #984 = VMULLslsv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #985 = VMULLsluv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #986 = VMULLsluv4i16
  ARM_FORMAT_N3Reg,	// Inst #987 = VMULLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #988 = VMULLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #989 = VMULLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #990 = VMULLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #991 = VMULLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #992 = VMULLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #993 = VMULS
  ARM_FORMAT_N3Reg,	// Inst #994 = VMULfd
  ARM_FORMAT_N3Reg,	// Inst #995 = VMULfd_sfp
  ARM_FORMAT_N3Reg,	// Inst #996 = VMULfq
  ARM_FORMAT_N3Reg,	// Inst #997 = VMULpd
  ARM_FORMAT_N3Reg,	// Inst #998 = VMULpq
  ARM_FORMAT_NVecMulScalar,	// Inst #999 = VMULslfd
  ARM_FORMAT_NVecMulScalar,	// Inst #1000 = VMULslfq
  ARM_FORMAT_NVecMulScalar,	// Inst #1001 = VMULslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1002 = VMULslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1003 = VMULslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1004 = VMULslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1005 = VMULv16i8
  ARM_FORMAT_N3Reg,	// Inst #1006 = VMULv2i32
  ARM_FORMAT_N3Reg,	// Inst #1007 = VMULv4i16
  ARM_FORMAT_N3Reg,	// Inst #1008 = VMULv4i32
  ARM_FORMAT_N3Reg,	// Inst #1009 = VMULv8i16
  ARM_FORMAT_N3Reg,	// Inst #1010 = VMULv8i8
  ARM_FORMAT_N2Reg,	// Inst #1011 = VMVNd
  ARM_FORMAT_N2Reg,	// Inst #1012 = VMVNq
  ARM_FORMAT_N1RegModImm,	// Inst #1013 = VMVNv2i32
  ARM_FORMAT_N1RegModImm,	// Inst #1014 = VMVNv4i16
  ARM_FORMAT_N1RegModImm,	// Inst #1015 = VMVNv4i32
  ARM_FORMAT_N1RegModImm,	// Inst #1016 = VMVNv8i16
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1017 = VNEGD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1018 = VNEGDcc
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1019 = VNEGS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1020 = VNEGScc
  ARM_FORMAT_N2Reg,	// Inst #1021 = VNEGf32q
  ARM_FORMAT_N2Reg,	// Inst #1022 = VNEGfd
  ARM_FORMAT_N2Reg,	// Inst #1023 = VNEGfd_sfp
  ARM_FORMAT_N2Reg,	// Inst #1024 = VNEGs16d
  ARM_FORMAT_N2Reg,	// Inst #1025 = VNEGs16q
  ARM_FORMAT_N2Reg,	// Inst #1026 = VNEGs32d
  ARM_FORMAT_N2Reg,	// Inst #1027 = VNEGs32q
  ARM_FORMAT_N2Reg,	// Inst #1028 = VNEGs8d
  ARM_FORMAT_N2Reg,	// Inst #1029 = VNEGs8q
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1030 = VNMLAD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1031 = VNMLAS
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1032 = VNMLSD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1033 = VNMLSS
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1034 = VNMULD
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1035 = VNMULS
  ARM_FORMAT_N3Reg,	// Inst #1036 = VORNd
  ARM_FORMAT_N3Reg,	// Inst #1037 = VORNq
  ARM_FORMAT_N3Reg,	// Inst #1038 = VORRd
  ARM_FORMAT_N3Reg,	// Inst #1039 = VORRq
  ARM_FORMAT_N2Reg,	// Inst #1040 = VPADALsv16i8
  ARM_FORMAT_N2Reg,	// Inst #1041 = VPADALsv2i32
  ARM_FORMAT_N2Reg,	// Inst #1042 = VPADALsv4i16
  ARM_FORMAT_N2Reg,	// Inst #1043 = VPADALsv4i32
  ARM_FORMAT_N2Reg,	// Inst #1044 = VPADALsv8i16
  ARM_FORMAT_N2Reg,	// Inst #1045 = VPADALsv8i8
  ARM_FORMAT_N2Reg,	// Inst #1046 = VPADALuv16i8
  ARM_FORMAT_N2Reg,	// Inst #1047 = VPADALuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1048 = VPADALuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1049 = VPADALuv4i32
  ARM_FORMAT_N2Reg,	// Inst #1050 = VPADALuv8i16
  ARM_FORMAT_N2Reg,	// Inst #1051 = VPADALuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1052 = VPADDLsv16i8
  ARM_FORMAT_N2Reg,	// Inst #1053 = VPADDLsv2i32
  ARM_FORMAT_N2Reg,	// Inst #1054 = VPADDLsv4i16
  ARM_FORMAT_N2Reg,	// Inst #1055 = VPADDLsv4i32
  ARM_FORMAT_N2Reg,	// Inst #1056 = VPADDLsv8i16
  ARM_FORMAT_N2Reg,	// Inst #1057 = VPADDLsv8i8
  ARM_FORMAT_N2Reg,	// Inst #1058 = VPADDLuv16i8
  ARM_FORMAT_N2Reg,	// Inst #1059 = VPADDLuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1060 = VPADDLuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1061 = VPADDLuv4i32
  ARM_FORMAT_N2Reg,	// Inst #1062 = VPADDLuv8i16
  ARM_FORMAT_N2Reg,	// Inst #1063 = VPADDLuv8i8
  ARM_FORMAT_N3Reg,	// Inst #1064 = VPADDf
  ARM_FORMAT_N3Reg,	// Inst #1065 = VPADDi16
  ARM_FORMAT_N3Reg,	// Inst #1066 = VPADDi32
  ARM_FORMAT_N3Reg,	// Inst #1067 = VPADDi8
  ARM_FORMAT_N3Reg,	// Inst #1068 = VPMAXf
  ARM_FORMAT_N3Reg,	// Inst #1069 = VPMAXs16
  ARM_FORMAT_N3Reg,	// Inst #1070 = VPMAXs32
  ARM_FORMAT_N3Reg,	// Inst #1071 = VPMAXs8
  ARM_FORMAT_N3Reg,	// Inst #1072 = VPMAXu16
  ARM_FORMAT_N3Reg,	// Inst #1073 = VPMAXu32
  ARM_FORMAT_N3Reg,	// Inst #1074 = VPMAXu8
  ARM_FORMAT_N3Reg,	// Inst #1075 = VPMINf
  ARM_FORMAT_N3Reg,	// Inst #1076 = VPMINs16
  ARM_FORMAT_N3Reg,	// Inst #1077 = VPMINs32
  ARM_FORMAT_N3Reg,	// Inst #1078 = VPMINs8
  ARM_FORMAT_N3Reg,	// Inst #1079 = VPMINu16
  ARM_FORMAT_N3Reg,	// Inst #1080 = VPMINu32
  ARM_FORMAT_N3Reg,	// Inst #1081 = VPMINu8
  ARM_FORMAT_N2Reg,	// Inst #1082 = VQABSv16i8
  ARM_FORMAT_N2Reg,	// Inst #1083 = VQABSv2i32
  ARM_FORMAT_N2Reg,	// Inst #1084 = VQABSv4i16
  ARM_FORMAT_N2Reg,	// Inst #1085 = VQABSv4i32
  ARM_FORMAT_N2Reg,	// Inst #1086 = VQABSv8i16
  ARM_FORMAT_N2Reg,	// Inst #1087 = VQABSv8i8
  ARM_FORMAT_N3Reg,	// Inst #1088 = VQADDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1089 = VQADDsv1i64
  ARM_FORMAT_N3Reg,	// Inst #1090 = VQADDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1091 = VQADDsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1092 = VQADDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1093 = VQADDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1094 = VQADDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1095 = VQADDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1096 = VQADDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1097 = VQADDuv1i64
  ARM_FORMAT_N3Reg,	// Inst #1098 = VQADDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1099 = VQADDuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1100 = VQADDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1101 = VQADDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1102 = VQADDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1103 = VQADDuv8i8
  ARM_FORMAT_NVecMulScalar,	// Inst #1104 = VQDMLALslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1105 = VQDMLALslv4i16
  ARM_FORMAT_N3Reg,	// Inst #1106 = VQDMLALv2i64
  ARM_FORMAT_N3Reg,	// Inst #1107 = VQDMLALv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1108 = VQDMLSLslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1109 = VQDMLSLslv4i16
  ARM_FORMAT_N3Reg,	// Inst #1110 = VQDMLSLv2i64
  ARM_FORMAT_N3Reg,	// Inst #1111 = VQDMLSLv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1112 = VQDMULHslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1113 = VQDMULHslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1114 = VQDMULHslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1115 = VQDMULHslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1116 = VQDMULHv2i32
  ARM_FORMAT_N3Reg,	// Inst #1117 = VQDMULHv4i16
  ARM_FORMAT_N3Reg,	// Inst #1118 = VQDMULHv4i32
  ARM_FORMAT_N3Reg,	// Inst #1119 = VQDMULHv8i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1120 = VQDMULLslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1121 = VQDMULLslv4i16
  ARM_FORMAT_N3Reg,	// Inst #1122 = VQDMULLv2i64
  ARM_FORMAT_N3Reg,	// Inst #1123 = VQDMULLv4i32
  ARM_FORMAT_N2Reg,	// Inst #1124 = VQMOVNsuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1125 = VQMOVNsuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1126 = VQMOVNsuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1127 = VQMOVNsv2i32
  ARM_FORMAT_N2Reg,	// Inst #1128 = VQMOVNsv4i16
  ARM_FORMAT_N2Reg,	// Inst #1129 = VQMOVNsv8i8
  ARM_FORMAT_N2Reg,	// Inst #1130 = VQMOVNuv2i32
  ARM_FORMAT_N2Reg,	// Inst #1131 = VQMOVNuv4i16
  ARM_FORMAT_N2Reg,	// Inst #1132 = VQMOVNuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1133 = VQNEGv16i8
  ARM_FORMAT_N2Reg,	// Inst #1134 = VQNEGv2i32
  ARM_FORMAT_N2Reg,	// Inst #1135 = VQNEGv4i16
  ARM_FORMAT_N2Reg,	// Inst #1136 = VQNEGv4i32
  ARM_FORMAT_N2Reg,	// Inst #1137 = VQNEGv8i16
  ARM_FORMAT_N2Reg,	// Inst #1138 = VQNEGv8i8
  ARM_FORMAT_NVecMulScalar,	// Inst #1139 = VQRDMULHslv2i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1140 = VQRDMULHslv4i16
  ARM_FORMAT_NVecMulScalar,	// Inst #1141 = VQRDMULHslv4i32
  ARM_FORMAT_NVecMulScalar,	// Inst #1142 = VQRDMULHslv8i16
  ARM_FORMAT_N3Reg,	// Inst #1143 = VQRDMULHv2i32
  ARM_FORMAT_N3Reg,	// Inst #1144 = VQRDMULHv4i16
  ARM_FORMAT_N3Reg,	// Inst #1145 = VQRDMULHv4i32
  ARM_FORMAT_N3Reg,	// Inst #1146 = VQRDMULHv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1147 = VQRSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1148 = VQRSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1149 = VQRSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1150 = VQRSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1151 = VQRSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1152 = VQRSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1153 = VQRSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1154 = VQRSHLsv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1155 = VQRSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1156 = VQRSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1157 = VQRSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1158 = VQRSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1159 = VQRSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1160 = VQRSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1161 = VQRSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1162 = VQRSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1163 = VQRSHRNsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1164 = VQRSHRNsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1165 = VQRSHRNsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1166 = VQRSHRNuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1167 = VQRSHRNuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1168 = VQRSHRNuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1169 = VQRSHRUNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1170 = VQRSHRUNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1171 = VQRSHRUNv8i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1172 = VQSHLsiv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1173 = VQSHLsiv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1174 = VQSHLsiv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1175 = VQSHLsiv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1176 = VQSHLsiv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1177 = VQSHLsiv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1178 = VQSHLsiv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1179 = VQSHLsiv8i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1180 = VQSHLsuv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1181 = VQSHLsuv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1182 = VQSHLsuv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1183 = VQSHLsuv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1184 = VQSHLsuv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1185 = VQSHLsuv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1186 = VQSHLsuv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1187 = VQSHLsuv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1188 = VQSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1189 = VQSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1190 = VQSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1191 = VQSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1192 = VQSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1193 = VQSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1194 = VQSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1195 = VQSHLsv8i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1196 = VQSHLuiv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1197 = VQSHLuiv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1198 = VQSHLuiv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1199 = VQSHLuiv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1200 = VQSHLuiv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1201 = VQSHLuiv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1202 = VQSHLuiv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1203 = VQSHLuiv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1204 = VQSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1205 = VQSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1206 = VQSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1207 = VQSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1208 = VQSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1209 = VQSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1210 = VQSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1211 = VQSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1212 = VQSHRNsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1213 = VQSHRNsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1214 = VQSHRNsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1215 = VQSHRNuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1216 = VQSHRNuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1217 = VQSHRNuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1218 = VQSHRUNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1219 = VQSHRUNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1220 = VQSHRUNv8i8
  ARM_FORMAT_N3Reg,	// Inst #1221 = VQSUBsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1222 = VQSUBsv1i64
  ARM_FORMAT_N3Reg,	// Inst #1223 = VQSUBsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1224 = VQSUBsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1225 = VQSUBsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1226 = VQSUBsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1227 = VQSUBsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1228 = VQSUBsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1229 = VQSUBuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1230 = VQSUBuv1i64
  ARM_FORMAT_N3Reg,	// Inst #1231 = VQSUBuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1232 = VQSUBuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1233 = VQSUBuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1234 = VQSUBuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1235 = VQSUBuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1236 = VQSUBuv8i8
  ARM_FORMAT_N3Reg,	// Inst #1237 = VRADDHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #1238 = VRADDHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #1239 = VRADDHNv8i8
  ARM_FORMAT_N2Reg,	// Inst #1240 = VRECPEd
  ARM_FORMAT_N2Reg,	// Inst #1241 = VRECPEfd
  ARM_FORMAT_N2Reg,	// Inst #1242 = VRECPEfq
  ARM_FORMAT_N2Reg,	// Inst #1243 = VRECPEq
  ARM_FORMAT_N3Reg,	// Inst #1244 = VRECPSfd
  ARM_FORMAT_N3Reg,	// Inst #1245 = VRECPSfq
  ARM_FORMAT_N2Reg,	// Inst #1246 = VREV16d8
  ARM_FORMAT_N2Reg,	// Inst #1247 = VREV16q8
  ARM_FORMAT_N2Reg,	// Inst #1248 = VREV32d16
  ARM_FORMAT_N2Reg,	// Inst #1249 = VREV32d8
  ARM_FORMAT_N2Reg,	// Inst #1250 = VREV32q16
  ARM_FORMAT_N2Reg,	// Inst #1251 = VREV32q8
  ARM_FORMAT_N2Reg,	// Inst #1252 = VREV64d16
  ARM_FORMAT_N2Reg,	// Inst #1253 = VREV64d32
  ARM_FORMAT_N2Reg,	// Inst #1254 = VREV64d8
  ARM_FORMAT_N2Reg,	// Inst #1255 = VREV64df
  ARM_FORMAT_N2Reg,	// Inst #1256 = VREV64q16
  ARM_FORMAT_N2Reg,	// Inst #1257 = VREV64q32
  ARM_FORMAT_N2Reg,	// Inst #1258 = VREV64q8
  ARM_FORMAT_N2Reg,	// Inst #1259 = VREV64qf
  ARM_FORMAT_N3Reg,	// Inst #1260 = VRHADDsv16i8
  ARM_FORMAT_N3Reg,	// Inst #1261 = VRHADDsv2i32
  ARM_FORMAT_N3Reg,	// Inst #1262 = VRHADDsv4i16
  ARM_FORMAT_N3Reg,	// Inst #1263 = VRHADDsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1264 = VRHADDsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1265 = VRHADDsv8i8
  ARM_FORMAT_N3Reg,	// Inst #1266 = VRHADDuv16i8
  ARM_FORMAT_N3Reg,	// Inst #1267 = VRHADDuv2i32
  ARM_FORMAT_N3Reg,	// Inst #1268 = VRHADDuv4i16
  ARM_FORMAT_N3Reg,	// Inst #1269 = VRHADDuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1270 = VRHADDuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1271 = VRHADDuv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1272 = VRSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1273 = VRSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1274 = VRSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1275 = VRSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1276 = VRSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1277 = VRSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1278 = VRSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1279 = VRSHLsv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1280 = VRSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1281 = VRSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1282 = VRSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1283 = VRSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1284 = VRSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1285 = VRSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1286 = VRSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1287 = VRSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1288 = VRSHRNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1289 = VRSHRNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1290 = VRSHRNv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1291 = VRSHRsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1292 = VRSHRsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1293 = VRSHRsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1294 = VRSHRsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1295 = VRSHRsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1296 = VRSHRsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1297 = VRSHRsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1298 = VRSHRsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1299 = VRSHRuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1300 = VRSHRuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1301 = VRSHRuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1302 = VRSHRuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1303 = VRSHRuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1304 = VRSHRuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1305 = VRSHRuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1306 = VRSHRuv8i8
  ARM_FORMAT_N2Reg,	// Inst #1307 = VRSQRTEd
  ARM_FORMAT_N2Reg,	// Inst #1308 = VRSQRTEfd
  ARM_FORMAT_N2Reg,	// Inst #1309 = VRSQRTEfq
  ARM_FORMAT_N2Reg,	// Inst #1310 = VRSQRTEq
  ARM_FORMAT_N3Reg,	// Inst #1311 = VRSQRTSfd
  ARM_FORMAT_N3Reg,	// Inst #1312 = VRSQRTSfq
  ARM_FORMAT_N2RegVecShR,	// Inst #1313 = VRSRAsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1314 = VRSRAsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1315 = VRSRAsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1316 = VRSRAsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1317 = VRSRAsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1318 = VRSRAsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1319 = VRSRAsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1320 = VRSRAsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1321 = VRSRAuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1322 = VRSRAuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1323 = VRSRAuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1324 = VRSRAuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1325 = VRSRAuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1326 = VRSRAuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1327 = VRSRAuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1328 = VRSRAuv8i8
  ARM_FORMAT_N3Reg,	// Inst #1329 = VRSUBHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #1330 = VRSUBHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #1331 = VRSUBHNv8i8
  ARM_FORMAT_NEONSETLNFRM,	// Inst #1332 = VSETLNi16
  ARM_FORMAT_NEONSETLNFRM,	// Inst #1333 = VSETLNi32
  ARM_FORMAT_NEONSETLNFRM,	// Inst #1334 = VSETLNi8
  ARM_FORMAT_N2RegVecShL,	// Inst #1335 = VSHLLi16
  ARM_FORMAT_N2RegVecShL,	// Inst #1336 = VSHLLi32
  ARM_FORMAT_N2RegVecShL,	// Inst #1337 = VSHLLi8
  ARM_FORMAT_N2RegVecShL,	// Inst #1338 = VSHLLsv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1339 = VSHLLsv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1340 = VSHLLsv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1341 = VSHLLuv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1342 = VSHLLuv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1343 = VSHLLuv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1344 = VSHLiv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1345 = VSHLiv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1346 = VSHLiv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1347 = VSHLiv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1348 = VSHLiv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1349 = VSHLiv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1350 = VSHLiv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1351 = VSHLiv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1352 = VSHLsv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1353 = VSHLsv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1354 = VSHLsv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1355 = VSHLsv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1356 = VSHLsv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1357 = VSHLsv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1358 = VSHLsv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1359 = VSHLsv8i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1360 = VSHLuv16i8
  ARM_FORMAT_N3RegVecSh,	// Inst #1361 = VSHLuv1i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1362 = VSHLuv2i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1363 = VSHLuv2i64
  ARM_FORMAT_N3RegVecSh,	// Inst #1364 = VSHLuv4i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1365 = VSHLuv4i32
  ARM_FORMAT_N3RegVecSh,	// Inst #1366 = VSHLuv8i16
  ARM_FORMAT_N3RegVecSh,	// Inst #1367 = VSHLuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1368 = VSHRNv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1369 = VSHRNv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1370 = VSHRNv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1371 = VSHRsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1372 = VSHRsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1373 = VSHRsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1374 = VSHRsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1375 = VSHRsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1376 = VSHRsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1377 = VSHRsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1378 = VSHRsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1379 = VSHRuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1380 = VSHRuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1381 = VSHRuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1382 = VSHRuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1383 = VSHRuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1384 = VSHRuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1385 = VSHRuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1386 = VSHRuv8i8
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1387 = VSHTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1388 = VSHTOS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1389 = VSITOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1390 = VSITOS
  ARM_FORMAT_N2RegVecShL,	// Inst #1391 = VSLIv16i8
  ARM_FORMAT_N2RegVecShL,	// Inst #1392 = VSLIv1i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1393 = VSLIv2i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1394 = VSLIv2i64
  ARM_FORMAT_N2RegVecShL,	// Inst #1395 = VSLIv4i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1396 = VSLIv4i32
  ARM_FORMAT_N2RegVecShL,	// Inst #1397 = VSLIv8i16
  ARM_FORMAT_N2RegVecShL,	// Inst #1398 = VSLIv8i8
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1399 = VSLTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1400 = VSLTOS
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1401 = VSQRTD
  ARM_FORMAT_VFPUNARYFRM,	// Inst #1402 = VSQRTS
  ARM_FORMAT_N2RegVecShR,	// Inst #1403 = VSRAsv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1404 = VSRAsv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1405 = VSRAsv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1406 = VSRAsv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1407 = VSRAsv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1408 = VSRAsv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1409 = VSRAsv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1410 = VSRAsv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1411 = VSRAuv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1412 = VSRAuv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1413 = VSRAuv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1414 = VSRAuv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1415 = VSRAuv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1416 = VSRAuv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1417 = VSRAuv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1418 = VSRAuv8i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1419 = VSRIv16i8
  ARM_FORMAT_N2RegVecShR,	// Inst #1420 = VSRIv1i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1421 = VSRIv2i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1422 = VSRIv2i64
  ARM_FORMAT_N2RegVecShR,	// Inst #1423 = VSRIv4i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1424 = VSRIv4i32
  ARM_FORMAT_N2RegVecShR,	// Inst #1425 = VSRIv8i16
  ARM_FORMAT_N2RegVecShR,	// Inst #1426 = VSRIv8i8
  ARM_FORMAT_NLdSt,	// Inst #1427 = VST1d16
  ARM_FORMAT_NLdSt,	// Inst #1428 = VST1d16Q
  ARM_FORMAT_NLdSt,	// Inst #1429 = VST1d16Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1430 = VST1d16T
  ARM_FORMAT_NLdSt,	// Inst #1431 = VST1d16T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1432 = VST1d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1433 = VST1d32
  ARM_FORMAT_NLdSt,	// Inst #1434 = VST1d32Q
  ARM_FORMAT_NLdSt,	// Inst #1435 = VST1d32Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1436 = VST1d32T
  ARM_FORMAT_NLdSt,	// Inst #1437 = VST1d32T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1438 = VST1d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1439 = VST1d64
  ARM_FORMAT_NLdSt,	// Inst #1440 = VST1d64Q
  ARM_FORMAT_PSEUDO,	// Inst #1441 = VST1d64QPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1442 = VST1d64QPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1443 = VST1d64Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1444 = VST1d64T
  ARM_FORMAT_PSEUDO,	// Inst #1445 = VST1d64TPseudo
  ARM_FORMAT_PSEUDO,	// Inst #1446 = VST1d64TPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1447 = VST1d64T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1448 = VST1d64_UPD
  ARM_FORMAT_NLdSt,	// Inst #1449 = VST1d8
  ARM_FORMAT_NLdSt,	// Inst #1450 = VST1d8Q
  ARM_FORMAT_NLdSt,	// Inst #1451 = VST1d8Q_UPD
  ARM_FORMAT_NLdSt,	// Inst #1452 = VST1d8T
  ARM_FORMAT_NLdSt,	// Inst #1453 = VST1d8T_UPD
  ARM_FORMAT_NLdSt,	// Inst #1454 = VST1d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1455 = VST1q
  ARM_FORMAT_NLdSt,	// Inst #1456 = VST1q16
  ARM_FORMAT_PSEUDO,	// Inst #1457 = VST1q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1458 = VST1q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1459 = VST1q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1460 = VST1q32
  ARM_FORMAT_PSEUDO,	// Inst #1461 = VST1q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1462 = VST1q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1463 = VST1q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1464 = VST1q64
  ARM_FORMAT_PSEUDO,	// Inst #1465 = VST1q64Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1466 = VST1q64Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1467 = VST1q64_UPD
  ARM_FORMAT_NLdSt,	// Inst #1468 = VST1q8
  ARM_FORMAT_PSEUDO,	// Inst #1469 = VST1q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1470 = VST1q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1471 = VST1q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1472 = VST2LNd16
  ARM_FORMAT_NLdSt,	// Inst #1473 = VST2LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1474 = VST2LNd32
  ARM_FORMAT_NLdSt,	// Inst #1475 = VST2LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1476 = VST2LNd8
  ARM_FORMAT_NLdSt,	// Inst #1477 = VST2LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1478 = VST2LNq16
  ARM_FORMAT_NLdSt,	// Inst #1479 = VST2LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1480 = VST2LNq16odd
  ARM_FORMAT_NLdSt,	// Inst #1481 = VST2LNq32
  ARM_FORMAT_NLdSt,	// Inst #1482 = VST2LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1483 = VST2LNq32odd
  ARM_FORMAT_NLdSt,	// Inst #1484 = VST2b16
  ARM_FORMAT_NLdSt,	// Inst #1485 = VST2b16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1486 = VST2b32
  ARM_FORMAT_NLdSt,	// Inst #1487 = VST2b32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1488 = VST2b8
  ARM_FORMAT_NLdSt,	// Inst #1489 = VST2b8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1490 = VST2d16
  ARM_FORMAT_PSEUDO,	// Inst #1491 = VST2d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1492 = VST2d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1493 = VST2d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1494 = VST2d32
  ARM_FORMAT_PSEUDO,	// Inst #1495 = VST2d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1496 = VST2d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1497 = VST2d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1498 = VST2d8
  ARM_FORMAT_PSEUDO,	// Inst #1499 = VST2d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1500 = VST2d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1501 = VST2d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1502 = VST2q16
  ARM_FORMAT_PSEUDO,	// Inst #1503 = VST2q16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1504 = VST2q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1505 = VST2q16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1506 = VST2q32
  ARM_FORMAT_PSEUDO,	// Inst #1507 = VST2q32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1508 = VST2q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1509 = VST2q32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1510 = VST2q8
  ARM_FORMAT_PSEUDO,	// Inst #1511 = VST2q8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1512 = VST2q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1513 = VST2q8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1514 = VST3LNd16
  ARM_FORMAT_NLdSt,	// Inst #1515 = VST3LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1516 = VST3LNd32
  ARM_FORMAT_NLdSt,	// Inst #1517 = VST3LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1518 = VST3LNd8
  ARM_FORMAT_NLdSt,	// Inst #1519 = VST3LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1520 = VST3LNq16
  ARM_FORMAT_NLdSt,	// Inst #1521 = VST3LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1522 = VST3LNq16odd
  ARM_FORMAT_NLdSt,	// Inst #1523 = VST3LNq32
  ARM_FORMAT_NLdSt,	// Inst #1524 = VST3LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1525 = VST3LNq32odd
  ARM_FORMAT_NLdSt,	// Inst #1526 = VST3d16
  ARM_FORMAT_PSEUDO,	// Inst #1527 = VST3d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1528 = VST3d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1529 = VST3d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1530 = VST3d32
  ARM_FORMAT_PSEUDO,	// Inst #1531 = VST3d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1532 = VST3d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1533 = VST3d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1534 = VST3d8
  ARM_FORMAT_PSEUDO,	// Inst #1535 = VST3d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1536 = VST3d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1537 = VST3d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1538 = VST3q16
  ARM_FORMAT_PSEUDO,	// Inst #1539 = VST3q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1540 = VST3q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1541 = VST3q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1542 = VST3q32
  ARM_FORMAT_PSEUDO,	// Inst #1543 = VST3q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1544 = VST3q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1545 = VST3q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1546 = VST3q8
  ARM_FORMAT_PSEUDO,	// Inst #1547 = VST3q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1548 = VST3q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1549 = VST3q8oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1550 = VST4LNd16
  ARM_FORMAT_NLdSt,	// Inst #1551 = VST4LNd16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1552 = VST4LNd32
  ARM_FORMAT_NLdSt,	// Inst #1553 = VST4LNd32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1554 = VST4LNd8
  ARM_FORMAT_NLdSt,	// Inst #1555 = VST4LNd8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1556 = VST4LNq16
  ARM_FORMAT_NLdSt,	// Inst #1557 = VST4LNq16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1558 = VST4LNq16odd
  ARM_FORMAT_NLdSt,	// Inst #1559 = VST4LNq32
  ARM_FORMAT_NLdSt,	// Inst #1560 = VST4LNq32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1561 = VST4LNq32odd
  ARM_FORMAT_NLdSt,	// Inst #1562 = VST4d16
  ARM_FORMAT_PSEUDO,	// Inst #1563 = VST4d16Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1564 = VST4d16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1565 = VST4d16_UPD
  ARM_FORMAT_NLdSt,	// Inst #1566 = VST4d32
  ARM_FORMAT_PSEUDO,	// Inst #1567 = VST4d32Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1568 = VST4d32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1569 = VST4d32_UPD
  ARM_FORMAT_NLdSt,	// Inst #1570 = VST4d8
  ARM_FORMAT_PSEUDO,	// Inst #1571 = VST4d8Pseudo
  ARM_FORMAT_PSEUDO,	// Inst #1572 = VST4d8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1573 = VST4d8_UPD
  ARM_FORMAT_NLdSt,	// Inst #1574 = VST4q16
  ARM_FORMAT_PSEUDO,	// Inst #1575 = VST4q16Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1576 = VST4q16_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1577 = VST4q16oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1578 = VST4q32
  ARM_FORMAT_PSEUDO,	// Inst #1579 = VST4q32Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1580 = VST4q32_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1581 = VST4q32oddPseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1582 = VST4q8
  ARM_FORMAT_PSEUDO,	// Inst #1583 = VST4q8Pseudo_UPD
  ARM_FORMAT_NLdSt,	// Inst #1584 = VST4q8_UPD
  ARM_FORMAT_PSEUDO,	// Inst #1585 = VST4q8oddPseudo_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1586 = VSTMD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1587 = VSTMD_UPD
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1588 = VSTMQ
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1589 = VSTMS
  ARM_FORMAT_VFPLDSTMULFRM,	// Inst #1590 = VSTMS_UPD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #1591 = VSTRD
  ARM_FORMAT_VFPLDSTFRM,	// Inst #1592 = VSTRS
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1593 = VSUBD
  ARM_FORMAT_N3Reg,	// Inst #1594 = VSUBHNv2i32
  ARM_FORMAT_N3Reg,	// Inst #1595 = VSUBHNv4i16
  ARM_FORMAT_N3Reg,	// Inst #1596 = VSUBHNv8i8
  ARM_FORMAT_N3Reg,	// Inst #1597 = VSUBLsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1598 = VSUBLsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1599 = VSUBLsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1600 = VSUBLuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1601 = VSUBLuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1602 = VSUBLuv8i16
  ARM_FORMAT_VFPBINARYFRM,	// Inst #1603 = VSUBS
  ARM_FORMAT_N3Reg,	// Inst #1604 = VSUBWsv2i64
  ARM_FORMAT_N3Reg,	// Inst #1605 = VSUBWsv4i32
  ARM_FORMAT_N3Reg,	// Inst #1606 = VSUBWsv8i16
  ARM_FORMAT_N3Reg,	// Inst #1607 = VSUBWuv2i64
  ARM_FORMAT_N3Reg,	// Inst #1608 = VSUBWuv4i32
  ARM_FORMAT_N3Reg,	// Inst #1609 = VSUBWuv8i16
  ARM_FORMAT_N3Reg,	// Inst #1610 = VSUBfd
  ARM_FORMAT_N3Reg,	// Inst #1611 = VSUBfd_sfp
  ARM_FORMAT_N3Reg,	// Inst #1612 = VSUBfq
  ARM_FORMAT_N3Reg,	// Inst #1613 = VSUBv16i8
  ARM_FORMAT_N3Reg,	// Inst #1614 = VSUBv1i64
  ARM_FORMAT_N3Reg,	// Inst #1615 = VSUBv2i32
  ARM_FORMAT_N3Reg,	// Inst #1616 = VSUBv2i64
  ARM_FORMAT_N3Reg,	// Inst #1617 = VSUBv4i16
  ARM_FORMAT_N3Reg,	// Inst #1618 = VSUBv4i32
  ARM_FORMAT_N3Reg,	// Inst #1619 = VSUBv8i16
  ARM_FORMAT_N3Reg,	// Inst #1620 = VSUBv8i8
  ARM_FORMAT_N2Reg,	// Inst #1621 = VSWPd
  ARM_FORMAT_N2Reg,	// Inst #1622 = VSWPq
  ARM_FORMAT_NVTBL,	// Inst #1623 = VTBL1
  ARM_FORMAT_NVTBL,	// Inst #1624 = VTBL2
  ARM_FORMAT_NVTBL,	// Inst #1625 = VTBL3
  ARM_FORMAT_NVTBL,	// Inst #1626 = VTBL4
  ARM_FORMAT_NVTBL,	// Inst #1627 = VTBX1
  ARM_FORMAT_NVTBL,	// Inst #1628 = VTBX2
  ARM_FORMAT_NVTBL,	// Inst #1629 = VTBX3
  ARM_FORMAT_NVTBL,	// Inst #1630 = VTBX4
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1631 = VTOSHD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1632 = VTOSHS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1633 = VTOSIRD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1634 = VTOSIRS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1635 = VTOSIZD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1636 = VTOSIZS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1637 = VTOSLD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1638 = VTOSLS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1639 = VTOUHD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1640 = VTOUHS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1641 = VTOUIRD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1642 = VTOUIRS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1643 = VTOUIZD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1644 = VTOUIZS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1645 = VTOULD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1646 = VTOULS
  ARM_FORMAT_N2Reg,	// Inst #1647 = VTRNd16
  ARM_FORMAT_N2Reg,	// Inst #1648 = VTRNd32
  ARM_FORMAT_N2Reg,	// Inst #1649 = VTRNd8
  ARM_FORMAT_N2Reg,	// Inst #1650 = VTRNq16
  ARM_FORMAT_N2Reg,	// Inst #1651 = VTRNq32
  ARM_FORMAT_N2Reg,	// Inst #1652 = VTRNq8
  ARM_FORMAT_N3Reg,	// Inst #1653 = VTSTv16i8
  ARM_FORMAT_N3Reg,	// Inst #1654 = VTSTv2i32
  ARM_FORMAT_N3Reg,	// Inst #1655 = VTSTv4i16
  ARM_FORMAT_N3Reg,	// Inst #1656 = VTSTv4i32
  ARM_FORMAT_N3Reg,	// Inst #1657 = VTSTv8i16
  ARM_FORMAT_N3Reg,	// Inst #1658 = VTSTv8i8
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1659 = VUHTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1660 = VUHTOS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1661 = VUITOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1662 = VUITOS
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1663 = VULTOD
  ARM_FORMAT_VFPCONV1FRM,	// Inst #1664 = VULTOS
  ARM_FORMAT_N2Reg,	// Inst #1665 = VUZPd16
  ARM_FORMAT_N2Reg,	// Inst #1666 = VUZPd32
  ARM_FORMAT_N2Reg,	// Inst #1667 = VUZPd8
  ARM_FORMAT_N2Reg,	// Inst #1668 = VUZPq16
  ARM_FORMAT_N2Reg,	// Inst #1669 = VUZPq32
  ARM_FORMAT_N2Reg,	// Inst #1670 = VUZPq8
  ARM_FORMAT_N2Reg,	// Inst #1671 = VZIPd16
  ARM_FORMAT_N2Reg,	// Inst #1672 = VZIPd32
  ARM_FORMAT_N2Reg,	// Inst #1673 = VZIPd8
  ARM_FORMAT_N2Reg,	// Inst #1674 = VZIPq16
  ARM_FORMAT_N2Reg,	// Inst #1675 = VZIPq32
  ARM_FORMAT_N2Reg,	// Inst #1676 = VZIPq8
  ARM_FORMAT_MISCFRM,	// Inst #1677 = WFE
  ARM_FORMAT_MISCFRM,	// Inst #1678 = WFI
  ARM_FORMAT_MISCFRM,	// Inst #1679 = YIELD
  ARM_FORMAT_THUMBFRM,	// Inst #1680 = t2ADCSri
  ARM_FORMAT_THUMBFRM,	// Inst #1681 = t2ADCSrr
  ARM_FORMAT_THUMBFRM,	// Inst #1682 = t2ADCSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1683 = t2ADCri
  ARM_FORMAT_THUMBFRM,	// Inst #1684 = t2ADCrr
  ARM_FORMAT_THUMBFRM,	// Inst #1685 = t2ADCrs
  ARM_FORMAT_THUMBFRM,	// Inst #1686 = t2ADDSri
  ARM_FORMAT_THUMBFRM,	// Inst #1687 = t2ADDSrr
  ARM_FORMAT_THUMBFRM,	// Inst #1688 = t2ADDSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1689 = t2ADDrSPi
  ARM_FORMAT_THUMBFRM,	// Inst #1690 = t2ADDrSPi12
  ARM_FORMAT_THUMBFRM,	// Inst #1691 = t2ADDrSPs
  ARM_FORMAT_THUMBFRM,	// Inst #1692 = t2ADDri
  ARM_FORMAT_THUMBFRM,	// Inst #1693 = t2ADDri12
  ARM_FORMAT_THUMBFRM,	// Inst #1694 = t2ADDrr
  ARM_FORMAT_THUMBFRM,	// Inst #1695 = t2ADDrs
  ARM_FORMAT_THUMBFRM,	// Inst #1696 = t2ANDSri
  ARM_FORMAT_THUMBFRM,	// Inst #1697 = t2ANDSrr
  ARM_FORMAT_THUMBFRM,	// Inst #1698 = t2ANDSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1699 = t2ANDri
  ARM_FORMAT_THUMBFRM,	// Inst #1700 = t2ANDrr
  ARM_FORMAT_THUMBFRM,	// Inst #1701 = t2ANDrs
  ARM_FORMAT_THUMBFRM,	// Inst #1702 = t2ASRri
  ARM_FORMAT_THUMBFRM,	// Inst #1703 = t2ASRrr
  ARM_FORMAT_THUMBFRM,	// Inst #1704 = t2B
  ARM_FORMAT_THUMBFRM,	// Inst #1705 = t2BFC
  ARM_FORMAT_THUMBFRM,	// Inst #1706 = t2BFI
  ARM_FORMAT_THUMBFRM,	// Inst #1707 = t2BICri
  ARM_FORMAT_THUMBFRM,	// Inst #1708 = t2BICrr
  ARM_FORMAT_THUMBFRM,	// Inst #1709 = t2BICrs
  ARM_FORMAT_THUMBFRM,	// Inst #1710 = t2BR_JT
  ARM_FORMAT_THUMBFRM,	// Inst #1711 = t2BXJ
  ARM_FORMAT_THUMBFRM,	// Inst #1712 = t2Bcc
  ARM_FORMAT_THUMBFRM,	// Inst #1713 = t2CLREX
  ARM_FORMAT_THUMBFRM,	// Inst #1714 = t2CLZ
  ARM_FORMAT_THUMBFRM,	// Inst #1715 = t2CMNzri
  ARM_FORMAT_THUMBFRM,	// Inst #1716 = t2CMNzrr
  ARM_FORMAT_THUMBFRM,	// Inst #1717 = t2CMNzrs
  ARM_FORMAT_THUMBFRM,	// Inst #1718 = t2CMPri
  ARM_FORMAT_THUMBFRM,	// Inst #1719 = t2CMPrr
  ARM_FORMAT_THUMBFRM,	// Inst #1720 = t2CMPrs
  ARM_FORMAT_THUMBFRM,	// Inst #1721 = t2CMPzri
  ARM_FORMAT_THUMBFRM,	// Inst #1722 = t2CMPzrr
  ARM_FORMAT_THUMBFRM,	// Inst #1723 = t2CMPzrs
  ARM_FORMAT_THUMBFRM,	// Inst #1724 = t2CPS
  ARM_FORMAT_THUMBFRM,	// Inst #1725 = t2DBG
  ARM_FORMAT_THUMBFRM,	// Inst #1726 = t2DMBish
  ARM_FORMAT_THUMBFRM,	// Inst #1727 = t2DMBishst
  ARM_FORMAT_THUMBFRM,	// Inst #1728 = t2DMBnsh
  ARM_FORMAT_THUMBFRM,	// Inst #1729 = t2DMBnshst
  ARM_FORMAT_THUMBFRM,	// Inst #1730 = t2DMBosh
  ARM_FORMAT_THUMBFRM,	// Inst #1731 = t2DMBoshst
  ARM_FORMAT_THUMBFRM,	// Inst #1732 = t2DMBst
  ARM_FORMAT_THUMBFRM,	// Inst #1733 = t2DMBsy
  ARM_FORMAT_THUMBFRM,	// Inst #1734 = t2DSBish
  ARM_FORMAT_THUMBFRM,	// Inst #1735 = t2DSBishst
  ARM_FORMAT_THUMBFRM,	// Inst #1736 = t2DSBnsh
  ARM_FORMAT_THUMBFRM,	// Inst #1737 = t2DSBnshst
  ARM_FORMAT_THUMBFRM,	// Inst #1738 = t2DSBosh
  ARM_FORMAT_THUMBFRM,	// Inst #1739 = t2DSBoshst
  ARM_FORMAT_THUMBFRM,	// Inst #1740 = t2DSBst
  ARM_FORMAT_THUMBFRM,	// Inst #1741 = t2DSBsy
  ARM_FORMAT_THUMBFRM,	// Inst #1742 = t2EORri
  ARM_FORMAT_THUMBFRM,	// Inst #1743 = t2EORrr
  ARM_FORMAT_THUMBFRM,	// Inst #1744 = t2EORrs
  ARM_FORMAT_THUMBFRM,	// Inst #1745 = t2ISBsy
  ARM_FORMAT_THUMBFRM,	// Inst #1746 = t2IT
  ARM_FORMAT_THUMBFRM,	// Inst #1747 = t2Int_eh_sjlj_setjmp
  ARM_FORMAT_THUMBFRM,	// Inst #1748 = t2Int_eh_sjlj_setjmp_nofp
  ARM_FORMAT_THUMBFRM,	// Inst #1749 = t2LDM
  ARM_FORMAT_THUMBFRM,	// Inst #1750 = t2LDM_RET
  ARM_FORMAT_THUMBFRM,	// Inst #1751 = t2LDM_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #1752 = t2LDRBT
  ARM_FORMAT_THUMBFRM,	// Inst #1753 = t2LDRB_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1754 = t2LDRB_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1755 = t2LDRBi12
  ARM_FORMAT_THUMBFRM,	// Inst #1756 = t2LDRBi8
  ARM_FORMAT_THUMBFRM,	// Inst #1757 = t2LDRBpci
  ARM_FORMAT_THUMBFRM,	// Inst #1758 = t2LDRBs
  ARM_FORMAT_THUMBFRM,	// Inst #1759 = t2LDRD_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1760 = t2LDRD_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1761 = t2LDRDi8
  ARM_FORMAT_THUMBFRM,	// Inst #1762 = t2LDRDpci
  ARM_FORMAT_THUMBFRM,	// Inst #1763 = t2LDREX
  ARM_FORMAT_THUMBFRM,	// Inst #1764 = t2LDREXB
  ARM_FORMAT_THUMBFRM,	// Inst #1765 = t2LDREXD
  ARM_FORMAT_THUMBFRM,	// Inst #1766 = t2LDREXH
  ARM_FORMAT_THUMBFRM,	// Inst #1767 = t2LDRHT
  ARM_FORMAT_THUMBFRM,	// Inst #1768 = t2LDRH_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1769 = t2LDRH_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1770 = t2LDRHi12
  ARM_FORMAT_THUMBFRM,	// Inst #1771 = t2LDRHi8
  ARM_FORMAT_THUMBFRM,	// Inst #1772 = t2LDRHpci
  ARM_FORMAT_THUMBFRM,	// Inst #1773 = t2LDRHs
  ARM_FORMAT_THUMBFRM,	// Inst #1774 = t2LDRSBT
  ARM_FORMAT_THUMBFRM,	// Inst #1775 = t2LDRSB_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1776 = t2LDRSB_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1777 = t2LDRSBi12
  ARM_FORMAT_THUMBFRM,	// Inst #1778 = t2LDRSBi8
  ARM_FORMAT_THUMBFRM,	// Inst #1779 = t2LDRSBpci
  ARM_FORMAT_THUMBFRM,	// Inst #1780 = t2LDRSBs
  ARM_FORMAT_THUMBFRM,	// Inst #1781 = t2LDRSHT
  ARM_FORMAT_THUMBFRM,	// Inst #1782 = t2LDRSH_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1783 = t2LDRSH_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1784 = t2LDRSHi12
  ARM_FORMAT_THUMBFRM,	// Inst #1785 = t2LDRSHi8
  ARM_FORMAT_THUMBFRM,	// Inst #1786 = t2LDRSHpci
  ARM_FORMAT_THUMBFRM,	// Inst #1787 = t2LDRSHs
  ARM_FORMAT_THUMBFRM,	// Inst #1788 = t2LDRT
  ARM_FORMAT_THUMBFRM,	// Inst #1789 = t2LDR_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1790 = t2LDR_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1791 = t2LDRi12
  ARM_FORMAT_THUMBFRM,	// Inst #1792 = t2LDRi8
  ARM_FORMAT_THUMBFRM,	// Inst #1793 = t2LDRpci
  ARM_FORMAT_PSEUDO,	// Inst #1794 = t2LDRpci_pic
  ARM_FORMAT_THUMBFRM,	// Inst #1795 = t2LDRs
  ARM_FORMAT_THUMBFRM,	// Inst #1796 = t2LEApcrel
  ARM_FORMAT_THUMBFRM,	// Inst #1797 = t2LEApcrelJT
  ARM_FORMAT_THUMBFRM,	// Inst #1798 = t2LSLri
  ARM_FORMAT_THUMBFRM,	// Inst #1799 = t2LSLrr
  ARM_FORMAT_THUMBFRM,	// Inst #1800 = t2LSRri
  ARM_FORMAT_THUMBFRM,	// Inst #1801 = t2LSRrr
  ARM_FORMAT_THUMBFRM,	// Inst #1802 = t2MLA
  ARM_FORMAT_THUMBFRM,	// Inst #1803 = t2MLS
  ARM_FORMAT_THUMBFRM,	// Inst #1804 = t2MOVCCasr
  ARM_FORMAT_THUMBFRM,	// Inst #1805 = t2MOVCCi
  ARM_FORMAT_THUMBFRM,	// Inst #1806 = t2MOVCClsl
  ARM_FORMAT_THUMBFRM,	// Inst #1807 = t2MOVCClsr
  ARM_FORMAT_THUMBFRM,	// Inst #1808 = t2MOVCCr
  ARM_FORMAT_THUMBFRM,	// Inst #1809 = t2MOVCCror
  ARM_FORMAT_THUMBFRM,	// Inst #1810 = t2MOVTi16
  ARM_FORMAT_THUMBFRM,	// Inst #1811 = t2MOVi
  ARM_FORMAT_THUMBFRM,	// Inst #1812 = t2MOVi16
  ARM_FORMAT_THUMBFRM,	// Inst #1813 = t2MOVi32imm
  ARM_FORMAT_THUMBFRM,	// Inst #1814 = t2MOVr
  ARM_FORMAT_THUMBFRM,	// Inst #1815 = t2MOVrx
  ARM_FORMAT_THUMBFRM,	// Inst #1816 = t2MOVsra_flag
  ARM_FORMAT_THUMBFRM,	// Inst #1817 = t2MOVsrl_flag
  ARM_FORMAT_THUMBFRM,	// Inst #1818 = t2MRS
  ARM_FORMAT_THUMBFRM,	// Inst #1819 = t2MRSsys
  ARM_FORMAT_THUMBFRM,	// Inst #1820 = t2MSR
  ARM_FORMAT_THUMBFRM,	// Inst #1821 = t2MSRsys
  ARM_FORMAT_THUMBFRM,	// Inst #1822 = t2MUL
  ARM_FORMAT_THUMBFRM,	// Inst #1823 = t2MVNi
  ARM_FORMAT_THUMBFRM,	// Inst #1824 = t2MVNr
  ARM_FORMAT_THUMBFRM,	// Inst #1825 = t2MVNs
  ARM_FORMAT_THUMBFRM,	// Inst #1826 = t2NOP
  ARM_FORMAT_THUMBFRM,	// Inst #1827 = t2ORNri
  ARM_FORMAT_THUMBFRM,	// Inst #1828 = t2ORNrr
  ARM_FORMAT_THUMBFRM,	// Inst #1829 = t2ORNrs
  ARM_FORMAT_THUMBFRM,	// Inst #1830 = t2ORRri
  ARM_FORMAT_THUMBFRM,	// Inst #1831 = t2ORRrr
  ARM_FORMAT_THUMBFRM,	// Inst #1832 = t2ORRrs
  ARM_FORMAT_THUMBFRM,	// Inst #1833 = t2PKHBT
  ARM_FORMAT_THUMBFRM,	// Inst #1834 = t2PKHTB
  ARM_FORMAT_THUMBFRM,	// Inst #1835 = t2PLDWi12
  ARM_FORMAT_THUMBFRM,	// Inst #1836 = t2PLDWi8
  ARM_FORMAT_THUMBFRM,	// Inst #1837 = t2PLDWpci
  ARM_FORMAT_THUMBFRM,	// Inst #1838 = t2PLDWr
  ARM_FORMAT_THUMBFRM,	// Inst #1839 = t2PLDWs
  ARM_FORMAT_THUMBFRM,	// Inst #1840 = t2PLDi12
  ARM_FORMAT_THUMBFRM,	// Inst #1841 = t2PLDi8
  ARM_FORMAT_THUMBFRM,	// Inst #1842 = t2PLDpci
  ARM_FORMAT_THUMBFRM,	// Inst #1843 = t2PLDr
  ARM_FORMAT_THUMBFRM,	// Inst #1844 = t2PLDs
  ARM_FORMAT_THUMBFRM,	// Inst #1845 = t2PLIi12
  ARM_FORMAT_THUMBFRM,	// Inst #1846 = t2PLIi8
  ARM_FORMAT_THUMBFRM,	// Inst #1847 = t2PLIpci
  ARM_FORMAT_THUMBFRM,	// Inst #1848 = t2PLIr
  ARM_FORMAT_THUMBFRM,	// Inst #1849 = t2PLIs
  ARM_FORMAT_THUMBFRM,	// Inst #1850 = t2QADD
  ARM_FORMAT_THUMBFRM,	// Inst #1851 = t2QADD16
  ARM_FORMAT_THUMBFRM,	// Inst #1852 = t2QADD8
  ARM_FORMAT_THUMBFRM,	// Inst #1853 = t2QASX
  ARM_FORMAT_THUMBFRM,	// Inst #1854 = t2QDADD
  ARM_FORMAT_THUMBFRM,	// Inst #1855 = t2QDSUB
  ARM_FORMAT_THUMBFRM,	// Inst #1856 = t2QSAX
  ARM_FORMAT_THUMBFRM,	// Inst #1857 = t2QSUB
  ARM_FORMAT_THUMBFRM,	// Inst #1858 = t2QSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #1859 = t2QSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #1860 = t2RBIT
  ARM_FORMAT_THUMBFRM,	// Inst #1861 = t2REV
  ARM_FORMAT_THUMBFRM,	// Inst #1862 = t2REV16
  ARM_FORMAT_THUMBFRM,	// Inst #1863 = t2REVSH
  ARM_FORMAT_THUMBFRM,	// Inst #1864 = t2RFEDB
  ARM_FORMAT_THUMBFRM,	// Inst #1865 = t2RFEDBW
  ARM_FORMAT_THUMBFRM,	// Inst #1866 = t2RFEIA
  ARM_FORMAT_THUMBFRM,	// Inst #1867 = t2RFEIAW
  ARM_FORMAT_THUMBFRM,	// Inst #1868 = t2RORri
  ARM_FORMAT_THUMBFRM,	// Inst #1869 = t2RORrr
  ARM_FORMAT_THUMBFRM,	// Inst #1870 = t2RSBSri
  ARM_FORMAT_THUMBFRM,	// Inst #1871 = t2RSBSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1872 = t2RSBri
  ARM_FORMAT_THUMBFRM,	// Inst #1873 = t2RSBrr
  ARM_FORMAT_THUMBFRM,	// Inst #1874 = t2RSBrs
  ARM_FORMAT_THUMBFRM,	// Inst #1875 = t2SADD16
  ARM_FORMAT_THUMBFRM,	// Inst #1876 = t2SADD8
  ARM_FORMAT_THUMBFRM,	// Inst #1877 = t2SASX
  ARM_FORMAT_THUMBFRM,	// Inst #1878 = t2SBCSri
  ARM_FORMAT_THUMBFRM,	// Inst #1879 = t2SBCSrr
  ARM_FORMAT_THUMBFRM,	// Inst #1880 = t2SBCSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1881 = t2SBCri
  ARM_FORMAT_THUMBFRM,	// Inst #1882 = t2SBCrr
  ARM_FORMAT_THUMBFRM,	// Inst #1883 = t2SBCrs
  ARM_FORMAT_THUMBFRM,	// Inst #1884 = t2SBFX
  ARM_FORMAT_THUMBFRM,	// Inst #1885 = t2SDIV
  ARM_FORMAT_THUMBFRM,	// Inst #1886 = t2SEL
  ARM_FORMAT_THUMBFRM,	// Inst #1887 = t2SEV
  ARM_FORMAT_THUMBFRM,	// Inst #1888 = t2SHADD16
  ARM_FORMAT_THUMBFRM,	// Inst #1889 = t2SHADD8
  ARM_FORMAT_THUMBFRM,	// Inst #1890 = t2SHASX
  ARM_FORMAT_THUMBFRM,	// Inst #1891 = t2SHSAX
  ARM_FORMAT_THUMBFRM,	// Inst #1892 = t2SHSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #1893 = t2SHSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #1894 = t2SMC
  ARM_FORMAT_THUMBFRM,	// Inst #1895 = t2SMLABB
  ARM_FORMAT_THUMBFRM,	// Inst #1896 = t2SMLABT
  ARM_FORMAT_THUMBFRM,	// Inst #1897 = t2SMLAD
  ARM_FORMAT_THUMBFRM,	// Inst #1898 = t2SMLADX
  ARM_FORMAT_THUMBFRM,	// Inst #1899 = t2SMLAL
  ARM_FORMAT_THUMBFRM,	// Inst #1900 = t2SMLALBB
  ARM_FORMAT_THUMBFRM,	// Inst #1901 = t2SMLALBT
  ARM_FORMAT_THUMBFRM,	// Inst #1902 = t2SMLALD
  ARM_FORMAT_THUMBFRM,	// Inst #1903 = t2SMLALDX
  ARM_FORMAT_THUMBFRM,	// Inst #1904 = t2SMLALTB
  ARM_FORMAT_THUMBFRM,	// Inst #1905 = t2SMLALTT
  ARM_FORMAT_THUMBFRM,	// Inst #1906 = t2SMLATB
  ARM_FORMAT_THUMBFRM,	// Inst #1907 = t2SMLATT
  ARM_FORMAT_THUMBFRM,	// Inst #1908 = t2SMLAWB
  ARM_FORMAT_THUMBFRM,	// Inst #1909 = t2SMLAWT
  ARM_FORMAT_THUMBFRM,	// Inst #1910 = t2SMLSD
  ARM_FORMAT_THUMBFRM,	// Inst #1911 = t2SMLSDX
  ARM_FORMAT_THUMBFRM,	// Inst #1912 = t2SMLSLD
  ARM_FORMAT_THUMBFRM,	// Inst #1913 = t2SMLSLDX
  ARM_FORMAT_THUMBFRM,	// Inst #1914 = t2SMMLA
  ARM_FORMAT_THUMBFRM,	// Inst #1915 = t2SMMLAR
  ARM_FORMAT_THUMBFRM,	// Inst #1916 = t2SMMLS
  ARM_FORMAT_THUMBFRM,	// Inst #1917 = t2SMMLSR
  ARM_FORMAT_THUMBFRM,	// Inst #1918 = t2SMMUL
  ARM_FORMAT_THUMBFRM,	// Inst #1919 = t2SMMULR
  ARM_FORMAT_THUMBFRM,	// Inst #1920 = t2SMUAD
  ARM_FORMAT_THUMBFRM,	// Inst #1921 = t2SMUADX
  ARM_FORMAT_THUMBFRM,	// Inst #1922 = t2SMULBB
  ARM_FORMAT_THUMBFRM,	// Inst #1923 = t2SMULBT
  ARM_FORMAT_THUMBFRM,	// Inst #1924 = t2SMULL
  ARM_FORMAT_THUMBFRM,	// Inst #1925 = t2SMULTB
  ARM_FORMAT_THUMBFRM,	// Inst #1926 = t2SMULTT
  ARM_FORMAT_THUMBFRM,	// Inst #1927 = t2SMULWB
  ARM_FORMAT_THUMBFRM,	// Inst #1928 = t2SMULWT
  ARM_FORMAT_THUMBFRM,	// Inst #1929 = t2SMUSD
  ARM_FORMAT_THUMBFRM,	// Inst #1930 = t2SMUSDX
  ARM_FORMAT_THUMBFRM,	// Inst #1931 = t2SRSDB
  ARM_FORMAT_THUMBFRM,	// Inst #1932 = t2SRSDBW
  ARM_FORMAT_THUMBFRM,	// Inst #1933 = t2SRSIA
  ARM_FORMAT_THUMBFRM,	// Inst #1934 = t2SRSIAW
  ARM_FORMAT_THUMBFRM,	// Inst #1935 = t2SSAT
  ARM_FORMAT_THUMBFRM,	// Inst #1936 = t2SSAT16
  ARM_FORMAT_THUMBFRM,	// Inst #1937 = t2SSAX
  ARM_FORMAT_THUMBFRM,	// Inst #1938 = t2SSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #1939 = t2SSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #1940 = t2STM
  ARM_FORMAT_THUMBFRM,	// Inst #1941 = t2STM_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #1942 = t2STRBT
  ARM_FORMAT_THUMBFRM,	// Inst #1943 = t2STRB_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1944 = t2STRB_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1945 = t2STRBi12
  ARM_FORMAT_THUMBFRM,	// Inst #1946 = t2STRBi8
  ARM_FORMAT_THUMBFRM,	// Inst #1947 = t2STRBs
  ARM_FORMAT_THUMBFRM,	// Inst #1948 = t2STRD_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1949 = t2STRD_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1950 = t2STRDi8
  ARM_FORMAT_THUMBFRM,	// Inst #1951 = t2STREX
  ARM_FORMAT_THUMBFRM,	// Inst #1952 = t2STREXB
  ARM_FORMAT_THUMBFRM,	// Inst #1953 = t2STREXD
  ARM_FORMAT_THUMBFRM,	// Inst #1954 = t2STREXH
  ARM_FORMAT_THUMBFRM,	// Inst #1955 = t2STRHT
  ARM_FORMAT_THUMBFRM,	// Inst #1956 = t2STRH_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1957 = t2STRH_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1958 = t2STRHi12
  ARM_FORMAT_THUMBFRM,	// Inst #1959 = t2STRHi8
  ARM_FORMAT_THUMBFRM,	// Inst #1960 = t2STRHs
  ARM_FORMAT_THUMBFRM,	// Inst #1961 = t2STRT
  ARM_FORMAT_THUMBFRM,	// Inst #1962 = t2STR_POST
  ARM_FORMAT_THUMBFRM,	// Inst #1963 = t2STR_PRE
  ARM_FORMAT_THUMBFRM,	// Inst #1964 = t2STRi12
  ARM_FORMAT_THUMBFRM,	// Inst #1965 = t2STRi8
  ARM_FORMAT_THUMBFRM,	// Inst #1966 = t2STRs
  ARM_FORMAT_THUMBFRM,	// Inst #1967 = t2SUBSri
  ARM_FORMAT_THUMBFRM,	// Inst #1968 = t2SUBSrr
  ARM_FORMAT_THUMBFRM,	// Inst #1969 = t2SUBSrs
  ARM_FORMAT_THUMBFRM,	// Inst #1970 = t2SUBrSPi
  ARM_FORMAT_THUMBFRM,	// Inst #1971 = t2SUBrSPi12
  ARM_FORMAT_THUMBFRM,	// Inst #1972 = t2SUBrSPs
  ARM_FORMAT_THUMBFRM,	// Inst #1973 = t2SUBri
  ARM_FORMAT_THUMBFRM,	// Inst #1974 = t2SUBri12
  ARM_FORMAT_THUMBFRM,	// Inst #1975 = t2SUBrr
  ARM_FORMAT_THUMBFRM,	// Inst #1976 = t2SUBrs
  ARM_FORMAT_THUMBFRM,	// Inst #1977 = t2SXTAB16rr
  ARM_FORMAT_THUMBFRM,	// Inst #1978 = t2SXTAB16rr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #1979 = t2SXTABrr
  ARM_FORMAT_THUMBFRM,	// Inst #1980 = t2SXTABrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #1981 = t2SXTAHrr
  ARM_FORMAT_THUMBFRM,	// Inst #1982 = t2SXTAHrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #1983 = t2SXTB16r
  ARM_FORMAT_THUMBFRM,	// Inst #1984 = t2SXTB16r_rot
  ARM_FORMAT_THUMBFRM,	// Inst #1985 = t2SXTBr
  ARM_FORMAT_THUMBFRM,	// Inst #1986 = t2SXTBr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #1987 = t2SXTHr
  ARM_FORMAT_THUMBFRM,	// Inst #1988 = t2SXTHr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #1989 = t2TBB
  ARM_FORMAT_THUMBFRM,	// Inst #1990 = t2TBBgen
  ARM_FORMAT_THUMBFRM,	// Inst #1991 = t2TBH
  ARM_FORMAT_THUMBFRM,	// Inst #1992 = t2TBHgen
  ARM_FORMAT_THUMBFRM,	// Inst #1993 = t2TEQri
  ARM_FORMAT_THUMBFRM,	// Inst #1994 = t2TEQrr
  ARM_FORMAT_THUMBFRM,	// Inst #1995 = t2TEQrs
  ARM_FORMAT_THUMBFRM,	// Inst #1996 = t2TPsoft
  ARM_FORMAT_THUMBFRM,	// Inst #1997 = t2TSTri
  ARM_FORMAT_THUMBFRM,	// Inst #1998 = t2TSTrr
  ARM_FORMAT_THUMBFRM,	// Inst #1999 = t2TSTrs
  ARM_FORMAT_THUMBFRM,	// Inst #2000 = t2UADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2001 = t2UADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2002 = t2UASX
  ARM_FORMAT_THUMBFRM,	// Inst #2003 = t2UBFX
  ARM_FORMAT_THUMBFRM,	// Inst #2004 = t2UDIV
  ARM_FORMAT_THUMBFRM,	// Inst #2005 = t2UHADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2006 = t2UHADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2007 = t2UHASX
  ARM_FORMAT_THUMBFRM,	// Inst #2008 = t2UHSAX
  ARM_FORMAT_THUMBFRM,	// Inst #2009 = t2UHSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2010 = t2UHSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2011 = t2UMAAL
  ARM_FORMAT_THUMBFRM,	// Inst #2012 = t2UMLAL
  ARM_FORMAT_THUMBFRM,	// Inst #2013 = t2UMULL
  ARM_FORMAT_THUMBFRM,	// Inst #2014 = t2UQADD16
  ARM_FORMAT_THUMBFRM,	// Inst #2015 = t2UQADD8
  ARM_FORMAT_THUMBFRM,	// Inst #2016 = t2UQASX
  ARM_FORMAT_THUMBFRM,	// Inst #2017 = t2UQSAX
  ARM_FORMAT_THUMBFRM,	// Inst #2018 = t2UQSUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2019 = t2UQSUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2020 = t2USAD8
  ARM_FORMAT_THUMBFRM,	// Inst #2021 = t2USADA8
  ARM_FORMAT_THUMBFRM,	// Inst #2022 = t2USAT
  ARM_FORMAT_THUMBFRM,	// Inst #2023 = t2USAT16
  ARM_FORMAT_THUMBFRM,	// Inst #2024 = t2USAX
  ARM_FORMAT_THUMBFRM,	// Inst #2025 = t2USUB16
  ARM_FORMAT_THUMBFRM,	// Inst #2026 = t2USUB8
  ARM_FORMAT_THUMBFRM,	// Inst #2027 = t2UXTAB16rr
  ARM_FORMAT_THUMBFRM,	// Inst #2028 = t2UXTAB16rr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2029 = t2UXTABrr
  ARM_FORMAT_THUMBFRM,	// Inst #2030 = t2UXTABrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2031 = t2UXTAHrr
  ARM_FORMAT_THUMBFRM,	// Inst #2032 = t2UXTAHrr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2033 = t2UXTB16r
  ARM_FORMAT_THUMBFRM,	// Inst #2034 = t2UXTB16r_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2035 = t2UXTBr
  ARM_FORMAT_THUMBFRM,	// Inst #2036 = t2UXTBr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2037 = t2UXTHr
  ARM_FORMAT_THUMBFRM,	// Inst #2038 = t2UXTHr_rot
  ARM_FORMAT_THUMBFRM,	// Inst #2039 = t2WFE
  ARM_FORMAT_THUMBFRM,	// Inst #2040 = t2WFI
  ARM_FORMAT_THUMBFRM,	// Inst #2041 = t2YIELD
  ARM_FORMAT_THUMBFRM,	// Inst #2042 = tADC
  ARM_FORMAT_THUMBFRM,	// Inst #2043 = tADDhirr
  ARM_FORMAT_THUMBFRM,	// Inst #2044 = tADDi3
  ARM_FORMAT_THUMBFRM,	// Inst #2045 = tADDi8
  ARM_FORMAT_THUMBFRM,	// Inst #2046 = tADDrPCi
  ARM_FORMAT_THUMBFRM,	// Inst #2047 = tADDrSP
  ARM_FORMAT_THUMBFRM,	// Inst #2048 = tADDrSPi
  ARM_FORMAT_THUMBFRM,	// Inst #2049 = tADDrr
  ARM_FORMAT_THUMBFRM,	// Inst #2050 = tADDspi
  ARM_FORMAT_THUMBFRM,	// Inst #2051 = tADDspr
  ARM_FORMAT_PSEUDO,	// Inst #2052 = tADJCALLSTACKDOWN
  ARM_FORMAT_PSEUDO,	// Inst #2053 = tADJCALLSTACKUP
  ARM_FORMAT_THUMBFRM,	// Inst #2054 = tAND
  ARM_FORMAT_THUMBFRM,	// Inst #2055 = tASRri
  ARM_FORMAT_THUMBFRM,	// Inst #2056 = tASRrr
  ARM_FORMAT_THUMBFRM,	// Inst #2057 = tB
  ARM_FORMAT_THUMBFRM,	// Inst #2058 = tBIC
  ARM_FORMAT_THUMBFRM,	// Inst #2059 = tBKPT
  ARM_FORMAT_THUMBFRM,	// Inst #2060 = tBL
  ARM_FORMAT_THUMBFRM,	// Inst #2061 = tBLXi
  ARM_FORMAT_THUMBFRM,	// Inst #2062 = tBLXi_r9
  ARM_FORMAT_THUMBFRM,	// Inst #2063 = tBLXr
  ARM_FORMAT_THUMBFRM,	// Inst #2064 = tBLXr_r9
  ARM_FORMAT_THUMBFRM,	// Inst #2065 = tBLr9
  ARM_FORMAT_THUMBFRM,	// Inst #2066 = tBRIND
  ARM_FORMAT_THUMBFRM,	// Inst #2067 = tBR_JTr
  ARM_FORMAT_THUMBFRM,	// Inst #2068 = tBX
  ARM_FORMAT_THUMBFRM,	// Inst #2069 = tBX_RET
  ARM_FORMAT_THUMBFRM,	// Inst #2070 = tBX_RET_vararg
  ARM_FORMAT_THUMBFRM,	// Inst #2071 = tBXr9
  ARM_FORMAT_THUMBFRM,	// Inst #2072 = tBcc
  ARM_FORMAT_THUMBFRM,	// Inst #2073 = tBfar
  ARM_FORMAT_THUMBFRM,	// Inst #2074 = tCBNZ
  ARM_FORMAT_THUMBFRM,	// Inst #2075 = tCBZ
  ARM_FORMAT_THUMBFRM,	// Inst #2076 = tCMNz
  ARM_FORMAT_THUMBFRM,	// Inst #2077 = tCMPhir
  ARM_FORMAT_THUMBFRM,	// Inst #2078 = tCMPi8
  ARM_FORMAT_THUMBFRM,	// Inst #2079 = tCMPr
  ARM_FORMAT_THUMBFRM,	// Inst #2080 = tCMPzhir
  ARM_FORMAT_THUMBFRM,	// Inst #2081 = tCMPzi8
  ARM_FORMAT_THUMBFRM,	// Inst #2082 = tCMPzr
  ARM_FORMAT_THUMBFRM,	// Inst #2083 = tCPS
  ARM_FORMAT_THUMBFRM,	// Inst #2084 = tEOR
  ARM_FORMAT_PSEUDO,	// Inst #2085 = tInt_eh_sjlj_longjmp
  ARM_FORMAT_THUMBFRM,	// Inst #2086 = tInt_eh_sjlj_setjmp
  ARM_FORMAT_THUMBFRM,	// Inst #2087 = tLDM
  ARM_FORMAT_THUMBFRM,	// Inst #2088 = tLDM_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #2089 = tLDR
  ARM_FORMAT_THUMBFRM,	// Inst #2090 = tLDRB
  ARM_FORMAT_THUMBFRM,	// Inst #2091 = tLDRBi
  ARM_FORMAT_THUMBFRM,	// Inst #2092 = tLDRH
  ARM_FORMAT_THUMBFRM,	// Inst #2093 = tLDRHi
  ARM_FORMAT_THUMBFRM,	// Inst #2094 = tLDRSB
  ARM_FORMAT_THUMBFRM,	// Inst #2095 = tLDRSH
  ARM_FORMAT_THUMBFRM,	// Inst #2096 = tLDRcp
  ARM_FORMAT_THUMBFRM,	// Inst #2097 = tLDRi
  ARM_FORMAT_THUMBFRM,	// Inst #2098 = tLDRpci
  ARM_FORMAT_PSEUDO,	// Inst #2099 = tLDRpci_pic
  ARM_FORMAT_THUMBFRM,	// Inst #2100 = tLDRspi
  ARM_FORMAT_THUMBFRM,	// Inst #2101 = tLEApcrel
  ARM_FORMAT_THUMBFRM,	// Inst #2102 = tLEApcrelJT
  ARM_FORMAT_THUMBFRM,	// Inst #2103 = tLSLri
  ARM_FORMAT_THUMBFRM,	// Inst #2104 = tLSLrr
  ARM_FORMAT_THUMBFRM,	// Inst #2105 = tLSRri
  ARM_FORMAT_THUMBFRM,	// Inst #2106 = tLSRrr
  ARM_FORMAT_THUMBFRM,	// Inst #2107 = tMOVCCi
  ARM_FORMAT_THUMBFRM,	// Inst #2108 = tMOVCCr
  ARM_FORMAT_PSEUDO,	// Inst #2109 = tMOVCCr_pseudo
  ARM_FORMAT_THUMBFRM,	// Inst #2110 = tMOVSr
  ARM_FORMAT_THUMBFRM,	// Inst #2111 = tMOVgpr2gpr
  ARM_FORMAT_THUMBFRM,	// Inst #2112 = tMOVgpr2tgpr
  ARM_FORMAT_THUMBFRM,	// Inst #2113 = tMOVi8
  ARM_FORMAT_THUMBFRM,	// Inst #2114 = tMOVr
  ARM_FORMAT_THUMBFRM,	// Inst #2115 = tMOVtgpr2gpr
  ARM_FORMAT_THUMBFRM,	// Inst #2116 = tMUL
  ARM_FORMAT_THUMBFRM,	// Inst #2117 = tMVN
  ARM_FORMAT_THUMBFRM,	// Inst #2118 = tNOP
  ARM_FORMAT_THUMBFRM,	// Inst #2119 = tORR
  ARM_FORMAT_THUMBFRM,	// Inst #2120 = tPICADD
  ARM_FORMAT_THUMBFRM,	// Inst #2121 = tPOP
  ARM_FORMAT_THUMBFRM,	// Inst #2122 = tPOP_RET
  ARM_FORMAT_THUMBFRM,	// Inst #2123 = tPUSH
  ARM_FORMAT_THUMBFRM,	// Inst #2124 = tREV
  ARM_FORMAT_THUMBFRM,	// Inst #2125 = tREV16
  ARM_FORMAT_THUMBFRM,	// Inst #2126 = tREVSH
  ARM_FORMAT_THUMBFRM,	// Inst #2127 = tROR
  ARM_FORMAT_THUMBFRM,	// Inst #2128 = tRSB
  ARM_FORMAT_THUMBFRM,	// Inst #2129 = tRestore
  ARM_FORMAT_THUMBFRM,	// Inst #2130 = tSBC
  ARM_FORMAT_THUMBFRM,	// Inst #2131 = tSETENDBE
  ARM_FORMAT_THUMBFRM,	// Inst #2132 = tSETENDLE
  ARM_FORMAT_THUMBFRM,	// Inst #2133 = tSEV
  ARM_FORMAT_THUMBFRM,	// Inst #2134 = tSTM_UPD
  ARM_FORMAT_THUMBFRM,	// Inst #2135 = tSTR
  ARM_FORMAT_THUMBFRM,	// Inst #2136 = tSTRB
  ARM_FORMAT_THUMBFRM,	// Inst #2137 = tSTRBi
  ARM_FORMAT_THUMBFRM,	// Inst #2138 = tSTRH
  ARM_FORMAT_THUMBFRM,	// Inst #2139 = tSTRHi
  ARM_FORMAT_THUMBFRM,	// Inst #2140 = tSTRi
  ARM_FORMAT_THUMBFRM,	// Inst #2141 = tSTRspi
  ARM_FORMAT_THUMBFRM,	// Inst #2142 = tSUBi3
  ARM_FORMAT_THUMBFRM,	// Inst #2143 = tSUBi8
  ARM_FORMAT_THUMBFRM,	// Inst #2144 = tSUBrr
  ARM_FORMAT_THUMBFRM,	// Inst #2145 = tSUBspi
  ARM_FORMAT_THUMBFRM,	// Inst #2146 = tSVC
  ARM_FORMAT_THUMBFRM,	// Inst #2147 = tSXTB
  ARM_FORMAT_THUMBFRM,	// Inst #2148 = tSXTH
  ARM_FORMAT_THUMBFRM,	// Inst #2149 = tSpill
  ARM_FORMAT_THUMBFRM,	// Inst #2150 = tTPsoft
  ARM_FORMAT_THUMBFRM,	// Inst #2151 = tTRAP
  ARM_FORMAT_THUMBFRM,	// Inst #2152 = tTST
  ARM_FORMAT_THUMBFRM,	// Inst #2153 = tUXTB
  ARM_FORMAT_THUMBFRM,	// Inst #2154 = tUXTH
  ARM_FORMAT_THUMBFRM,	// Inst #2155 = tWFE
  ARM_FORMAT_THUMBFRM,	// Inst #2156 = tWFI
  ARM_FORMAT_THUMBFRM,	// Inst #2157 = tYIELD
  ARM_FORMAT_NA	// Unreachable.
};

typedef uint32_t field_t;

static field_t fieldFromInstruction(field_t insn, unsigned startBit, unsigned numBits)
{
  assert(startBit + numBits <= 32 && "Instruction field out of bounds!");

  field_t fieldMask;

  if (numBits == 32)
    fieldMask = (field_t)-1;
  else
    fieldMask = ((1 << numBits) - 1) << startBit;

  return (insn & fieldMask) >> startBit;
}

static uint16_t decodeInstruction(field_t insn) {
  // Check Inst{31-28} ...
  switch (fieldFromInstruction(insn, 28, 4)) {
  case 14:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction(insn, 24, 4)) {
    case 1:
      // Check Inst{23-4} ...
      switch (fieldFromInstruction(insn, 4, 20)) {
      case 196593:
        return 75; // BRIND
      case 659200:
        return 175; // MOVPCRX
      }
      break;
    case 11:
      return 71; // BLr9
    }
    break;
  case 15:
    // Check Inst{27-25} ...
    switch (fieldFromInstruction(insn, 25, 3)) {
    case 0:
      // Check Inst{16} ...
      switch (fieldFromInstruction(insn, 16, 1)) {
      case 0:
        // Check Inst{24-20} && Inst{5-5} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 5) == 16 && fieldFromInstruction(insn, 5, 1) == 0)
          return 98; // CPS
        break;
      case 1:
        // Check Inst{9} ...
        switch (fieldFromInstruction(insn, 9, 1)) {
        case 0:
          // Check Inst{24-20} && Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 5) == 16 && fieldFromInstruction(insn, 4, 4) == 0)
            return 260; // SETENDLE
          break;
        case 1:
          // Check Inst{24-20} && Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 5) == 16 && fieldFromInstruction(insn, 4, 4) == 0)
            return 259; // SETENDBE
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{4} ...
      switch (fieldFromInstruction(insn, 4, 1)) {
      case 0:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction(insn, 20, 2)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 681; // VHADDsv8i8
              case 1:
                return 676; // VHADDsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 485; // VADDLsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 687; // VHADDuv8i8
              case 1:
                return 682; // VHADDuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 488; // VADDLuv8i16
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1265; // VRHADDsv8i8
              case 1:
                return 1260; // VRHADDsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 492; // VADDWsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1271; // VRHADDuv8i8
              case 1:
                return 1266; // VRHADDuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 495; // VADDWuv8i16
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 693; // VHSUBsv8i8
              case 1:
                return 688; // VHSUBsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1599; // VSUBLsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 699; // VHSUBuv8i8
              case 1:
                return 694; // VHSUBuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1602; // VSUBLuv8i16
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 562; // VCGTsv8i8
              case 1:
                return 557; // VCGTsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1606; // VSUBWsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 568; // VCGTuv8i8
              case 1:
                return 563; // VCGTuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1609; // VSUBWuv8i16
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1359; // VSHLsv8i8
              case 1:
                return 1352; // VSHLsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 482; // VADDHNv8i8
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1367; // VSHLuv8i8
              case 1:
                return 1360; // VSHLuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1239; // VRADDHNv8i8
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1279; // VRSHLsv8i8
              case 1:
                return 1272; // VRSHLsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 428; // VABALsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1287; // VRSHLuv8i8
              case 1:
                return 1280; // VRSHLuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 431; // VABALuv8i16
              break;
            }
            break;
          case 6:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 874; // VMAXsv8i8
              case 1:
                return 869; // VMAXsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1596; // VSUBHNv8i8
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 880; // VMAXuv8i8
              case 1:
                return 875; // VMAXuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1331; // VRSUBHNv8i8
              break;
            }
            break;
          case 7:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 457; // VABDsv8i8
              case 1:
                return 452; // VABDsv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 446; // VABDLsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 463; // VABDuv8i8
              case 1:
                return 458; // VABDuv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 449; // VABDLuv8i16
              break;
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 506; // VADDv8i8
              case 1:
                return 499; // VADDv16i8
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 903; // VMLALsv8i16
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1620; // VSUBv8i8
              case 1:
                return 1613; // VSUBv16i8
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 906; // VMLALuv8i16
              break;
            }
            break;
          case 9:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 921; // VMLAv8i8
              case 2:
                return 947; // VMLSv8i8
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 916; // VMLAv16i8
              case 2:
                return 942; // VMLSv16i8
              }
              break;
            }
            break;
          case 10:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1071; // VPMAXs8
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 929; // VMLSLsv8i16
              break;
            case 2:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1074; // VPMAXu8
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 932; // VMLSLuv8i16
              break;
            }
            break;
          case 12:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 989; // VMULLsv8i16
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 992; // VMULLuv8i16
              break;
            }
            break;
          case 13:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 496; // VADDfd
              case 2:
                return 1064; // VPADDf
              }
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 0)
                return 498; // VADDfq
              break;
            }
            break;
          case 14:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 517; // VCEQfd
              case 1:
                return 518; // VCEQfq
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 982; // VMULLp
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 533; // VCGEfd
              case 1:
                return 534; // VCGEfq
              }
              break;
            }
            break;
          case 15:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 866; // VMAXfd
              case 2:
                return 1068; // VPMAXf
              }
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 0)
                return 868; // VMAXfq
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 678; // VHADDsv4i16
              case 1:
                return 680; // VHADDsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 484; // VADDLsv4i32
              case 1:
                return 913; // VMLAslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 684; // VHADDuv4i16
              case 1:
                return 686; // VHADDuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 487; // VADDLuv4i32
              case 1:
                return 915; // VMLAslv8i16
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1262; // VRHADDsv4i16
              case 1:
                return 1264; // VRHADDsv8i16
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 491; // VADDWsv4i32
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1268; // VRHADDuv4i16
              case 1:
                return 1270; // VRHADDuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 494; // VADDWuv4i32
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 690; // VHSUBsv4i16
              case 1:
                return 692; // VHSUBsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1598; // VSUBLsv4i32
              case 1:
                return 898; // VMLALslsv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 696; // VHSUBuv4i16
              case 1:
                return 698; // VHSUBuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1601; // VSUBLuv4i32
              case 1:
                return 900; // VMLALsluv4i16
              }
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 559; // VCGTsv4i16
              case 1:
                return 561; // VCGTsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1605; // VSUBWsv4i32
              case 1:
                return 1105; // VQDMLALslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 565; // VCGTuv4i16
              case 1:
                return 567; // VCGTuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1608; // VSUBWuv4i32
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1356; // VSHLsv4i16
              case 1:
                return 1358; // VSHLsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 481; // VADDHNv4i16
              case 1:
                return 939; // VMLSslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1364; // VSHLuv4i16
              case 1:
                return 1366; // VSHLuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1238; // VRADDHNv4i16
              case 1:
                return 941; // VMLSslv8i16
              }
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1276; // VRSHLsv4i16
              case 1:
                return 1278; // VRSHLsv8i16
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 427; // VABALsv4i32
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1284; // VRSHLuv4i16
              case 1:
                return 1286; // VRSHLuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 430; // VABALuv4i32
              break;
            }
            break;
          case 6:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 871; // VMAXsv4i16
              case 1:
                return 873; // VMAXsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1595; // VSUBHNv4i16
              case 1:
                return 924; // VMLSLslsv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 877; // VMAXuv4i16
              case 1:
                return 879; // VMAXuv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1330; // VRSUBHNv4i16
              case 1:
                return 926; // VMLSLsluv4i16
              }
              break;
            }
            break;
          case 7:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 454; // VABDsv4i16
              case 1:
                return 456; // VABDsv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 445; // VABDLsv4i32
              case 1:
                return 1109; // VQDMLSLslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 460; // VABDuv4i16
              case 1:
                return 462; // VABDuv8i16
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 448; // VABDLuv4i32
              break;
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 503; // VADDv4i16
              case 1:
                return 505; // VADDv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 902; // VMLALsv4i32
              case 1:
                return 1002; // VMULslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1617; // VSUBv4i16
              case 1:
                return 1619; // VSUBv8i16
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 905; // VMLALuv4i32
              case 1:
                return 1004; // VMULslv8i16
              }
              break;
            }
            break;
          case 9:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 918; // VMLAv4i16
              case 1:
                return 920; // VMLAv8i16
              }
              break;
            case 1:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1107; // VQDMLALv4i32
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 944; // VMLSv4i16
              case 1:
                return 946; // VMLSv8i16
              }
              break;
            }
            break;
          case 10:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1069; // VPMAXs16
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 928; // VMLSLsv4i32
              case 1:
                return 984; // VMULLslsv4i16
              }
              break;
            case 2:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1072; // VPMAXu16
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 931; // VMLSLuv4i32
              case 1:
                return 986; // VMULLsluv4i16
              }
              break;
            }
            break;
          case 11:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1117; // VQDMULHv4i16
              case 1:
                return 1119; // VQDMULHv8i16
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1111; // VQDMLSLv4i32
              case 1:
                return 1121; // VQDMULLslv4i16
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1144; // VQRDMULHv4i16
              case 1:
                return 1146; // VQRDMULHv8i16
              }
              break;
            }
            break;
          case 12:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 988; // VMULLsv4i32
              case 3:
                return 991; // VMULLuv4i32
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1113; // VQDMULHslv4i16
              case 3:
                return 1115; // VQDMULHslv8i16
              }
              break;
            }
            break;
          case 13:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 1)
                return 1123; // VQDMULLv4i32
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1140; // VQRDMULHslv4i16
              case 3:
                return 1142; // VQRDMULHslv8i16
              }
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction(insn, 8, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 677; // VHADDsv2i32
              case 1:
                return 679; // VHADDsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 483; // VADDLsv2i64
              case 1:
                return 912; // VMLAslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 683; // VHADDuv2i32
              case 1:
                return 685; // VHADDuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 486; // VADDLuv2i64
              case 1:
                return 914; // VMLAslv4i32
              }
              break;
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1261; // VRHADDsv2i32
              case 1:
                return 1263; // VRHADDsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 490; // VADDWsv2i64
              case 1:
                return 910; // VMLAslfd
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1267; // VRHADDuv2i32
              case 1:
                return 1269; // VRHADDuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 493; // VADDWuv2i64
              case 1:
                return 911; // VMLAslfq
              }
              break;
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 689; // VHSUBsv2i32
              case 1:
                return 691; // VHSUBsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1597; // VSUBLsv2i64
              case 1:
                return 897; // VMLALslsv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 695; // VHSUBuv2i32
              case 1:
                return 697; // VHSUBuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1600; // VSUBLuv2i64
              case 1:
                return 899; // VMLALsluv2i32
              }
              break;
            }
            break;
          case 3:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 558; // VCGTsv2i32
              case 1:
                return 560; // VCGTsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1604; // VSUBWsv2i64
              case 1:
                return 1104; // VQDMLALslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 564; // VCGTuv2i32
              case 1:
                return 566; // VCGTuv4i32
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1607; // VSUBWuv2i64
              break;
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1354; // VSHLsv2i32
              case 1:
                return 1357; // VSHLsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 480; // VADDHNv2i32
              case 1:
                return 938; // VMLSslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1362; // VSHLuv2i32
              case 1:
                return 1365; // VSHLuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1237; // VRADDHNv2i32
              case 1:
                return 940; // VMLSslv4i32
              }
              break;
            }
            break;
          case 5:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1274; // VRSHLsv2i32
              case 1:
                return 1277; // VRSHLsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 426; // VABALsv2i64
              case 1:
                return 936; // VMLSslfd
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1282; // VRSHLuv2i32
              case 1:
                return 1285; // VRSHLuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 429; // VABALuv2i64
              case 1:
                return 937; // VMLSslfq
              }
              break;
            }
            break;
          case 6:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 870; // VMAXsv2i32
              case 1:
                return 872; // VMAXsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1594; // VSUBHNv2i32
              case 1:
                return 923; // VMLSLslsv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 876; // VMAXuv2i32
              case 1:
                return 878; // VMAXuv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1329; // VRSUBHNv2i32
              case 1:
                return 925; // VMLSLsluv2i32
              }
              break;
            }
            break;
          case 7:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 453; // VABDsv2i32
              case 1:
                return 455; // VABDsv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 444; // VABDLsv2i64
              case 1:
                return 1108; // VQDMLSLslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 459; // VABDuv2i32
              case 1:
                return 461; // VABDuv4i32
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 447; // VABDLuv2i64
              break;
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 501; // VADDv2i32
              case 1:
                return 504; // VADDv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 901; // VMLALsv2i64
              case 1:
                return 1001; // VMULslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1615; // VSUBv2i32
              case 1:
                return 1618; // VSUBv4i32
              }
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 904; // VMLALuv2i64
              case 1:
                return 1003; // VMULslv4i32
              }
              break;
            }
            break;
          case 9:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 917; // VMLAv2i32
              case 1:
                return 919; // VMLAv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1106; // VQDMLALv2i64
              case 1:
                return 999; // VMULslfd
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 943; // VMLSv2i32
              case 1:
                return 945; // VMLSv4i32
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 1)
                return 1000; // VMULslfq
              break;
            }
            break;
          case 10:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1070; // VPMAXs32
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 927; // VMLSLsv2i64
              case 1:
                return 983; // VMULLslsv2i32
              }
              break;
            case 2:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 0)
                return 1073; // VPMAXu32
              break;
            case 3:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 930; // VMLSLuv2i64
              case 1:
                return 985; // VMULLsluv2i32
              }
              break;
            }
            break;
          case 11:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1116; // VQDMULHv2i32
              case 1:
                return 1118; // VQDMULHv4i32
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1110; // VQDMLSLv2i64
              case 1:
                return 1120; // VQDMULLslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1143; // VQRDMULHv2i32
              case 1:
                return 1145; // VQRDMULHv4i32
              }
              break;
            }
            break;
          case 12:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 987; // VMULLsv2i64
              case 3:
                return 990; // VMULLuv2i64
              }
              break;
            case 1:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 1:
                return 1112; // VQDMULHslv2i32
              case 3:
                return 1114; // VQDMULHslv4i32
              }
              break;
            }
            break;
          case 13:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1610; // VSUBfd
              case 1:
                return 1612; // VSUBfq
              }
              break;
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1122; // VQDMULLv2i64
              case 1:
                return 1139; // VQRDMULHslv2i32
              }
              break;
            case 2:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 450; // VABDfd
              case 1:
                return 451; // VABDfq
              }
              break;
            case 3:
              // Check Inst{6-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 1) == 1)
                return 1141; // VQRDMULHslv4i32
              break;
            }
            break;
          case 14:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 2)
                return 555; // VCGTfd
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 2)
                return 556; // VCGTfq
              break;
            }
            break;
          case 15:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{24-23} ...
              switch (fieldFromInstruction(insn, 23, 2)) {
              case 0:
                return 881; // VMINfd
              case 2:
                return 1075; // VPMINf
              }
              break;
            case 1:
              // Check Inst{24-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 2) == 0)
                return 883; // VMINfq
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 4:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1353; // VSHLsv1i64
              case 1:
                return 1355; // VSHLsv2i64
              }
              break;
            case 5:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1273; // VRSHLsv1i64
              case 1:
                return 1275; // VRSHLsv2i64
              }
              break;
            case 8:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 500; // VADDv1i64
              case 1:
                return 502; // VADDv2i64
              }
              break;
            }
            break;
          case 1:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              return 665; // VEXTd8
            case 1:
              return 669; // VEXTq8
            }
            break;
          case 2:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 4:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1361; // VSHLuv1i64
              case 1:
                return 1363; // VSHLuv2i64
              }
              break;
            case 5:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1281; // VRSHLuv1i64
              case 1:
                return 1283; // VRSHLuv2i64
              }
              break;
            case 8:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1614; // VSUBv1i64
              case 1:
                return 1616; // VSUBv2i64
              }
              break;
            }
            break;
          case 3:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 0:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1254; // VREV64d8
                case 1:
                  return 1258; // VREV64q8
                case 2:
                  return 1249; // VREV32d8
                case 3:
                  return 1251; // VREV32q8
                }
                break;
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 576; // VCGTzv8i8
                case 1:
                  return 569; // VCGTzv16i8
                case 2:
                  return 554; // VCGEzv8i8
                case 3:
                  return 547; // VCGEzv16i8
                }
                break;
              case 2:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1621; // VSWPd
                case 1:
                  return 1622; // VSWPq
                case 2:
                  return 1649; // VTRNd8
                case 3:
                  return 1652; // VTRNq8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1252; // VREV64d16
                case 1:
                  return 1256; // VREV64q16
                case 2:
                  return 1248; // VREV32d16
                case 3:
                  return 1250; // VREV32q16
                }
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 573; // VCGTzv4i16
                case 1:
                  return 575; // VCGTzv8i16
                case 2:
                  return 551; // VCGEzv4i16
                case 3:
                  return 553; // VCGEzv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 2:
                  return 1647; // VTRNd16
                case 3:
                  return 1650; // VTRNq16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1253; // VREV64d32
                case 1:
                  return 1257; // VREV64q32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 571; // VCGTzv2i32
                case 1:
                  return 574; // VCGTzv4i32
                case 2:
                  return 549; // VCGEzv2i32
                case 3:
                  return 552; // VCGEzv4i32
                }
                break;
              case 10:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 2:
                  return 1648; // VTRNd32
                case 3:
                  return 1651; // VTRNq32
                }
                break;
              }
              break;
            case 1:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1246; // VREV16d8
                case 1:
                  return 1247; // VREV16q8
                }
                break;
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 532; // VCEQzv8i8
                case 1:
                  return 525; // VCEQzv16i8
                case 2:
                  return 584; // VCLEzv8i8
                case 3:
                  return 577; // VCLEzv16i8
                }
                break;
              case 2:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1667; // VUZPd8
                case 1:
                  return 1670; // VUZPq8
                case 2:
                  return 1673; // VZIPd8
                case 3:
                  return 1676; // VZIPq8
                }
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 529; // VCEQzv4i16
                case 1:
                  return 531; // VCEQzv8i16
                case 2:
                  return 581; // VCLEzv4i16
                case 3:
                  return 583; // VCLEzv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1665; // VUZPd16
                case 1:
                  return 1668; // VUZPq16
                case 2:
                  return 1671; // VZIPd16
                case 3:
                  return 1674; // VZIPq16
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 527; // VCEQzv2i32
                case 1:
                  return 530; // VCEQzv4i32
                case 2:
                  return 579; // VCLEzv2i32
                case 3:
                  return 582; // VCLEzv4i32
                }
                break;
              case 10:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1666; // VUZPd32
                case 1:
                  return 1669; // VUZPq32
                case 2:
                  return 1672; // VZIPd32
                case 3:
                  return 1675; // VZIPq32
                }
                break;
              }
              break;
            case 2:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1057; // VPADDLsv8i8
                case 1:
                  return 1052; // VPADDLsv16i8
                case 2:
                  return 1063; // VPADDLuv8i8
                case 3:
                  return 1058; // VPADDLuv16i8
                }
                break;
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 598; // VCLTzv8i8
                case 1:
                  return 591; // VCLTzv16i8
                }
                break;
              case 2:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 960; // VMOVNv8i8
                case 1:
                  return 1126; // VQMOVNsuv8i8
                case 2:
                  return 1129; // VQMOVNsv8i8
                case 3:
                  return 1132; // VQMOVNuv8i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1054; // VPADDLsv4i16
                case 1:
                  return 1056; // VPADDLsv8i16
                case 2:
                  return 1060; // VPADDLuv4i16
                case 3:
                  return 1062; // VPADDLuv8i16
                }
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 595; // VCLTzv4i16
                case 1:
                  return 597; // VCLTzv8i16
                }
                break;
              case 6:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 959; // VMOVNv4i16
                case 1:
                  return 1125; // VQMOVNsuv4i16
                case 2:
                  return 1128; // VQMOVNsv4i16
                case 3:
                  return 1131; // VQMOVNuv4i16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1053; // VPADDLsv2i32
                case 1:
                  return 1055; // VPADDLsv4i32
                case 2:
                  return 1059; // VPADDLuv2i32
                case 3:
                  return 1061; // VPADDLuv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 593; // VCLTzv2i32
                case 1:
                  return 596; // VCLTzv4i32
                }
                break;
              case 10:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 958; // VMOVNv2i32
                case 1:
                  return 1124; // VQMOVNsuv2i32
                case 2:
                  return 1127; // VQMOVNsv2i32
                case 3:
                  return 1130; // VQMOVNuv2i32
                }
                break;
              }
              break;
            case 3:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 1:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 474; // VABSv8i8
                case 1:
                  return 469; // VABSv16i8
                case 2:
                  return 1028; // VNEGs8d
                case 3:
                  return 1029; // VNEGs8q
                }
                break;
              case 2:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 1337; // VSHLLi8
                break;
              case 5:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 471; // VABSv4i16
                case 1:
                  return 473; // VABSv8i16
                case 2:
                  return 1024; // VNEGs16d
                case 3:
                  return 1025; // VNEGs16q
                }
                break;
              case 6:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 1335; // VSHLLi16
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 470; // VABSv2i32
                case 1:
                  return 472; // VABSv4i32
                case 2:
                  return 1026; // VNEGs32d
                case 3:
                  return 1027; // VNEGs32q
                }
                break;
              case 10:
                // Check Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 2) == 0)
                  return 1336; // VSHLLi32
                break;
              }
              break;
            case 4:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 590; // VCLSv8i8
                case 1:
                  return 585; // VCLSv16i8
                case 2:
                  return 604; // VCLZv8i8
                case 3:
                  return 599; // VCLZv16i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 587; // VCLSv4i16
                case 1:
                  return 589; // VCLSv8i16
                case 2:
                  return 601; // VCLZv4i16
                case 3:
                  return 603; // VCLZv8i16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 586; // VCLSv2i32
                case 1:
                  return 588; // VCLSv4i32
                case 2:
                  return 600; // VCLZv2i32
                case 3:
                  return 602; // VCLZv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 570; // VCGTzv2f32
                case 1:
                  return 572; // VCGTzv4f32
                case 2:
                  return 548; // VCGEzv2f32
                case 3:
                  return 550; // VCGEzv4f32
                }
                break;
              case 11:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1240; // VRECPEd
                case 1:
                  return 1243; // VRECPEq
                case 2:
                  return 1307; // VRSQRTEd
                case 3:
                  return 1310; // VRSQRTEq
                }
                break;
              }
              break;
            case 5:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 613; // VCNTd
                case 9:
                  return 526; // VCEQzv2f32
                case 11:
                  return 1241; // VRECPEfd
                }
                break;
              case 1:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 614; // VCNTq
                case 9:
                  return 528; // VCEQzv4f32
                case 11:
                  return 1242; // VRECPEfq
                }
                break;
              case 2:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 1011; // VMVNd
                case 9:
                  return 578; // VCLEzv2f32
                case 11:
                  return 1308; // VRSQRTEfd
                }
                break;
              case 3:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 0:
                  return 1012; // VMVNq
                case 9:
                  return 580; // VCLEzv4f32
                case 11:
                  return 1309; // VRSQRTEfq
                }
                break;
              }
              break;
            case 6:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1045; // VPADALsv8i8
                case 1:
                  return 1040; // VPADALsv16i8
                case 2:
                  return 1051; // VPADALuv8i8
                case 3:
                  return 1046; // VPADALuv16i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1042; // VPADALsv4i16
                case 1:
                  return 1044; // VPADALsv8i16
                case 2:
                  return 1048; // VPADALuv4i16
                case 3:
                  return 1050; // VPADALuv8i16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1041; // VPADALsv2i32
                case 1:
                  return 1043; // VPADALsv4i32
                case 2:
                  return 1047; // VPADALuv2i32
                case 3:
                  return 1049; // VPADALuv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 592; // VCLTzv2f32
                case 1:
                  return 594; // VCLTzv4f32
                }
                break;
              case 11:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 631; // VCVTs2fd
                case 1:
                  return 633; // VCVTs2fq
                case 2:
                  return 634; // VCVTu2fd
                case 3:
                  return 636; // VCVTu2fq
                }
                break;
              }
              break;
            case 7:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction(insn, 16, 4)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1087; // VQABSv8i8
                case 1:
                  return 1082; // VQABSv16i8
                case 2:
                  return 1138; // VQNEGv8i8
                case 3:
                  return 1133; // VQNEGv16i8
                }
                break;
              case 4:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1084; // VQABSv4i16
                case 1:
                  return 1086; // VQABSv8i16
                case 2:
                  return 1135; // VQNEGv4i16
                case 3:
                  return 1137; // VQNEGv8i16
                }
                break;
              case 8:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 1083; // VQABSv2i32
                case 1:
                  return 1085; // VQABSv4i32
                case 2:
                  return 1134; // VQNEGv2i32
                case 3:
                  return 1136; // VQNEGv4i32
                }
                break;
              case 9:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 466; // VABSfd
                case 1:
                  return 468; // VABSfq
                case 2:
                  return 1022; // VNEGfd
                case 3:
                  return 1021; // VNEGf32q
                }
                break;
              case 11:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction(insn, 6, 2)) {
                case 0:
                  return 621; // VCVTf2sd
                case 1:
                  return 623; // VCVTf2sq
                case 2:
                  return 624; // VCVTf2ud
                case 3:
                  return 626; // VCVTf2uq
                }
                break;
              }
              break;
            case 8:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1623; // VTBL1
              case 1:
                return 1627; // VTBX1
              }
              break;
            case 9:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1624; // VTBL2
              case 1:
                return 1628; // VTBX2
              }
              break;
            case 10:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1625; // VTBL3
              case 1:
                return 1629; // VTBX3
              }
              break;
            case 11:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 1626; // VTBL4
              case 1:
                return 1630; // VTBX4
              }
              break;
            case 12:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{16} ...
                switch (fieldFromInstruction(insn, 16, 1)) {
                case 0:
                  // Check Inst{17} ...
                  switch (fieldFromInstruction(insn, 17, 1)) {
                  case 0:
                    // Check Inst{18-18} for singleton decoding...
                    if (fieldFromInstruction(insn, 18, 1) == 1)
                      return 651; // VDUPLN32d
                    break;
                  case 1:
                    return 649; // VDUPLN16d
                  }
                  break;
                case 1:
                  return 653; // VDUPLN8d
                }
                break;
              case 1:
                // Check Inst{16} ...
                switch (fieldFromInstruction(insn, 16, 1)) {
                case 0:
                  // Check Inst{17} ...
                  switch (fieldFromInstruction(insn, 17, 1)) {
                  case 0:
                    // Check Inst{18-18} for singleton decoding...
                    if (fieldFromInstruction(insn, 18, 1) == 1)
                      return 652; // VDUPLN32q
                    break;
                  case 1:
                    return 650; // VDUPLN16q
                  }
                  break;
                case 1:
                  return 654; // VDUPLN8q
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{6} ...
        switch (fieldFromInstruction(insn, 6, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 0:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1095; // VQADDsv8i8
                case 1:
                  return 1103; // VQADDuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1092; // VQADDsv4i16
                case 1:
                  return 1100; // VQADDuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1090; // VQADDsv2i32
                case 1:
                  return 1098; // VQADDuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1089; // VQADDsv1i64
                case 1:
                  return 1097; // VQADDuv1i64
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 507; // VANDd
                case 1:
                  return 661; // VEORd
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 509; // VBICd
                case 1:
                  return 515; // VBSLd
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                {
                  field_t N = fieldFromInstruction(insn, 7, 1), M = fieldFromInstruction(insn, 5, 1);
                  field_t Vn = fieldFromInstruction(insn, 16, 4), Vm = fieldFromInstruction(insn, 0, 4);
                  return (N == M && Vn == Vm) ? 951 /* VMOVDneon */ : 1038 /* VORRd */ ;
                }
                case 1:
                  return 513; // VBITd
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1036; // VORNd
                case 1:
                  return 511; // VBIFd
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1228; // VQSUBsv8i8
                case 1:
                  return 1236; // VQSUBuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1225; // VQSUBsv4i16
                case 1:
                  return 1233; // VQSUBuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1223; // VQSUBsv2i32
                case 1:
                  return 1231; // VQSUBuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1222; // VQSUBsv1i64
                case 1:
                  return 1230; // VQSUBuv1i64
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 540; // VCGEsv8i8
                case 1:
                  return 546; // VCGEuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 537; // VCGEsv4i16
                case 1:
                  return 543; // VCGEuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 536; // VCGEsv2i32
                case 1:
                  return 542; // VCGEuv2i32
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1195; // VQSHLsv8i8
                case 1:
                  return 1211; // VQSHLuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1192; // VQSHLsv4i16
                case 1:
                  return 1208; // VQSHLuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1190; // VQSHLsv2i32
                case 1:
                  return 1206; // VQSHLuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1189; // VQSHLsv1i64
                case 1:
                  return 1205; // VQSHLuv1i64
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1154; // VQRSHLsv8i8
                case 1:
                  return 1162; // VQRSHLuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1151; // VQRSHLsv4i16
                case 1:
                  return 1159; // VQRSHLuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1149; // VQRSHLsv2i32
                case 1:
                  return 1157; // VQRSHLuv2i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1148; // VQRSHLsv1i64
                case 1:
                  return 1156; // VQRSHLuv1i64
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 889; // VMINsv8i8
                case 1:
                  return 895; // VMINuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 886; // VMINsv4i16
                case 1:
                  return 892; // VMINuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 885; // VMINsv2i32
                case 1:
                  return 891; // VMINuv2i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 437; // VABAsv8i8
                case 1:
                  return 443; // VABAuv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 434; // VABAsv4i16
                case 1:
                  return 440; // VABAuv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 433; // VABAsv2i32
                case 1:
                  return 439; // VABAuv2i32
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1658; // VTSTv8i8
                case 1:
                  return 524; // VCEQv8i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1655; // VTSTv4i16
                case 1:
                  return 521; // VCEQv4i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1654; // VTSTv2i32
                case 1:
                  return 520; // VCEQv2i32
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1010; // VMULv8i8
                case 1:
                  return 997; // VMULpd
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1007; // VMULv4i16
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1006; // VMULv2i32
                break;
              }
              break;
            case 10:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1078; // VPMINs8
                case 1:
                  return 1081; // VPMINu8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1076; // VPMINs16
                case 1:
                  return 1079; // VPMINu16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1077; // VPMINs32
                case 1:
                  return 1080; // VPMINu32
                }
                break;
              }
              break;
            case 11:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1067; // VPADDi8
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1065; // VPADDi16
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1066; // VPADDi32
                break;
              }
              break;
            case 13:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 908; // VMLAfd
                case 1:
                  return 994; // VMULfd
                }
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 934; // VMLSfd
                break;
              }
              break;
            case 14:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 475; // VACGEd
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 477; // VACGTd
                break;
              }
              break;
            case 15:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1244; // VRECPSfd
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1311; // VRSQRTSfd
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1378; // VSHRsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1386; // VSHRuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1375; // VSHRsv4i16
                    case 1:
                      return 1383; // VSHRuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1373; // VSHRsv2i32
                  case 1:
                    return 1381; // VSHRuv2i32
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1410; // VSRAsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1418; // VSRAuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1407; // VSRAsv4i16
                    case 1:
                      return 1415; // VSRAuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1405; // VSRAsv2i32
                  case 1:
                    return 1413; // VSRAuv2i32
                  }
                  break;
                }
                break;
              case 2:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1298; // VRSHRsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1306; // VRSHRuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1295; // VRSHRsv4i16
                    case 1:
                      return 1303; // VRSHRuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1293; // VRSHRsv2i32
                  case 1:
                    return 1301; // VRSHRuv2i32
                  }
                  break;
                }
                break;
              case 3:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1320; // VRSRAsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1328; // VRSRAuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1317; // VRSRAsv4i16
                    case 1:
                      return 1325; // VRSRAuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1315; // VRSRAsv2i32
                  case 1:
                    return 1323; // VRSRAuv2i32
                  }
                  break;
                }
                break;
              case 4:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1426; // VSRIv8i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1423; // VSRIv4i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1421; // VSRIv2i32
                  break;
                }
                break;
              case 5:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1351; // VSHLiv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1398; // VSLIv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1348; // VSHLiv4i16
                    case 1:
                      return 1395; // VSLIv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1346; // VSHLiv2i32
                  case 1:
                    return 1393; // VSLIv2i32
                  }
                  break;
                }
                break;
              case 6:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1187; // VQSHLsuv8i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1184; // VQSHLsuv4i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1182; // VQSHLsuv2i32
                  break;
                }
                break;
              case 7:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1179; // VQSHLsiv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1203; // VQSHLuiv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1176; // VQSHLsiv4i16
                    case 1:
                      return 1200; // VQSHLuiv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1174; // VQSHLsiv2i32
                  case 1:
                    return 1198; // VQSHLuiv2i32
                  }
                  break;
                }
                break;
              case 8:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1370; // VSHRNv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1220; // VQSHRUNv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1369; // VSHRNv4i16
                    case 1:
                      return 1219; // VQSHRUNv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1368; // VSHRNv2i32
                  case 1:
                    return 1218; // VQSHRUNv2i32
                  }
                  break;
                }
                break;
              case 9:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1214; // VQSHRNsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1217; // VQSHRNuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1213; // VQSHRNsv4i16
                    case 1:
                      return 1216; // VQSHRNuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1212; // VQSHRNsv2i32
                  case 1:
                    return 1215; // VQSHRNuv2i32
                  }
                  break;
                }
                break;
              case 10:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19} ...
                      switch (fieldFromInstruction(insn, 19, 1)) {
                      case 1:
                        // Check Inst{18-16} for singleton decoding...
                        if (fieldFromInstruction(insn, 16, 3) == 0)
                          return 954; // VMOVLsv8i16
                        else
                          return 1340; // VSHLLsv8i16
                        break;
                      }
                      break;
                    case 1:
                      // Check Inst{19} ...
                      switch (fieldFromInstruction(insn, 19, 1)) {
                      case 1:
                        // Check Inst{18-16} for singleton decoding...
                        if (fieldFromInstruction(insn, 16, 3) == 0)
                          return 957; // VMOVLuv8i16
                        else
                          return 1343; // VSHLLuv8i16
                        break;
                      }
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-16} for singleton decoding...
                      if (fieldFromInstruction(insn, 16, 4) == 0)
                        return 953; // VMOVLsv4i32
                      else
                        return 1339; // VSHLLsv4i32
                      break;
                    case 1:
                      // Check Inst{19-16} for singleton decoding...
                      if (fieldFromInstruction(insn, 16, 4) == 0)
                        return 956; // VMOVLuv4i32
                      else
                        return 1342; // VSHLLuv4i32
                      break;
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    // Check Inst{20-16} for singleton decoding...
                    if (fieldFromInstruction(insn, 16, 5) == 0)
                      return 952; // VMOVLsv2i64
                    else
                      return 1338; // VSHLLsv2i64
                    break;
                  case 1:
                    // Check Inst{20-16} for singleton decoding...
                    if (fieldFromInstruction(insn, 16, 5) == 0)
                      return 955; // VMOVLuv2i64
                    else
                      return 1341; // VSHLLuv2i64
                    break;
                  }
                  break;
                }
                break;
              case 14:
                // Check Inst{5} ...
                switch (fieldFromInstruction(insn, 5, 1)) {
                case 0:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 978; // VMOVv8i8
                  break;
                case 1:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 972; // VMOVv1i64
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 637; // VCVTxs2fd
                case 1:
                  return 639; // VCVTxu2fd
                }
                break;
                break;
              case 15:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 627; // VCVTf2xsd
                case 1:
                  return 629; // VCVTf2xud
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{11-10} && Inst{8-8} for singleton decoding...
                  if (fieldFromInstruction(insn, 10, 2) == 2 && fieldFromInstruction(insn, 8, 1) == 0)
                    return 975; // VMOVv4i16
                  else
                    return 973; // VMOVv2i32
                  break;
                }
                break;
              case 1:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{11-10} && Inst{8-8} for singleton decoding...
                  if (fieldFromInstruction(insn, 10, 2) == 2 && fieldFromInstruction(insn, 8, 1) == 0)
                    return 1014; // VMVNv4i16
                  else
                    return 1013; // VMVNv2i32
                  break;
                }
                break;
              }
              break;
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1372; // VSHRsv1i64
                case 1:
                  return 1380; // VSHRuv1i64
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1404; // VSRAsv1i64
                case 1:
                  return 1412; // VSRAuv1i64
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1292; // VRSHRsv1i64
                case 1:
                  return 1300; // VRSHRuv1i64
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1314; // VRSRAsv1i64
                case 1:
                  return 1322; // VRSRAuv1i64
                }
                break;
              case 4:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1420; // VSRIv1i64
                break;
              case 5:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1345; // VSHLiv1i64
                case 1:
                  return 1392; // VSLIv1i64
                }
                break;
              case 6:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1181; // VQSHLsuv1i64
                break;
              case 7:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1173; // VQSHLsiv1i64
                case 1:
                  return 1197; // VQSHLuiv1i64
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 0:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1088; // VQADDsv16i8
                case 1:
                  return 1096; // VQADDuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1094; // VQADDsv8i16
                case 1:
                  return 1102; // VQADDuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1093; // VQADDsv4i32
                case 1:
                  return 1101; // VQADDuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1091; // VQADDsv2i64
                case 1:
                  return 1099; // VQADDuv2i64
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 508; // VANDq
                case 1:
                  return 662; // VEORq
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 510; // VBICq
                case 1:
                  return 516; // VBSLq
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                {
                  field_t N = fieldFromInstruction(insn, 7, 1), M = fieldFromInstruction(insn, 5, 1);
                  field_t Vn = fieldFromInstruction(insn, 16, 4), Vm = fieldFromInstruction(insn, 0, 4);
                  return (N == M && Vn == Vm) ? 961 /* VMOVQ */ : 1039 /* VORRq */ ;
                }
                case 1:
                  return 514; // VBITq
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1037; // VORNq
                case 1:
                  return 512; // VBIFq
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1221; // VQSUBsv16i8
                case 1:
                  return 1229; // VQSUBuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1227; // VQSUBsv8i16
                case 1:
                  return 1235; // VQSUBuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1226; // VQSUBsv4i32
                case 1:
                  return 1234; // VQSUBuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1224; // VQSUBsv2i64
                case 1:
                  return 1232; // VQSUBuv2i64
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 535; // VCGEsv16i8
                case 1:
                  return 541; // VCGEuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 539; // VCGEsv8i16
                case 1:
                  return 545; // VCGEuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 538; // VCGEsv4i32
                case 1:
                  return 544; // VCGEuv4i32
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1188; // VQSHLsv16i8
                case 1:
                  return 1204; // VQSHLuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1194; // VQSHLsv8i16
                case 1:
                  return 1210; // VQSHLuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1193; // VQSHLsv4i32
                case 1:
                  return 1209; // VQSHLuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1191; // VQSHLsv2i64
                case 1:
                  return 1207; // VQSHLuv2i64
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1147; // VQRSHLsv16i8
                case 1:
                  return 1155; // VQRSHLuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1153; // VQRSHLsv8i16
                case 1:
                  return 1161; // VQRSHLuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1152; // VQRSHLsv4i32
                case 1:
                  return 1160; // VQRSHLuv4i32
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1150; // VQRSHLsv2i64
                case 1:
                  return 1158; // VQRSHLuv2i64
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 884; // VMINsv16i8
                case 1:
                  return 890; // VMINuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 888; // VMINsv8i16
                case 1:
                  return 894; // VMINuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 887; // VMINsv4i32
                case 1:
                  return 893; // VMINuv4i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 432; // VABAsv16i8
                case 1:
                  return 438; // VABAuv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 436; // VABAsv8i16
                case 1:
                  return 442; // VABAuv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 435; // VABAsv4i32
                case 1:
                  return 441; // VABAuv4i32
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1653; // VTSTv16i8
                case 1:
                  return 519; // VCEQv16i8
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1657; // VTSTv8i16
                case 1:
                  return 523; // VCEQv8i16
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1656; // VTSTv4i32
                case 1:
                  return 522; // VCEQv4i32
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1005; // VMULv16i8
                case 1:
                  return 998; // VMULpq
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1009; // VMULv8i16
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1008; // VMULv4i32
                break;
              }
              break;
            case 13:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 909; // VMLAfq
                case 1:
                  return 996; // VMULfq
                }
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 935; // VMLSfq
                break;
              }
              break;
            case 14:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 476; // VACGEq
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 478; // VACGTq
                break;
              }
              break;
            case 15:
              // Check Inst{21-20} ...
              switch (fieldFromInstruction(insn, 20, 2)) {
              case 0:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1245; // VRECPSfq
                break;
              case 2:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 0)
                  return 1312; // VRSQRTSfq
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction(insn, 7, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1371; // VSHRsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1379; // VSHRuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1377; // VSHRsv8i16
                    case 1:
                      return 1385; // VSHRuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1376; // VSHRsv4i32
                  case 1:
                    return 1384; // VSHRuv4i32
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1403; // VSRAsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1411; // VSRAuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1409; // VSRAsv8i16
                    case 1:
                      return 1417; // VSRAuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1408; // VSRAsv4i32
                  case 1:
                    return 1416; // VSRAuv4i32
                  }
                  break;
                }
                break;
              case 2:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1291; // VRSHRsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1299; // VRSHRuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1297; // VRSHRsv8i16
                    case 1:
                      return 1305; // VRSHRuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1296; // VRSHRsv4i32
                  case 1:
                    return 1304; // VRSHRuv4i32
                  }
                  break;
                }
                break;
              case 3:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1313; // VRSRAsv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1321; // VRSRAuv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1319; // VRSRAsv8i16
                    case 1:
                      return 1327; // VRSRAuv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1318; // VRSRAsv4i32
                  case 1:
                    return 1326; // VRSRAuv4i32
                  }
                  break;
                }
                break;
              case 4:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1419; // VSRIv16i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1425; // VSRIv8i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1424; // VSRIv4i32
                  break;
                }
                break;
              case 5:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1344; // VSHLiv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1391; // VSLIv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1350; // VSHLiv8i16
                    case 1:
                      return 1397; // VSLIv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1349; // VSHLiv4i32
                  case 1:
                    return 1396; // VSLIv4i32
                  }
                  break;
                }
                break;
              case 6:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 19, 1) == 1)
                      return 1180; // VQSHLsuv16i8
                    break;
                  case 1:
                    // Check Inst{24-24} for singleton decoding...
                    if (fieldFromInstruction(insn, 24, 1) == 1)
                      return 1186; // VQSHLsuv8i16
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction(insn, 24, 1) == 1)
                    return 1185; // VQSHLsuv4i32
                  break;
                }
                break;
              case 7:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1172; // VQSHLsiv16i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1196; // VQSHLuiv16i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1178; // VQSHLsiv8i16
                    case 1:
                      return 1202; // VQSHLuiv8i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1177; // VQSHLsiv4i32
                  case 1:
                    return 1201; // VQSHLuiv4i32
                  }
                  break;
                }
                break;
              case 8:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1290; // VRSHRNv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1171; // VQRSHRUNv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1289; // VRSHRNv4i16
                    case 1:
                      return 1170; // VQRSHRUNv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1288; // VRSHRNv2i32
                  case 1:
                    return 1169; // VQRSHRUNv2i32
                  }
                  break;
                }
                break;
              case 9:
                // Check Inst{21} ...
                switch (fieldFromInstruction(insn, 21, 1)) {
                case 0:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction(insn, 20, 1)) {
                  case 0:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1165; // VQRSHRNsv8i8
                      break;
                    case 1:
                      // Check Inst{19-19} for singleton decoding...
                      if (fieldFromInstruction(insn, 19, 1) == 1)
                        return 1168; // VQRSHRNuv8i8
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{24} ...
                    switch (fieldFromInstruction(insn, 24, 1)) {
                    case 0:
                      return 1164; // VQRSHRNsv4i16
                    case 1:
                      return 1167; // VQRSHRNuv4i16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction(insn, 24, 1)) {
                  case 0:
                    return 1163; // VQRSHRNsv2i32
                  case 1:
                    return 1166; // VQRSHRNuv2i32
                  }
                  break;
                }
                break;
              case 14:
                // Check Inst{5} ...
                switch (fieldFromInstruction(insn, 5, 1)) {
                case 0:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 971; // VMOVv16i8
                  break;
                case 1:
                  // Check Inst{21-19} for singleton decoding...
                  if (fieldFromInstruction(insn, 19, 3) == 0)
                    return 974; // VMOVv2i64
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 638; // VCVTxs2fq
                case 1:
                  return 640; // VCVTxu2fq
                }
                break;
                break;
              case 15:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 628; // VCVTf2xsq
                case 1:
                  return 630; // VCVTf2xuq
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{11-10} && Inst{8-8} for singleton decoding...
                  if (fieldFromInstruction(insn, 10, 2) == 2 && fieldFromInstruction(insn, 8, 1) == 0)
                    return 977; // VMOVv8i16
                  else
                    return 976; // VMOVv4i32
                  break;
                }
                break;
              case 1:
                // Check Inst{21-19} ...
                switch (fieldFromInstruction(insn, 19, 3)) {
                case 0:
                  // Check Inst{11-10} && Inst{8-8} for singleton decoding...
                  if (fieldFromInstruction(insn, 10, 2) == 2 && fieldFromInstruction(insn, 8, 1) == 0)
                    return 1016; // VMVNv8i16
                  else
                    return 1015; // VMVNv4i32
                  break;
                }
                break;
              }
              break;
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 0:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1374; // VSHRsv2i64
                case 1:
                  return 1382; // VSHRuv2i64
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1406; // VSRAsv2i64
                case 1:
                  return 1414; // VSRAuv2i64
                }
                break;
              case 2:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1294; // VRSHRsv2i64
                case 1:
                  return 1302; // VRSHRuv2i64
                }
                break;
              case 3:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1316; // VRSRAsv2i64
                case 1:
                  return 1324; // VRSRAuv2i64
                }
                break;
              case 4:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1422; // VSRIv2i64
                break;
              case 5:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1347; // VSHLiv2i64
                case 1:
                  return 1394; // VSLIv2i64
                }
                break;
              case 6:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction(insn, 24, 1) == 1)
                  return 1183; // VQSHLsuv2i64
                break;
              case 7:
                // Check Inst{24} ...
                switch (fieldFromInstruction(insn, 24, 1)) {
                case 0:
                  return 1175; // VQSHLsiv2i64
                case 1:
                  return 1199; // VQSHLuiv2i64
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction(insn, 20, 2)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1570 /* VST4d8 */ : 1573/* VST4d8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1562 /* VST4d16 */ : 1565/* VST4d16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1566 /* VST4d32 */ : 1569/* VST4d32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 1:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1582 /* VST4q8 */ : 1584/* VST4q8_UPD */ ; // Advanced SIMD addressing mode
            case 4:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1574 /* VST4q16 */ : 1576/* VST4q16_UPD */ ; // Advanced SIMD addressing mode
            case 8:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1578 /* VST4q32 */ : 1580/* VST4q32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            return fieldFromInstruction(insn, 0, 4) == 15 ? 1476 /* VST2LNd8 */ : 1477/* VST2LNd8_UPD */ ; // Advanced SIMD addressing mode
          }
          break;
        case 2:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1450 /* VST1d8Q */ : 1451/* VST1d8Q_UPD */ ; // Advanced SIMD addressing mode
            case 4:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1428 /* VST1d16Q */ : 1429/* VST1d16Q_UPD */ ; // Advanced SIMD addressing mode
            case 8:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1434 /* VST1d32Q */ : 1435/* VST1d32Q_UPD */ ; // Advanced SIMD addressing mode
            case 12:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1440 /* VST1d64Q */ : 1443/* VST1d64Q_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1518 /* VST3LNd8 */ : 1519/* VST3LNd8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 3:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1510 /* VST2q8 */ : 1513/* VST2q8_UPD */ ; // Advanced SIMD addressing mode
            case 4:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1502 /* VST2q16 */ : 1505/* VST2q16_UPD */ ; // Advanced SIMD addressing mode
            case 8:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1506 /* VST2q32 */ : 1509/* VST2q32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            return fieldFromInstruction(insn, 0, 4) == 15 ? 1554 /* VST4LNd8 */ : 1555/* VST4LNd8_UPD */ ; // Advanced SIMD addressing mode
          }
          break;
        case 4:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1534 /* VST3d8 */ : 1537/* VST3d8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1526 /* VST3d16 */ : 1529/* VST3d16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1530 /* VST3d32 */ : 1533/* VST3d32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 5:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1546 /* VST3q8 */ : 1548/* VST3q8_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 1:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1538 /* VST3q16 */ : 1540/* VST3q16_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 2:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1542 /* VST3q32 */ : 1544/* VST3q32_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1472 /* VST2LNd16 */ : 1473/* VST2LNd16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1478 /* VST2LNq16 */ : 1479/* VST2LNq16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 6:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction(insn, 4, 2)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1452 /* VST1d8T */ : 1453/* VST1d8T_UPD */ ; // Advanced SIMD addressing mode
              case 1:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1430 /* VST1d16T */ : 1431/* VST1d16T_UPD */ ; // Advanced SIMD addressing mode
              case 2:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1436 /* VST1d32T */ : 1437/* VST1d32T_UPD */ ; // Advanced SIMD addressing mode
              case 3:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1444 /* VST1d64T */ : 1447/* VST1d64T_UPD */ ; // Advanced SIMD addressing mode
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1514 /* VST3LNd16 */ : 1515/* VST3LNd16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1520 /* VST3LNq16 */ : 1521/* VST3LNq16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 7:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1449 /* VST1d8 */ : 1454/* VST1d8_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 1:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1427 /* VST1d16 */ : 1432/* VST1d16_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 2:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1433 /* VST1d32 */ : 1438/* VST1d32_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 3:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1439 /* VST1d64 */ : 1448/* VST1d64_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1550 /* VST4LNd16 */ : 1551/* VST4LNd16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1556 /* VST4LNq16 */ : 1557/* VST4LNq16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 8:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1498 /* VST2d8 */ : 1501/* VST2d8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1490 /* VST2d16 */ : 1493/* VST2d16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1494 /* VST2d32 */ : 1497/* VST2d32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 9:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1488 /* VST2b8 */ : 1489/* VST2b8_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 1:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1486 /* VST2b32 */ : 1487/* VST2b32_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1474 /* VST2LNd32 */ : 1475/* VST2LNd32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{7} ...
                switch (fieldFromInstruction(insn, 7, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 1484 /* VST2b16 */ : 1485/* VST2b16_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1481 /* VST2LNq32 */ : 1482/* VST2LNq32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 10:
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1468 /* VST1q8 */ : 1471/* VST1q8_UPD */ ; // Advanced SIMD addressing mode
              case 1:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1460 /* VST1q32 */ : 1463/* VST1q32_UPD */ ; // Advanced SIMD addressing mode
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1516 /* VST3LNd32 */ : 1517/* VST3LNd32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1456 /* VST1q16 */ : 1459/* VST1q16_UPD */ ; // Advanced SIMD addressing mode
              case 1:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 1464 /* VST1q64 */ : 1467/* VST1q64_UPD */ ; // Advanced SIMD addressing mode
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1523 /* VST3LNq32 */ : 1524/* VST3LNq32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 11:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1552 /* VST4LNd32 */ : 1553/* VST4LNd32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 1559 /* VST4LNq32 */ : 1560/* VST4LNq32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 1)
            return 216; // PLDWi
          break;
        case 1:
          // Check Inst{24} ...
          switch (fieldFromInstruction(insn, 24, 1)) {
          case 0:
            return 220; // PLIi
          case 1:
            return 218; // PLDi
          }
          break;
        }
        break;
      case 2:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 843 /* VLD4d8 */ : 846/* VLD4d8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 835 /* VLD4d16 */ : 838/* VLD4d16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 839 /* VLD4d32 */ : 842/* VLD4d32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 1:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 855 /* VLD4q8 */ : 857/* VLD4q8_UPD */ ; // Advanced SIMD addressing mode
            case 4:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 847 /* VLD4q16 */ : 849/* VLD4q16_UPD */ ; // Advanced SIMD addressing mode
            case 8:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 851 /* VLD4q32 */ : 853/* VLD4q32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            return fieldFromInstruction(insn, 0, 4) == 15 ? 749 /* VLD2LNd8 */ : 750/* VLD2LNd8_UPD */ ; // Advanced SIMD addressing mode
          }
          break;
        case 2:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 723 /* VLD1d8Q */ : 724/* VLD1d8Q_UPD */ ; // Advanced SIMD addressing mode
            case 4:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 701 /* VLD1d16Q */ : 702/* VLD1d16Q_UPD */ ; // Advanced SIMD addressing mode
            case 8:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 707 /* VLD1d32Q */ : 708/* VLD1d32Q_UPD */ ; // Advanced SIMD addressing mode
            case 12:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 713 /* VLD1d64Q */ : 716/* VLD1d64Q_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction(insn, 4, 1)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 791 /* VLD3LNd8 */ : 792/* VLD3LNd8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 3:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 783 /* VLD2q8 */ : 786/* VLD2q8_UPD */ ; // Advanced SIMD addressing mode
            case 4:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 775 /* VLD2q16 */ : 778/* VLD2q16_UPD */ ; // Advanced SIMD addressing mode
            case 8:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 779 /* VLD2q32 */ : 782/* VLD2q32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            return fieldFromInstruction(insn, 0, 4) == 15 ? 827 /* VLD4LNd8 */ : 828/* VLD4LNd8_UPD */ ; // Advanced SIMD addressing mode
          }
          break;
        case 4:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 807 /* VLD3d8 */ : 810/* VLD3d8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 799 /* VLD3d16 */ : 802/* VLD3d16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 803 /* VLD3d32 */ : 806/* VLD3d32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 5:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 819 /* VLD3q8 */ : 821/* VLD3q8_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 1:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 811 /* VLD3q16 */ : 813/* VLD3q16_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 2:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 815 /* VLD3q32 */ : 817/* VLD3q32_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 745 /* VLD2LNd16 */ : 746/* VLD2LNd16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 751 /* VLD2LNq16 */ : 752/* VLD2LNq16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 6:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction(insn, 4, 2)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 725 /* VLD1d8T */ : 726/* VLD1d8T_UPD */ ; // Advanced SIMD addressing mode
              case 1:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 703 /* VLD1d16T */ : 704/* VLD1d16T_UPD */ ; // Advanced SIMD addressing mode
              case 2:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 709 /* VLD1d32T */ : 710/* VLD1d32T_UPD */ ; // Advanced SIMD addressing mode
              case 3:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 717 /* VLD1d64T */ : 720/* VLD1d64T_UPD */ ; // Advanced SIMD addressing mode
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 787 /* VLD3LNd16 */ : 788/* VLD3LNd16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 2:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 793 /* VLD3LNq16 */ : 794/* VLD3LNq16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 7:
          // Check Inst{5} ...
          switch (fieldFromInstruction(insn, 5, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction(insn, 6, 2)) {
              case 0:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 722 /* VLD1d8 */ : 727/* VLD1d8_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 1:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 700 /* VLD1d16 */ : 705/* VLD1d16_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 2:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 706 /* VLD1d32 */ : 711/* VLD1d32_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 3:
                // Check Inst{4} ...
                switch (fieldFromInstruction(insn, 4, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 712 /* VLD1d64 */ : 721/* VLD1d64_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 823 /* VLD4LNd16 */ : 824/* VLD4LNd16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 829 /* VLD4LNq16 */ : 830/* VLD4LNq16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 8:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 771 /* VLD2d8 */ : 774/* VLD2d8_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 763 /* VLD2d16 */ : 766/* VLD2d16_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 8:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 767 /* VLD2d32 */ : 770/* VLD2d32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 9:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 761 /* VLD2b8 */ : 762/* VLD2b8_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              case 1:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 759 /* VLD2b32 */ : 760/* VLD2b32_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 747 /* VLD2LNd32 */ : 748/* VLD2LNd32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{5-4} ...
              switch (fieldFromInstruction(insn, 4, 2)) {
              case 0:
                // Check Inst{7} ...
                switch (fieldFromInstruction(insn, 7, 1)) {
                case 0:
                  return fieldFromInstruction(insn, 0, 4) == 15 ? 757 /* VLD2b16 */ : 758/* VLD2b16_UPD */ ; // Advanced SIMD addressing mode
                }
                break;
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 754 /* VLD2LNq32 */ : 755/* VLD2LNq32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 10:
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 741 /* VLD1q8 */ : 744/* VLD1q8_UPD */ ; // Advanced SIMD addressing mode
              case 1:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 733 /* VLD1q32 */ : 736/* VLD1q32_UPD */ ; // Advanced SIMD addressing mode
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 789 /* VLD3LNd32 */ : 790/* VLD3LNd32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 4:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 0:
              // Check Inst{7} ...
              switch (fieldFromInstruction(insn, 7, 1)) {
              case 0:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 729 /* VLD1q16 */ : 732/* VLD1q16_UPD */ ; // Advanced SIMD addressing mode
              case 1:
                return fieldFromInstruction(insn, 0, 4) == 15 ? 737 /* VLD1q64 */ : 740/* VLD1q64_UPD */ ; // Advanced SIMD addressing mode
              }
              break;
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 796 /* VLD3LNq32 */ : 797/* VLD3LNq32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        case 11:
          // Check Inst{6} ...
          switch (fieldFromInstruction(insn, 6, 1)) {
          case 0:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 825 /* VLD4LNd32 */ : 826/* VLD4LNd32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          case 1:
            // Check Inst{24-23} ...
            switch (fieldFromInstruction(insn, 23, 2)) {
            case 1:
              return fieldFromInstruction(insn, 0, 4) == 15 ? 832 /* VLD4LNq32 */ : 833/* VLD4LNq32_UPD */ ; // Advanced SIMD addressing mode
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 1:
          // Check Inst{24-22} for singleton decoding...
          if (fieldFromInstruction(insn, 22, 3) == 5)
            return 86; // CLREX
          break;
        case 4:
          // Check Inst{19-8} ...
          switch (fieldFromInstruction(insn, 8, 12)) {
          case 4080:
            // Check Inst{24-22} ...
            switch (fieldFromInstruction(insn, 22, 3)) {
            case 5:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 104; // DSBsy
              else
                return 105; // DSBvar
              break;
            }
            break;
          }
          break;
        case 5:
          // Check Inst{19-8} ...
          switch (fieldFromInstruction(insn, 8, 12)) {
          case 4080:
            // Check Inst{24-22} ...
            switch (fieldFromInstruction(insn, 22, 3)) {
            case 5:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 101; // DMBsy
              else
                return 102; // DMBvar
              break;
            }
            break;
          }
          break;
        case 6:
          // Check Inst{24-22} && Inst{19-8} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction(insn, 22, 3) == 5 && fieldFromInstruction(insn, 8, 12) == 4080 && fieldFromInstruction(insn, 0, 4) == 15)
            return 112; // ISBsy
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 1:
        // Check Inst{24-24} && Inst{4-4} for singleton decoding...
        if (fieldFromInstruction(insn, 24, 1) == 1 && fieldFromInstruction(insn, 4, 1) == 0)
          return 217; // PLDWr
        break;
      case 5:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 1) == 0)
            return 221; // PLIr
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 1) == 0)
            return 219; // PLDr
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 1:
        return 236; // RFE
      case 3:
        return 237; // RFEW
      case 4:
        return 305; // SRS
      case 6:
        return 306; // SRSW
      }
      break;
    case 6:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction(insn, 20, 3)) {
      case 0:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 317; // STC2_OPTION
          break;
        case 1:
          return 316; // STC2_OFFSET
        }
        break;
      case 1:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1)
            return 121; // LDC2_OPTION
          break;
        case 1:
          return 120; // LDC2_OFFSET
        }
        break;
      case 2:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 318; // STC2_POST
        case 1:
          return 319; // STC2_PRE
        }
        break;
      case 3:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 122; // LDC2_POST
        case 1:
          return 123; // LDC2_PRE
        }
        break;
      case 4:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            return 168; // MCRR2
          case 1:
            return 313; // STC2L_OPTION
          }
          break;
        case 1:
          return 312; // STC2L_OFFSET
        }
        break;
      case 5:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            return 190; // MRRC2
          case 1:
            return 117; // LDC2L_OPTION
          }
          break;
        case 1:
          return 116; // LDC2L_OFFSET
        }
        break;
      case 6:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 314; // STC2L_POST
        case 1:
          return 315; // STC2L_PRE
        }
        break;
      case 7:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          return 118; // LDC2L_POST
        case 1:
          return 119; // LDC2L_PRE
        }
        break;
      }
      break;
    case 7:
      // Check Inst{4} ...
      switch (fieldFromInstruction(insn, 4, 1)) {
      case 0:
        // Check Inst{24-24} for singleton decoding...
        if (fieldFromInstruction(insn, 24, 1) == 0)
          return 85; // CDP2
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 0)
            return 166; // MCR2
          break;
        case 1:
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 0)
            return 188; // MRC2
          break;
        }
        break;
      }
      break;
    }
    break;
  default:
    break; // fallthrough
  }
  // Check Inst{27-26} ...
  switch (fieldFromInstruction(insn, 26, 2)) {
  case 0:
    // Check Inst{25-24} ...
    switch (fieldFromInstruction(insn, 24, 2)) {
    case 0:
      // Check Inst{21} ...
      switch (fieldFromInstruction(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 29; // ANDSrr
            else
              return 32; // ANDrr
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 4) == 9)
            return 197; // MUL
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 30; // ANDSrs
            else
              return 33; // ANDrs
          break;
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 398; // UMAAL
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 350; // SUBSrr
            else
              return 351; // SUBSrs
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 353; // SUBrr
          else
            return 354; // SUBrs
          break;
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 76; // BR_JTadd
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 21; // ADDSrr
            else
              return 22; // ADDSrs
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 24; // ADDrr
          else
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 400; // UMULL
            else
              return 25; // ADDrs
          break;
          break;
        case 3:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 252; // SBCSSrr
            else
              return 255; // SBCrr
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 4) == 9)
            return 298; // SMULL
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 253; // SBCSSrs
            else
              return 256; // SBCrs
          break;
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 344; // STRH_POST
          case 1:
            return 149; // LDRH_POST
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 141; // LDRD_POST
          case 1:
            return 153; // LDRSB_POST
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 336; // STRD_POST
          case 1:
            return 157; // LDRSH_POST
          }
          break;
        }
        break;
        break;
      case 1:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 107; // EORrr
          else
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 169; // MLA
            else
              return 108; // EORrs
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 170; // MLS
            break;
          case 1:
            return 239; // RSBSrs
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 241; // RSBrr
          else
            return 242; // RSBrs
          break;
          break;
        case 2:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction(insn, 4, 8)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 15; // ADCSSrr
            else
              return 18; // ADCrr
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 4) == 9)
            return 399; // UMLAL
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 16; // ADCSSrs
            else
              return 19; // ADCrs
          break;
          break;
        case 3:
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 246; // RSCrr
          else
            // Check Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 4) == 9)
              return 273; // SMLAL
            else
              return 247; // RSCrs
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 343; // STRHT
          case 1:
            return 148; // LDRHT
          }
          break;
        case 13:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 152; // LDRSBT
          break;
        case 15:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 156; // LDRSHT
          break;
        }
        break;
        break;
      }
      break;
    case 1:
      // Check Inst{21} ...
      switch (fieldFromInstruction(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return 191; // MRS
            case 5:
              return 222; // QADD
            case 8:
              return 269; // SMLABB
            case 9:
              return 356; // SWP
            case 10:
              return 280; // SMLATB
            case 12:
              return 270; // SMLABT
            case 14:
              return 281; // SMLATT
            }
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 386; // TSTrr
            else
              return 387; // TSTrs
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return 192; // MRSsys
            case 5:
              return 226; // QDADD
            case 8:
              return 274; // SMLALBB
            case 9:
              return 357; // SWPB
            case 10:
              return 278; // SMLALTB
            case 12:
              return 275; // SMLALBT
            case 14:
              return 279; // SMLALTT
            }
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 92; // CMPrr
            else
              return 93; // CMPrs
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 249)
              return 338; // STREX
            break;
          case 1:
            // Check Inst{11-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 12) == 3999)
              return 143; // LDREX
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 203; // ORRrr
          else
            return 204; // ORRrs
          break;
          break;
        case 3:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 249)
              return 339; // STREXB
            break;
          case 1:
            // Check Inst{11-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 12) == 3999)
              return 144; // LDREXB
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 64; // BICrr
          else
            return 65; // BICrs
          break;
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 342; // STRH
          case 1:
            return 147; // LDRH
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 140; // LDRD
          case 1:
            return 151; // LDRSB
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 335; // STRD
          case 1:
            return 155; // LDRSH
          }
          break;
        }
        break;
        break;
      case 1:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return 193; // MSR
            case 1:
              // Check Inst{19-8} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 12) == 4095 && fieldFromInstruction(insn, 0, 4) == 14)
                return 81; // BX_RET
              break;
            case 2:
              return 80; // BXJ
            case 3:
              // Check Inst{19-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 12) == 4095)
                return 69; // BLXr9
              break;
            case 5:
              return 229; // QSUB
            case 7:
              return 66; // BKPT
            case 8:
              return 282; // SMLAWB
            case 10:
              return 301; // SMULWB
            case 12:
              return 283; // SMLAWT
            case 14:
              return 302; // SMULWT
            }
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 381; // TEQrr
            else
              return 382; // TEQrs
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 0:
              return 195; // MSRsys
            case 1:
              // Check Inst{19-16} && Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15 && fieldFromInstruction(insn, 8, 4) == 15)
                return 87; // CLZ
              break;
            case 5:
              return 227; // QDSUB
            case 7:
              return 268; // SMC
            case 8:
              return 296; // SMULBB
            case 10:
              return 299; // SMULTB
            case 12:
              return 297; // SMULBT
            case 14:
              return 300; // SMULTT
            }
            break;
          case 1:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 89; // CMNzrr
            else
              return 90; // CMNzrs
            break;
          }
          break;
        case 2:
          // Check Inst{20-0} for singleton decoding...
          if (fieldFromInstruction(insn, 0, 21) == 61454)
            return 174; // MOVPCLR
          else
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{11-4} ...
              switch (fieldFromInstruction(insn, 4, 8)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 78; // BR_JTr
                break;
              case 249:
                return 340; // STREXD
              }
              break;
            case 1:
              // Check Inst{11-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 12) == 3999)
                return 145; // LDREXD
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 0)
              return 181; // MOVr
            else
              return 184; // MOVs
            break;
          break;
        case 3:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{11-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 8) == 249)
              return 341; // STREXH
            break;
          case 1:
            // Check Inst{11-0} for singleton decoding...
            if (fieldFromInstruction(insn, 0, 12) == 3999)
              return 146; // LDREXH
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{11-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 8) == 0)
            return 199; // MVNr
          else
            return 200; // MVNs
          break;
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 345; // STRH_PRE
          case 1:
            return 150; // LDRH_PRE
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 142; // LDRD_PRE
          case 1:
            return 154; // LDRSB_PRE
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 337; // STRD_PRE
          case 1:
            return 158; // LDRSH_PRE
          }
          break;
        }
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction(insn, 21, 3)) {
      case 0:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 28; // ANDSri
        else
          return 31; // ANDri
        break;
      case 1:
        return 106; // EORri
      case 2:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 349; // SUBSri
        else
          return 352; // SUBri
        break;
      case 3:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 238; // RSBSri
        else
          return 240; // RSBri
        break;
      case 4:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 20; // ADDSri
        else
          return 23; // ADDri
        break;
      case 5:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 14; // ADCSSri
        else
          return 17; // ADCri
        break;
      case 6:
        // Check Inst{20-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 1) == 1)
          return 251; // SBCSSri
        else
          return 254; // SBCri
        break;
      case 7:
        return 245; // RSCri
      }
      break;
    case 3:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction(insn, 21, 3)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 178; // MOVi16
        case 1:
          return 385; // TSTri
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction(insn, 0, 4)) {
            case 0:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 0)
                return 201; // NOP
              break;
            case 1:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 0)
                return 1679; // YIELD
              break;
            case 2:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 0)
                return 1677; // WFE
              break;
            case 3:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 0)
                return 1678; // WFI
              break;
            case 4:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 0)
                return 261; // SEV
              break;
            default:
              break; // fallthrough
            }
            return 194; // MSRi
            break;
          case 15:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 0)
              return 99; // DBG
            break;
          }
          break;
        case 1:
          return 380; // TEQri
        }
        break;
      case 2:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 176; // MOVTi16
        case 1:
          return 91; // CMPri
        }
        break;
      case 3:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 4, 4) == 0)
            return 196; // MSRsysi
          break;
        case 1:
          return 88; // CMNzri
        }
        break;
      case 4:
        return 202; // ORRri
      case 5:
        return 177; // MOVi
      case 6:
        return 63; // BICri
      case 7:
        return 198; // MVNi
      }
      break;
    }
    break;
  case 1:
    // Check Inst{22-21} ...
    switch (fieldFromInstruction(insn, 21, 2)) {
    case 0:
      // Check Inst{20} ...
      switch (fieldFromInstruction(insn, 20, 1)) {
      case 0:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{11-10} ...
                switch (fieldFromInstruction(insn, 10, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 364; // SXTB16r
                  else
                    return 358; // SXTAB16rr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 365; // SXTB16r_rot
                else
                  return 359; // SXTAB16rr_rot
                break;
                break;
              }
              break;
            }
            break;
          case 11:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1)
              return 258; // SEL
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1)
              return 214; // PKHBT
            break;
          case 5:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1)
              return 215; // PKHTB
            break;
          default:
            break; // fallthrough
          }
          return 347; // STR_POST
          break;
          break;
        case 1:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 294; // SMUAD
                else
                  return 271; // SMLAD
                break;
              }
              break;
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 407; // USAD8
                else
                  return 408; // USADA8
                break;
              }
              break;
            }
            break;
          case 3:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 295; // SMUADX
                else
                  return 272; // SMLADX
                break;
              }
              break;
            }
            break;
          case 5:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 303; // SMUSD
                else
                  return 284; // SMLSD
                break;
              }
              break;
            }
            break;
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 304; // SMUSDX
                else
                  return 285; // SMLSDX
                break;
              }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          return 330; // STR
          break;
        }
        break;
      case 1:
        // Check Inst{24} ...
        switch (fieldFromInstruction(insn, 24, 1)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 248; // SADD16
            break;
          case 3:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 250; // SASX
            break;
          case 5:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 309; // SSAX
            break;
          case 7:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 310; // SSUB16
            break;
          case 9:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 249; // SADD8
            break;
          case 15:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 311; // SSUB8
            break;
          default:
            break; // fallthrough
          }
          return 160; // LDR_POST
          break;
        case 1:
          // Check Inst{25-25} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
            return 77; // BR_JTm
          else
            return 135; // Returning LDR for {LDR, LDRcp}
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        // Check Inst{11-4} ...
        switch (fieldFromInstruction(insn, 4, 8)) {
        case 243:
          // Check Inst{25-25} && Inst{23-23} && Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 16, 5) == 31)
            return 233; // REV
          break;
        case 251:
          // Check Inst{25-25} && Inst{23-23} && Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 16, 5) == 31)
            return 234; // REV16
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 223; // QADD16
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 262; // SHADD16
            break;
          }
          break;
        case 3:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 225; // QASX
              break;
            case 1:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 308; // SSAT16
              break;
            }
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 264; // SHASX
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 228; // QSAX
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 265; // SHSAX
            break;
          }
          break;
        case 7:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 230; // QSUB16
              break;
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{11-10} ...
                switch (fieldFromInstruction(insn, 10, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 366; // SXTBr
                  else
                    return 360; // SXTABrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 367; // SXTBr_rot
                else
                  return 361; // SXTABrr_rot
                break;
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 266; // SHSUB16
              break;
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{11-10} ...
                switch (fieldFromInstruction(insn, 10, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 368; // SXTHr
                  else
                    return 362; // SXTAHrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 369; // SXTHr_rot
                else
                  return 363; // SXTAHrr_rot
                break;
                break;
              }
              break;
            }
            break;
          }
          break;
        case 9:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 224; // QADD8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 263; // SHADD8
            break;
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 231; // QSUB8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 267; // SHSUB8
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 346; // STRT
        case 1:
          return 159; // LDRT
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{5-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 2) == 1)
          return 307; // SSAT
        break;
        break;
        break;
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 348; // STR_PRE
        case 1:
          return 161; // LDR_PRE
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{6-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 3) == 5)
          return 257; // SBFX
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{11-10} ...
                switch (fieldFromInstruction(insn, 10, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 420; // UXTB16r
                  else
                    return 414; // UXTAB16rr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 421; // UXTB16r_rot
                else
                  return 415; // UXTAB16rr_rot
                break;
                break;
              }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          return 333; // STRB_POST
          break;
        case 1:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 388; // UADD16
            break;
          case 3:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 390; // UASX
            break;
          case 5:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 411; // USAX
            break;
          case 7:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 412; // USUB16
            break;
          case 9:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 389; // UADD8
            break;
          case 15:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 413; // USUB8
            break;
          default:
            break; // fallthrough
          }
          return 138; // LDRB_POST
          break;
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 276; // SMLALD
            break;
          case 3:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 277; // SMLALDX
            break;
          case 5:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 286; // SMLSLD
            break;
          case 7:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 287; // SMLSLDX
            break;
          default:
            break; // fallthrough
          }
          return 331; // STRB
          break;
        case 1:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 292; // SMMUL
                else
                  return 288; // SMMLA
                break;
              }
              break;
            }
            break;
          case 3:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 293; // SMMULR
                else
                  return 289; // SMMLAR
                break;
              }
              break;
            }
            break;
          case 13:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 290; // SMMLS
            break;
          case 15:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 291; // SMMLSR
            break;
          default:
            break; // fallthrough
          }
          return 136; // LDRB
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{6-4} ...
        switch (fieldFromInstruction(insn, 4, 3)) {
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 1:
            // Check Inst{25} ...
            switch (fieldFromInstruction(insn, 25, 1)) {
            case 1:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 61; // BFC
              else
                return 62; // BFI
              break;
            }
            break;
          }
          break;
        }
        break;
        break;
      }
      break;
    case 3:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        // Check Inst{11-4} ...
        switch (fieldFromInstruction(insn, 4, 8)) {
        case 243:
          // Check Inst{25-25} && Inst{23-23} && Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 16, 5) == 31)
            return 232; // RBIT
          break;
        case 251:
          // Check Inst{25-25} && Inst{23-23} && Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 16, 5) == 31)
            return 235; // REVSH
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 401; // UQADD16
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 392; // UHADD16
            break;
          }
          break;
        case 3:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 403; // UQASX
              break;
            case 1:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 410; // USAT16
              break;
            }
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 394; // UHASX
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 404; // UQSAX
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 395; // UHSAX
            break;
          }
          break;
        case 7:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 405; // UQSUB16
              break;
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{11-10} ...
                switch (fieldFromInstruction(insn, 10, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 422; // UXTBr
                  else
                    return 416; // UXTABrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 423; // UXTBr_rot
                else
                  return 417; // UXTABrr_rot
                break;
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{25-25} for singleton decoding...
              if (fieldFromInstruction(insn, 25, 1) == 1)
                return 396; // UHSUB16
              break;
            case 1:
              // Check Inst{25} ...
              switch (fieldFromInstruction(insn, 25, 1)) {
              case 1:
                // Check Inst{11-10} ...
                switch (fieldFromInstruction(insn, 10, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 424; // UXTHr
                  else
                    return 418; // UXTAHrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 425; // UXTHr_rot
                else
                  return 419; // UXTAHrr_rot
                break;
                break;
              }
              break;
            }
            break;
          }
          break;
        case 9:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 402; // UQADD8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 393; // UHADD8
            break;
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 406; // UQSUB8
            break;
          case 1:
            // Check Inst{25-25} && Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 0)
              return 397; // UHSUB8
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 332; // STRBT
        case 1:
          return 137; // LDRBT
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{5-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 2) == 1)
          return 409; // USAT
        break;
        break;
        break;
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 334; // STRB_PRE
        case 1:
          // Check Inst{25-25} && Inst{23-23} && Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 4) == 15)
            return 384; // TRAP
          else
            return 139; // LDRB_PRE
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{6-4} for singleton decoding...
        if (fieldFromInstruction(insn, 25, 1) == 1 && fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 4, 3) == 5)
          return 391; // UBFX
        break;
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{25} ...
    switch (fieldFromInstruction(insn, 25, 1)) {
    case 0:
      // Check Inst{20} ...
      switch (fieldFromInstruction(insn, 20, 1)) {
      case 0:
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          // Check Inst{21-21} for singleton decoding...
          if (fieldFromInstruction(insn, 21, 1) == 1)
            return 329; // STM_UPD
          else
            return 328; // STM
          break;
        }
        break;
      case 1:
        // Check Inst{22} ...
        switch (fieldFromInstruction(insn, 22, 1)) {
        case 0:
          // Check Inst{21-21} for singleton decoding...
          if (fieldFromInstruction(insn, 21, 1) == 1)
            return 134; // LDM_UPD
          else
            return 132; // LDM
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        return 83; // Bcc
      case 1:
        return 72; // BLr9_pred
      }
      break;
    }
    break;
  case 3:
    // Check Inst{25} ...
    switch (fieldFromInstruction(insn, 25, 1)) {
    case 0:
      // Check Inst{20} ...
      switch (fieldFromInstruction(insn, 20, 1)) {
      case 0:
        // Check Inst{24-21} ...
        switch (fieldFromInstruction(insn, 21, 4)) {
        case 2:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 40:
            // Check Inst{4-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 1) == 1)
              return 969; // VMOVSRR
            break;
          case 44:
            // Check Inst{4-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 1) == 1)
              return 949; // VMOVDRR
            break;
          default:
            break; // fallthrough
          }
          return 167; // MCRR
          break;
        case 4:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 325; // STC_OPTION
        case 6:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 321; // STCL_OPTION
        default:
          break; // fallthrough
        }
        // Check Inst{22-21} ...
        switch (fieldFromInstruction(insn, 21, 2)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 1)
            return 324; // STC_OFFSET
          break;
        case 1:
          // Check Inst{24} ...
          switch (fieldFromInstruction(insn, 24, 1)) {
          case 0:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 326; // STC_POST
          case 1:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 327; // STC_PRE
          }
          break;
        case 2:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 1)
            return 320; // STCL_OFFSET
          break;
        case 3:
          // Check Inst{24} ...
          switch (fieldFromInstruction(insn, 24, 1)) {
          case 0:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 322; // STCL_POST
          case 1:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 323; // STCL_PRE
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{21} ...
          switch (fieldFromInstruction(insn, 21, 1)) {
          case 0:
            // Check Inst{24-24} for singleton decoding...
            if (fieldFromInstruction(insn, 24, 1) == 1)
              return 1592; // VSTRS
            break;
          case 1:
            return 1590; // VSTMS_UPD
          default:
            break; // fallthrough
          }
          return 1589; // VSTMS
          break;
        case 11:
          // Check Inst{21} ...
          switch (fieldFromInstruction(insn, 21, 1)) {
          case 0:
            // Check Inst{24-24} for singleton decoding...
            if (fieldFromInstruction(insn, 24, 1) == 1)
              return 1591; // VSTRD
            break;
          case 1:
            return 1587; // VSTMD_UPD
          default:
            break; // fallthrough
          }
          return 1586; // VSTMD
          break;
        }
        break;
        break;
        break;
      case 1:
        // Check Inst{24-21} ...
        switch (fieldFromInstruction(insn, 21, 4)) {
        case 2:
          // Check Inst{11-6} ...
          switch (fieldFromInstruction(insn, 6, 6)) {
          case 40:
            // Check Inst{4-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 1) == 1)
              return 965; // VMOVRRS
            break;
          case 44:
            // Check Inst{4-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 1) == 1)
              return 964; // VMOVRRD
            break;
          default:
            break; // fallthrough
          }
          return 189; // MRRC
          break;
        case 4:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 129; // LDC_OPTION
        case 6:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          return 125; // LDCL_OPTION
        default:
          break; // fallthrough
        }
        // Check Inst{22-21} ...
        switch (fieldFromInstruction(insn, 21, 2)) {
        case 0:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 1)
            return 128; // LDC_OFFSET
          break;
        case 1:
          // Check Inst{24} ...
          switch (fieldFromInstruction(insn, 24, 1)) {
          case 0:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 130; // LDC_POST
          case 1:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 131; // LDC_PRE
          }
          break;
        case 2:
          if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
          // Check Inst{24-24} for singleton decoding...
          if (fieldFromInstruction(insn, 24, 1) == 1)
            return 124; // LDCL_OFFSET
          break;
        case 3:
          // Check Inst{24} ...
          switch (fieldFromInstruction(insn, 24, 1)) {
          case 0:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 126; // LDCL_POST
          case 1:
            if (fieldFromInstruction(insn, 9, 3) == 5) break; // fallthrough
            return 127; // LDCL_PRE
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{11-8} ...
        switch (fieldFromInstruction(insn, 8, 4)) {
        case 10:
          // Check Inst{21} ...
          switch (fieldFromInstruction(insn, 21, 1)) {
          case 0:
            // Check Inst{24-24} for singleton decoding...
            if (fieldFromInstruction(insn, 24, 1) == 1)
              return 865; // VLDRS
            break;
          case 1:
            return 863; // VLDMS_UPD
          default:
            break; // fallthrough
          }
          return 862; // VLDMS
          break;
        case 11:
          // Check Inst{21} ...
          switch (fieldFromInstruction(insn, 21, 1)) {
          case 0:
            // Check Inst{24-24} for singleton decoding...
            if (fieldFromInstruction(insn, 24, 1) == 1)
              return 864; // VLDRD
            break;
          case 1:
            return 860; // VLDMD_UPD
          default:
            break; // fallthrough
          }
          return 859; // VLDMD
          break;
        }
        break;
        break;
        break;
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction(insn, 24, 1)) {
      case 0:
        // Check Inst{4} ...
        switch (fieldFromInstruction(insn, 4, 1)) {
        case 0:
          // Check Inst{21-16} ...
          switch (fieldFromInstruction(insn, 16, 6)) {
          case 48:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 967; // VMOVS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 465; // VABSS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 948; // VMOVD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 464; // VABSD
              break;
            }
            break;
          case 49:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1019; // VNEGS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1402; // VSQRTS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1017; // VNEGD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1401; // VSQRTD
              break;
            }
            break;
          case 50:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 616; // VCVTBSH
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 620; // VCVTTSH
              break;
            }
            break;
          case 51:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 615; // VCVTBHS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 619; // VCVTTHS
              break;
            }
            break;
          case 52:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 610; // VCMPS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 607; // VCMPES
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 605; // VCMPD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 606; // VCMPED
              break;
            }
            break;
          case 53:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 612; // VCMPZS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 609; // VCMPEZS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 611; // VCMPZD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 608; // VCMPEZD
              break;
            }
            break;
          case 55:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 617; // VCVTDS
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 618; // VCVTSD
              break;
            }
            break;
          case 56:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1662; // VUITOS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1390; // VSITOS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1661; // VUITOD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1389; // VSITOD
              break;
            }
            break;
          case 58:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1388; // VSHTOS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1400; // VSLTOS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1387; // VSHTOD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1399; // VSLTOD
              break;
            }
            break;
          case 59:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1660; // VUHTOS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1664; // VULTOS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1659; // VUHTOD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1663; // VULTOD
              break;
            }
            break;
          case 60:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1642; // VTOUIRS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1644; // VTOUIZS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1641; // VTOUIRD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1643; // VTOUIZD
              break;
            }
            break;
          case 61:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1634; // VTOSIRS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1636; // VTOSIZS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1633; // VTOSIRD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1635; // VTOSIZD
              break;
            }
            break;
          case 62:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1632; // VTOSHS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1638; // VTOSLS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1631; // VTOSHD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1637; // VTOSLD
              break;
            }
            break;
          case 63:
            // Check Inst{11-6} ...
            switch (fieldFromInstruction(insn, 6, 6)) {
            case 41:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1640; // VTOUHS
              break;
            case 43:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1646; // VTOULS
              break;
            case 45:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1639; // VTOUHD
              break;
            case 47:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1)
                return 1645; // VTOULD
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{21-20} ...
          switch (fieldFromInstruction(insn, 20, 2)) {
          case 0:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23} ...
                switch (fieldFromInstruction(insn, 23, 1)) {
                case 0:
                  return 907; // VMLAS
                case 1:
                  return 642; // VDIVS
                }
                break;
              case 11:
                // Check Inst{23} ...
                switch (fieldFromInstruction(insn, 23, 1)) {
                case 0:
                  return 896; // VMLAD
                case 1:
                  return 641; // VDIVD
                }
                break;
              }
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 933; // VMLSS
                break;
              case 11:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 922; // VMLSD
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1033; // VNMLSS
                break;
              case 11:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1032; // VNMLSD
                break;
              }
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1031; // VNMLAS
                break;
              case 11:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1030; // VNMLAD
                break;
              }
              break;
            }
            break;
          case 2:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 993; // VMULS
                break;
              case 11:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 981; // VMULD
                break;
              }
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1035; // VNMULS
                break;
              case 11:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1034; // VNMULD
                break;
              }
              break;
            }
            break;
          case 3:
            // Check Inst{6} ...
            switch (fieldFromInstruction(insn, 6, 1)) {
            case 0:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23} ...
                switch (fieldFromInstruction(insn, 23, 1)) {
                case 0:
                  return 489; // VADDS
                case 1:
                  // Check Inst{7-7} && Inst{5-5} for singleton decoding...
                  if (fieldFromInstruction(insn, 7, 1) == 0 && fieldFromInstruction(insn, 5, 1) == 0)
                    return 110; // FCONSTS
                  break;
                }
                break;
              case 11:
                // Check Inst{23} ...
                switch (fieldFromInstruction(insn, 23, 1)) {
                case 0:
                  return 479; // VADDD
                case 1:
                  // Check Inst{7-7} && Inst{5-5} for singleton decoding...
                  if (fieldFromInstruction(insn, 7, 1) == 0 && fieldFromInstruction(insn, 5, 1) == 0)
                    return 109; // FCONSTD
                  break;
                }
                break;
              }
              break;
            case 1:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1603; // VSUBS
                break;
              case 11:
                // Check Inst{23-23} for singleton decoding...
                if (fieldFromInstruction(insn, 23, 1) == 0)
                  return 1593; // VSUBD
                break;
              }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          return 84; // CDP
          break;
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-21} ...
            switch (fieldFromInstruction(insn, 21, 3)) {
            case 0:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 10)
                return 968; // VMOVSR
              break;
            case 4:
              // Check Inst{6-5} ...
              switch (fieldFromInstruction(insn, 5, 2)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11)
                  return 645; // VDUP32d
                break;
              case 1:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11)
                  return 643; // VDUP16d
                break;
              }
              break;
            case 5:
              // Check Inst{6-5} ...
              switch (fieldFromInstruction(insn, 5, 2)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11)
                  return 646; // VDUP32q
                break;
              case 1:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11)
                  return 644; // VDUP16q
                break;
              }
              break;
            case 6:
              // Check Inst{11-8} && Inst{6-5} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 5, 2) == 0)
                return 647; // VDUP8d
              break;
            case 7:
              // Check Inst{11-8} ...
              switch (fieldFromInstruction(insn, 8, 4)) {
              case 10:
                // Check Inst{19-16} && Inst{7-7} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 1 && fieldFromInstruction(insn, 7, 1) == 0)
                  return 980; // VMSR
                break;
              case 11:
                // Check Inst{6-5} for singleton decoding...
                if (fieldFromInstruction(insn, 5, 2) == 0)
                  return 648; // VDUP8q
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{23-22} ...
            switch (fieldFromInstruction(insn, 22, 2)) {
            case 0:
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{11-8} && Inst{6-6} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 6, 1) == 0)
                  return 1333; // VSETLNi32
                break;
              case 1:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11)
                  return 1332; // VSETLNi16
                break;
              }
              break;
            case 1:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 1334; // VSETLNi8
              break;
            default:
              break; // fallthrough
            }
            return 165; // MCR
            break;
            break;
          case 1:
            // Check Inst{23-21} ...
            switch (fieldFromInstruction(insn, 21, 3)) {
            case 0:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 10)
                return 966; // VMOVRS
              break;
            case 7:
              // Check Inst{11-7} ...
              switch (fieldFromInstruction(insn, 7, 5)) {
              case 20:
                // Check Inst{19-16} ...
                switch (fieldFromInstruction(insn, 16, 4)) {
                case 1:
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 111; // FMSTAT
                  else
                    return 979; // VMRS
                  break;
                }
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{23-22} ...
            switch (fieldFromInstruction(insn, 22, 2)) {
            case 0:
              // Check Inst{5} ...
              switch (fieldFromInstruction(insn, 5, 1)) {
              case 0:
                // Check Inst{11-8} && Inst{6-6} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 6, 1) == 0)
                  return 671; // VGETLNi32
                break;
              case 1:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 11)
                  return 672; // VGETLNs16
                break;
              }
              break;
            case 1:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 673; // VGETLNs8
              break;
            case 2:
              // Check Inst{11-8} && Inst{5-5} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11 && fieldFromInstruction(insn, 5, 1) == 1)
                return 674; // VGETLNu16
              break;
            case 3:
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 11)
                return 675; // VGETLNu8
              break;
            default:
              break; // fallthrough
            }
            return 187; // MRC
            break;
            break;
          }
          break;
        }
        break;
      case 1:
        return 355; // SVC
      }
      break;
    }
    break;
  }

  return 0;
}

static uint16_t decodeThumbInstruction(field_t insn) {
  // Check Inst{31-27} ...
  switch (fieldFromInstruction(insn, 27, 5)) {
  case 0:
    // Check Inst{26-12} ...
    switch (fieldFromInstruction(insn, 12, 15)) {
    case 0:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        // Check Inst{10-6} for singleton decoding...
        if (fieldFromInstruction(insn, 6, 5) == 0)
          return 2110; // tMOVSr
        else
          return 2103; // tLSLri
        break;
      case 1:
        return 2105; // tLSRri
      }
      break;
    case 1:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2055; // tASRri
      case 1:
        // Check Inst{10-9} ...
        switch (fieldFromInstruction(insn, 9, 2)) {
        case 0:
          return 2049; // tADDrr
        case 1:
          return 2144; // tSUBrr
        case 2:
          return 2044; // tADDi3
        case 3:
          return 2142; // tSUBi3
        }
        break;
      }
      break;
    case 2:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2113; // tMOVi8
      case 1:
        return 2078; // tCMPi8
      }
      break;
    case 3:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2045; // tADDi8
      case 1:
        return 2143; // tSUBi8
      }
      break;
    case 4:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        // Check Inst{10-8} ...
        switch (fieldFromInstruction(insn, 8, 3)) {
        case 0:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2054; // tAND
          case 1:
            return 2084; // tEOR
          case 2:
            return 2104; // tLSLrr
          case 3:
            return 2106; // tLSRrr
          }
          break;
        case 1:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2056; // tASRrr
          case 1:
            return 2042; // tADC
          case 2:
            return 2130; // tSBC
          case 3:
            return 2127; // tROR
          }
          break;
        case 2:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2152; // tTST
          case 1:
            return 2128; // tRSB
          case 2:
            return 2079; // tCMPr
          case 3:
            return 2076; // tCMNz
          }
          break;
        case 3:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            return 2119; // tORR
          case 1:
            return 2116; // tMUL
          case 2:
            return 2058; // tBIC
          case 3:
            return 2117; // tMVN
          }
          break;
        case 4:
          return 2043; // tADDhirr
        case 5:
          return 2077; // tCMPhir
        case 6:
          // Check Inst{7-7} && Inst{2-0} for singleton decoding...
          if (fieldFromInstruction(insn, 7, 1) == 1 && fieldFromInstruction(insn, 0, 3) == 7)
            return 2066; // tBRIND
          else
            // Check Inst{7-6} for singleton decoding...
            if (fieldFromInstruction(insn, 6, 2) == 0)
              return 2114; // tMOVr
            else
              // Check Inst{7-7} for singleton decoding...
              if (fieldFromInstruction(insn, 7, 1) == 0)
                return 2112; // tMOVgpr2tgpr
              else
                // Check Inst{6-6} for singleton decoding...
                if (fieldFromInstruction(insn, 6, 1) == 0)
                  return 2115; // tMOVtgpr2gpr
                else
                  return 2111; // tMOVgpr2gpr
          break;
        case 7:
          // Check Inst{7} ...
          switch (fieldFromInstruction(insn, 7, 1)) {
          case 0:
            // Check Inst{6-3} for singleton decoding...
            if (fieldFromInstruction(insn, 3, 4) == 14)
              return 2069; // tBX_RET
            else
              return 2070; // tBX_RET_vararg
            break;
          case 1:
            return 2064; // tBLXr_r9
          }
          break;
        }
        break;
      case 1:
        return 2098; // tLDRpci
      }
      break;
    case 5:
      // Check Inst{11-9} ...
      switch (fieldFromInstruction(insn, 9, 3)) {
      case 0:
        return 2135; // tSTR
      case 1:
        return 2138; // tSTRH
      case 2:
        return 2136; // tSTRB
      case 3:
        return 2094; // tLDRSB
      case 4:
        return 2089; // tLDR
      case 5:
        return 2092; // tLDRH
      case 6:
        return 2090; // tLDRB
      case 7:
        return 2095; // tLDRSH
      }
      break;
    case 6:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2140; // tSTRi
      case 1:
        return 2097; // tLDRi
      }
      break;
    case 7:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2137; // tSTRBi
      case 1:
        return 2091; // tLDRBi
      }
      break;
    case 8:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2139; // tSTRHi
      case 1:
        return 2093; // tLDRHi
      }
      break;
    case 9:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2141; // tSTRspi
      case 1:
        return 2100; // tLDRspi
      }
      break;
    case 10:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2046; // tADDrPCi
      case 1:
        return 2048; // tADDrSPi
      }
      break;
    case 11:
      // Check Inst{11-10} ...
      switch (fieldFromInstruction(insn, 10, 2)) {
      case 0:
        // Check Inst{8} ...
        switch (fieldFromInstruction(insn, 8, 1)) {
        case 0:
          // Check Inst{7} ...
          switch (fieldFromInstruction(insn, 7, 1)) {
          case 0:
            // Check Inst{9} ...
            switch (fieldFromInstruction(insn, 9, 1)) {
            case 0:
              return 2050; // tADDspi
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 2148; // tSXTH
              case 1:
                return 2147; // tSXTB
              }
              break;
            }
            break;
          case 1:
            // Check Inst{9} ...
            switch (fieldFromInstruction(insn, 9, 1)) {
            case 0:
              return 2145; // tSUBspi
            case 1:
              // Check Inst{6} ...
              switch (fieldFromInstruction(insn, 6, 1)) {
              case 0:
                return 2154; // tUXTH
              case 1:
                return 2153; // tUXTB
              }
              break;
            }
            break;
          }
          break;
        case 1:
          return 2075; // tCBZ
        }
        break;
      case 1:
        // Check Inst{9} ...
        switch (fieldFromInstruction(insn, 9, 1)) {
        case 0:
          return 2123; // tPUSH
        case 1:
          // Check Inst{8-5} ...
          switch (fieldFromInstruction(insn, 5, 4)) {
          case 2:
            // Check Inst{3} ...
            switch (fieldFromInstruction(insn, 3, 1)) {
            case 0:
              return 2132; // tSETENDLE
            case 1:
              return 2131; // tSETENDBE
            }
            break;
          case 3:
            return 2083; // tCPS
          }
          break;
        }
        break;
      case 2:
        // Check Inst{8} ...
        switch (fieldFromInstruction(insn, 8, 1)) {
        case 0:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction(insn, 6, 2)) {
          case 0:
            // Check Inst{9-9} for singleton decoding...
            if (fieldFromInstruction(insn, 9, 1) == 1)
              return 2124; // tREV
            break;
          case 1:
            // Check Inst{9-9} for singleton decoding...
            if (fieldFromInstruction(insn, 9, 1) == 1)
              return 2125; // tREV16
            break;
          case 3:
            // Check Inst{9-9} for singleton decoding...
            if (fieldFromInstruction(insn, 9, 1) == 1)
              return 2126; // tREVSH
            break;
          }
          break;
        case 1:
          return 2074; // tCBNZ
        }
        break;
      case 3:
        // Check Inst{9} ...
        switch (fieldFromInstruction(insn, 9, 1)) {
        case 0:
          return 2121; // tPOP
        case 1:
          // Check Inst{8} ...
          switch (fieldFromInstruction(insn, 8, 1)) {
          case 0:
            return 2059; // tBKPT
          case 1:
            // Check Inst{7-0} ...
            switch (fieldFromInstruction(insn, 0, 8)) {
            case 0:
              return 2118; // tNOP
            case 16:
              return 2157; // tYIELD
            case 32:
              return 2155; // tWFE
            case 48:
              return 2156; // tWFI
            case 64:
              return 2133; // tSEV
            default:
              break; // fallthrough
            }
            return 1746; // t2IT
            break;
          }
          break;
        }
        break;
      }
      break;
    case 12:
      // Check Inst{11} ...
      switch (fieldFromInstruction(insn, 11, 1)) {
      case 0:
        return 2134; // tSTM_UPD
      case 1:
      {
        unsigned Rn = fieldFromInstruction(insn, 8, 3), list = fieldFromInstruction(insn, 0, 8);
        return ((list >> Rn) & 1) == 0 ? 2088 /* tLDM_UPD */ : 2087 /* tLDM */ ;
      }
      }
      break;
    case 13:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction(insn, 8, 4)) {
      case 14:
        return 2151; // tTRAP
      case 15:
        return 2146; // tSVC
      default:
        break; // fallthrough
      }
      return 2072; // tBcc
      break;
    case 14:
      // Check Inst{11-11} for singleton decoding...
      if (fieldFromInstruction(insn, 11, 1) == 0)
        return 2057; // tB
      break;
    }
    break;
  case 29:
    // Check Inst{22-21} ...
    switch (fieldFromInstruction(insn, 21, 2)) {
    case 0:
      // Check Inst{26-25} ...
      switch (fieldFromInstruction(insn, 25, 2)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            return 1931; // t2SRSDB
          case 3:
            return 1933; // t2SRSIA
          default:
            break; // fallthrough
          }
          return 1940; // t2STM
          break;
        case 1:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            return 1864; // t2RFEDB
          case 3:
            return 1866; // t2RFEIA
          default:
            break; // fallthrough
          }
          return 1749; // t2LDM
          break;
        }
        break;
      case 1:
        // Check Inst{24-23} ...
        switch (fieldFromInstruction(insn, 23, 2)) {
        case 0:
          // Check Inst{20-20} && Inst{14-4} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 4, 11) == 240)
            return 1998; // t2TSTrr
          else
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 1:
              // Check Inst{14-12} && Inst{7-4} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
                return 1697; // t2ANDSrr
              else
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 15)
                  return 1999; // t2TSTrs
                else
                  return 1698; // t2ANDSrs
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1700; // t2ANDrr
            else
              return 1701; // t2ANDrs
            break;
          break;
        case 1:
          // Check Inst{20-20} && Inst{14-4} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 4, 11) == 240)
            return 1994; // t2TEQrr
          else
            // Check Inst{20-20} && Inst{11-8} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
              return 1995; // t2TEQrs
            else
              // Check Inst{14-12} && Inst{7-4} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
                return 1743; // t2EORrr
              else
                return 1744; // t2EORrs
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1694; // t2ADDrr
            else
              return 1695; // t2ADDrs
            break;
          case 1:
            // Check Inst{14-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 11) == 240)
              return 1716; // t2CMNzrr
            else
              // Check Inst{14-12} && Inst{7-4} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
                return 1687; // t2ADDSrr
              else
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction(insn, 8, 4) == 15)
                  return 1717; // t2CMNzrs
                else
                  return 1688; // t2ADDSrs
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{26-25} ...
      switch (fieldFromInstruction(insn, 25, 2)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            return 1932; // t2SRSDBW
          case 3:
            return 1934; // t2SRSIAW
          default:
            break; // fallthrough
          }
          return 1941; // t2STM_UPD
          break;
        case 1:
          // Check Inst{24-23} ...
          switch (fieldFromInstruction(insn, 23, 2)) {
          case 0:
            return 1865; // t2RFEDBW
          case 3:
            return 1867; // t2RFEIAW
          default:
            break; // fallthrough
          }
          return 1751; // t2LDM_UPD
          break;
        }
        break;
      case 1:
        // Check Inst{24-23} ...
        switch (fieldFromInstruction(insn, 23, 2)) {
        case 0:
          // Check Inst{14-12} && Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
            return 1708; // t2BICrr
          else
            return 1709; // t2BICrs
          break;
        case 3:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1975; // t2SUBrr
            else
              return 1976; // t2SUBrs
            break;
          case 1:
            // Check Inst{14-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 11) == 240)
              return 1719; // t2CMPrr
            else
              // Check Inst{11-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 4) == 15)
                return 1720; // t2CMPrs
              else
                // Check Inst{14-12} && Inst{7-4} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
                  return 1968; // t2SUBSrr
                else
                  return 1969; // t2SUBSrs
            break;
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{26-24} ...
      switch (fieldFromInstruction(insn, 24, 3)) {
      case 0:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 0, 4) == 0)
              return 1951; // t2STREX
            break;
          case 1:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction(insn, 8, 4)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1990; // t2TBBgen
              break;
            case 15:
              // Check Inst{23-23} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 0 && fieldFromInstruction(insn, 0, 4) == 0)
                return 1763; // t2LDREX
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{23-23} && Inst{20-20} && Inst{15-8} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 8) == 240)
            return 1992; // t2TBHgen
          break;
        case 4:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-23} && Inst{11-8} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
              return 1952; // t2STREXB
            break;
          case 1:
            // Check Inst{23-23} && Inst{11-8} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15 && fieldFromInstruction(insn, 0, 4) == 15)
              return 1764; // t2LDREXB
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-23} && Inst{11-8} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
              return 1954; // t2STREXH
            break;
          case 1:
            // Check Inst{23-23} && Inst{11-8} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15 && fieldFromInstruction(insn, 0, 4) == 15)
              return 1766; // t2LDREXH
            break;
          }
          break;
        case 7:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1953; // t2STREXD
            break;
          case 1:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 0, 4) == 15)
              return 1765; // t2LDREXD
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 1950; // t2STRDi8
        case 1:
          return 1761; // t2LDRDi8
        }
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{20-16} ...
          switch (fieldFromInstruction(insn, 16, 5)) {
          case 15:
            // Check Inst{5-4} ...
            switch (fieldFromInstruction(insn, 4, 2)) {
            case 0:
              // Check Inst{14-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 9) == 60)
                return 1710; // t2BR_JT
              else
                // Check Inst{14-12} && Inst{7-6} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 6, 2) == 0)
                  return 1808; // t2MOVCCr
                else
                  return 1806; // t2MOVCClsl
              break;
            case 1:
              return 1807; // t2MOVCClsr
            case 2:
              return 1804; // t2MOVCCasr
            case 3:
              return 1809; // t2MOVCCror
            }
            break;
          case 31:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 5:
              // Check Inst{14-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 3) == 0)
                return 1817; // t2MOVsrl_flag
              break;
            case 6:
              // Check Inst{14-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 3) == 0)
                return 1816; // t2MOVsra_flag
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{14-12} ...
            switch (fieldFromInstruction(insn, 12, 3)) {
            case 0:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 1814; // t2MOVr
              else
                return 1831; // t2ORRrr
              break;
            }
            break;
          case 3:
            // Check Inst{19-16} && Inst{14-12} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15 && fieldFromInstruction(insn, 12, 3) == 0)
              return 1815; // t2MOVrx
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{5-4} ...
          switch (fieldFromInstruction(insn, 4, 2)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1798; // t2LSLri
            break;
          case 1:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1800; // t2LSRri
            break;
          case 2:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1702; // t2ASRri
            break;
          case 3:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1868; // t2RORri
            break;
          default:
            break; // fallthrough
          }
          return 1832; // t2ORRrs
          break;
          break;
          break;
        case 1:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction(insn, 4, 2)) {
          case 0:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 0)
              return 1833; // t2PKHBT
            break;
          case 2:
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 0)
              return 1834; // t2PKHTB
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1684; // t2ADCrr
            else
              return 1685; // t2ADCrs
            break;
          case 1:
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1681; // t2ADCSrr
            else
              return 1682; // t2ADCSrs
            break;
          }
          break;
        case 1:
          // Check Inst{14-12} && Inst{7-4} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
            return 1873; // t2RSBrr
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 1871; // t2RSBSrs
            else
              return 1874; // t2RSBrs
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{26-24} ...
      switch (fieldFromInstruction(insn, 24, 3)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 1948; // t2STRD_POST
        case 1:
          return 1759; // t2LDRD_POST
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          return 1949; // t2STRD_PRE
        case 1:
          return 1760; // t2LDRD_PRE
        }
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction(insn, 23, 1)) {
        case 0:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction(insn, 4, 4)) {
          case 0:
            // Check Inst{14-12} ...
            switch (fieldFromInstruction(insn, 12, 3)) {
            case 0:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction(insn, 16, 4) == 15)
                return 1824; // t2MVNr
              else
                return 1828; // t2ORNrr
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 4) == 15)
            return 1825; // t2MVNs
          else
            return 1829; // t2ORNrs
          break;
          break;
        }
        break;
      case 3:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1882; // t2SBCrr
            else
              return 1883; // t2SBCrs
            break;
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 4, 4) == 0)
              return 1879; // t2SBCSrr
            else
              return 1880; // t2SBCSrs
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 30:
    // Check Inst{15} ...
    switch (fieldFromInstruction(insn, 15, 1)) {
    case 0:
      // Check Inst{25-22} ...
      switch (fieldFromInstruction(insn, 22, 4)) {
      case 0:
        // Check Inst{21} ...
        switch (fieldFromInstruction(insn, 21, 1)) {
        case 0:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 1997; // t2TSTri
          else
            // Check Inst{20-20} for singleton decoding...
            if (fieldFromInstruction(insn, 20, 1) == 1)
              return 1696; // t2ANDSri
            else
              return 1699; // t2ANDri
          break;
        case 1:
          return 1707; // t2BICri
        }
        break;
      case 1:
        // Check Inst{21} ...
        switch (fieldFromInstruction(insn, 21, 1)) {
        case 0:
          // Check Inst{20-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 5) == 15)
            return 1805; // t2MOVCCi
          else
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 4) == 15)
              return 1811; // t2MOVi
            else
              return 1830; // t2ORRri
          break;
        case 1:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 4) == 15)
            return 1823; // t2MVNi
          else
            return 1827; // t2ORNri
          break;
        }
        break;
      case 2:
        // Check Inst{21} ...
        switch (fieldFromInstruction(insn, 21, 1)) {
        case 0:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 8, 4) == 15)
            return 1993; // t2TEQri
          else
            return 1742; // t2EORri
          break;
        }
        break;
      case 4:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction(insn, 20, 2)) {
        case 0:
          return 1692; // t2ADDri
        case 1:
          // Check Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 8, 4) == 15)
            return 1715; // t2CMNzri
          else
            return 1686; // t2ADDSri
          break;
        }
        break;
      case 5:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction(insn, 20, 2)) {
        case 0:
          return 1683; // t2ADCri
        case 1:
          return 1680; // t2ADCSri
        case 2:
          return 1881; // t2SBCri
        case 3:
          return 1878; // t2SBCSri
        }
        break;
      case 6:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction(insn, 20, 2)) {
        case 2:
          return 1973; // t2SUBri
        case 3:
          // Check Inst{11-8} for singleton decoding...
          if (fieldFromInstruction(insn, 8, 4) == 15)
            return 1718; // t2CMPri
          else
            return 1967; // t2SUBSri
          break;
        }
        break;
      case 7:
        // Check Inst{21} ...
        switch (fieldFromInstruction(insn, 21, 1)) {
        case 0:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 1)
            return 1870; // t2RSBSri
          else
            return 1872; // t2RSBri
          break;
        }
        break;
      case 8:
        // Check Inst{21-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 2) == 0)
          return 1693; // t2ADDri12
        break;
      case 9:
        // Check Inst{21-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 2) == 0)
          return 1812; // t2MOVi16
        break;
      case 10:
        // Check Inst{21-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 2) == 2)
          return 1974; // t2SUBri12
        break;
      case 11:
        // Check Inst{21-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 2) == 0)
          return 1810; // t2MOVTi16
        break;
      case 12:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{21-21} && Inst{14-12} && Inst{7-6} for singleton decoding...
          if (fieldFromInstruction(insn, 21, 1) == 1 && fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 6, 2) == 0)
            return 1936; // t2SSAT16
          else
            return 1935; // t2SSAT
          break;
        }
        break;
      case 13:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction(insn, 20, 2)) {
        case 0:
          return 1884; // t2SBFX
        case 2:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 4) == 15)
            return 1705; // t2BFC
          else
            return 1706; // t2BFI
          break;
        }
        break;
      case 14:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{21-21} && Inst{14-12} && Inst{7-6} for singleton decoding...
          if (fieldFromInstruction(insn, 21, 1) == 1 && fieldFromInstruction(insn, 12, 3) == 0 && fieldFromInstruction(insn, 6, 2) == 0)
            return 2023; // t2USAT16
          else
            return 2022; // t2USAT
          break;
        }
        break;
      case 15:
        // Check Inst{21-20} for singleton decoding...
        if (fieldFromInstruction(insn, 20, 2) == 0)
          return 2003; // t2UBFX
        break;
      }
      break;
    case 1:
      // Check Inst{12} ...
      switch (fieldFromInstruction(insn, 12, 1)) {
      case 0:
        // Check Inst{14} ...
        switch (fieldFromInstruction(insn, 14, 1)) {
        case 0:
          // Check Inst{11-0} ...
          switch (fieldFromInstruction(insn, 0, 12)) {
          case 3919:
            // Check Inst{26-16} && Inst{13-13} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 11) == 959 && fieldFromInstruction(insn, 13, 1) == 0)
              return 1741; // t2DSBsy
            break;
          case 3935:
            // Check Inst{26-16} && Inst{13-13} for singleton decoding...
            if (fieldFromInstruction(insn, 16, 11) == 959 && fieldFromInstruction(insn, 13, 1) == 0)
              return 1733; // t2DMBsy
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{26-20} ...
          switch (fieldFromInstruction(insn, 20, 7)) {
          case 56:
            return 1820; // t2MSR
          case 57:
            return 1821; // t2MSRsys
          case 58:
            // Check Inst{10-0} ...
            switch (fieldFromInstruction(insn, 0, 11)) {
            case 0:
              return 1826; // t2NOP
            case 1:
              return 2041; // t2YIELD
            case 2:
              return 2039; // t2WFE
            case 3:
              return 2040; // t2WFI
            case 4:
              return 1887; // t2SEV
            default:
              break; // fallthrough
            }
            // Check Inst{10-4} for singleton decoding...
            if (fieldFromInstruction(insn, 4, 7) == 15)
              return 1725; // t2DBG
            else
              return 1724; // t2CPS
            break;
            break;
          case 59:
            // Check Inst{7-4} ...
            switch (fieldFromInstruction(insn, 4, 4)) {
            case 2:
              return 1713; // t2CLREX
            case 4:
              // Check Inst{3-0} ...
              switch (fieldFromInstruction(insn, 0, 4)) {
              case 2:
                return 1739; // t2DSBoshst
              case 3:
                return 1738; // t2DSBosh
              case 6:
                return 1737; // t2DSBnshst
              case 7:
                return 1736; // t2DSBnsh
              case 10:
                return 1735; // t2DSBishst
              case 11:
                return 1734; // t2DSBish
              case 14:
                return 1740; // t2DSBst
              }
              break;
            case 5:
              // Check Inst{3-0} ...
              switch (fieldFromInstruction(insn, 0, 4)) {
              case 2:
                return 1731; // t2DMBoshst
              case 3:
                return 1730; // t2DMBosh
              case 6:
                return 1729; // t2DMBnshst
              case 7:
                return 1728; // t2DMBnsh
              case 10:
                return 1727; // t2DMBishst
              case 11:
                return 1726; // t2DMBish
              case 14:
                return 1732; // t2DMBst
              }
              break;
            case 6:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction(insn, 0, 4) == 15)
                return 1745; // t2ISBsy
              break;
            }
            break;
          case 60:
            return 1711; // t2BXJ
          case 62:
            return 1818; // t2MRS
          case 63:
            return 1819; // t2MRSsys
          case 127:
            // Check Inst{13-13} for singleton decoding...
            if (fieldFromInstruction(insn, 13, 1) == 0)
              return 1894; // t2SMC
            break;
          default:
            break; // fallthrough
          }
          return 1712; // t2Bcc
          break;
          break;
        case 1:
          return 2062; // tBLXi_r9
        }
        break;
      case 1:
        // Check Inst{14} ...
        switch (fieldFromInstruction(insn, 14, 1)) {
        case 0:
          return 1704; // t2B
        case 1:
          return 2065; // tBLr9
        }
        break;
      }
      break;
    }
    break;
  case 31:
    // Check Inst{22-21} ...
    switch (fieldFromInstruction(insn, 21, 2)) {
    case 0:
      // Check Inst{26-24} ...
      switch (fieldFromInstruction(insn, 24, 3)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 4) == 0)
                return 1947; // t2STRBs
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1943; // t2STRB_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9-9} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 1) == 1)
                  return 1942; // t2STRBT
                else
                  return 1946; // t2STRBi8
                break;
              case 1:
                return 1944; // t2STRB_PRE
              }
              break;
            }
            break;
          case 1:
            return 1945; // t2STRBi12
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} ...
              switch (fieldFromInstruction(insn, 6, 4)) {
              case 0:
                // Check Inst{15-12} && Inst{5-4} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 2) == 0)
                  return 1843; // t2PLDr
                else
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 1844; // t2PLDs
                  else
                    return 1758; // t2LDRBs
                break;
              }
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1753; // t2LDRB_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9} ...
                switch (fieldFromInstruction(insn, 9, 1)) {
                case 0:
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 1841; // t2PLDi8
                  break;
                case 1:
                  return 1752; // t2LDRBT
                default:
                  break; // fallthrough
                }
                return 1756; // t2LDRBi8
                break;
              case 1:
                return 1754; // t2LDRB_PRE
              }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 1840; // t2PLDi12
            else
              return 1755; // t2LDRBi12
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{19-16} ...
          switch (fieldFromInstruction(insn, 16, 4)) {
          case 15:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 1842; // t2PLDpci
            else
              return 1757; // t2LDRBpci
            break;
          }
          break;
          break;
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} ...
              switch (fieldFromInstruction(insn, 6, 4)) {
              case 0:
                // Check Inst{15-12} && Inst{5-4} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 2) == 0)
                  return 1848; // t2PLIr
                else
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 1849; // t2PLIs
                  else
                    return 1780; // t2LDRSBs
                break;
              }
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1775; // t2LDRSB_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9} ...
                switch (fieldFromInstruction(insn, 9, 1)) {
                case 0:
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 1846; // t2PLIi8
                  break;
                case 1:
                  return 1774; // t2LDRSBT
                default:
                  break; // fallthrough
                }
                return 1778; // t2LDRSBi8
                break;
              case 1:
                return 1776; // t2LDRSB_PRE
              }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 1845; // t2PLIi12
            else
              return 1777; // t2LDRSBi12
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{19-16} ...
          switch (fieldFromInstruction(insn, 16, 4)) {
          case 15:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 1847; // t2PLIpci
            else
              return 1779; // t2LDRSBpci
            break;
          }
          break;
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction(insn, 7, 1)) {
        case 0:
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1799; // t2LSLrr
              break;
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction(insn, 20, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1876; // t2SADD8
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1875; // t2SADD16
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1852; // t2QADD8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1851; // t2QADD16
              break;
            }
            break;
          case 2:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1889; // t2SHADD8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1888; // t2SHADD16
              break;
            }
            break;
          case 4:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2001; // t2UADD8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2000; // t2UADD16
              break;
            }
            break;
          case 5:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2015; // t2UQADD8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2014; // t2UQADD16
              break;
            }
            break;
          case 6:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2006; // t2UHADD8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2005; // t2UHADD16
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction(insn, 12, 4)) {
              case 15:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 1987; // t2SXTHr
                  else
                    return 1981; // t2SXTAHrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 1988; // t2SXTHr_rot
                else
                  return 1982; // t2SXTAHrr_rot
                break;
                break;
              }
              break;
            case 1:
              // Check Inst{6-4} ...
              switch (fieldFromInstruction(insn, 4, 3)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1850; // t2QADD
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1854; // t2QDADD
                break;
              case 2:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1857; // t2QSUB
                break;
              case 3:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1855; // t2QDSUB
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction(insn, 12, 4)) {
              case 15:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 2037; // t2UXTHr
                  else
                    return 2031; // t2UXTAHrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2038; // t2UXTHr_rot
                else
                  return 2032; // t2UXTAHrr_rot
                break;
                break;
              }
              break;
            case 1:
              // Check Inst{6-4} ...
              switch (fieldFromInstruction(insn, 4, 3)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1861; // t2REV
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1862; // t2REV16
                break;
              case 2:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1860; // t2RBIT
                break;
              case 3:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1863; // t2REVSH
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1822; // t2MUL
              else
                return 1802; // t2MLA
              break;
            case 1:
              return 1924; // t2SMULL
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1922; // t2SMULBB
              else
                return 1895; // t2SMLABB
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 0)
              return 1803; // t2MLS
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1923; // t2SMULBT
              else
                return 1896; // t2SMLABT
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1925; // t2SMULTB
              else
                return 1906; // t2SMLATB
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1926; // t2SMULTT
              else
                return 1907; // t2SMLATT
              break;
            }
            break;
          }
          break;
        case 15:
          // Check Inst{23-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
            return 1885; // t2SDIV
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{26-24} ...
      switch (fieldFromInstruction(insn, 24, 3)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 4) == 0)
                return 1960; // t2STRHs
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1956; // t2STRH_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9-9} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 1) == 1)
                  return 1955; // t2STRHT
                else
                  return 1959; // t2STRHi8
                break;
              case 1:
                return 1957; // t2STRH_PRE
              }
              break;
            }
            break;
          case 1:
            return 1958; // t2STRHi12
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} ...
              switch (fieldFromInstruction(insn, 6, 4)) {
              case 0:
                // Check Inst{15-12} && Inst{5-4} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 2) == 0)
                  return 1838; // t2PLDWr
                else
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 1839; // t2PLDWs
                  else
                    return 1773; // t2LDRHs
                break;
              }
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1768; // t2LDRH_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9} ...
                switch (fieldFromInstruction(insn, 9, 1)) {
                case 0:
                  // Check Inst{15-12} for singleton decoding...
                  if (fieldFromInstruction(insn, 12, 4) == 15)
                    return 1836; // t2PLDWi8
                  break;
                case 1:
                  return 1767; // t2LDRHT
                default:
                  break; // fallthrough
                }
                return 1771; // t2LDRHi8
                break;
              case 1:
                return 1769; // t2LDRH_PRE
              }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 1835; // t2PLDWi12
            else
              return 1770; // t2LDRHi12
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{19-16} ...
          switch (fieldFromInstruction(insn, 16, 4)) {
          case 15:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 1837; // t2PLDWpci
            else
              return 1772; // t2LDRHpci
            break;
          }
          break;
          break;
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 4) == 0)
                return 1787; // t2LDRSHs
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1782; // t2LDRSH_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9-9} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 1) == 1)
                  return 1781; // t2LDRSHT
                else
                  return 1785; // t2LDRSHi8
                break;
              case 1:
                return 1783; // t2LDRSH_PRE
              }
              break;
            }
            break;
          case 1:
            return 1784; // t2LDRSHi12
          default:
            break; // fallthrough
          }
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 4) == 15)
            return 1786; // t2LDRSHpci
          break;
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction(insn, 7, 1)) {
        case 0:
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1801; // t2LSRrr
              break;
            case 1:
              // Check Inst{20-20} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1877; // t2SASX
              break;
            }
            break;
          case 1:
            // Check Inst{23-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
              return 1853; // t2QASX
            break;
          case 2:
            // Check Inst{23-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
              return 1890; // t2SHASX
            break;
          case 4:
            // Check Inst{23-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
              return 2002; // t2UASX
            break;
          case 5:
            // Check Inst{23-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
              return 2016; // t2UQASX
            break;
          case 6:
            // Check Inst{23-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
              return 2007; // t2UHASX
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction(insn, 12, 4)) {
              case 15:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 1983; // t2SXTB16r
                  else
                    return 1977; // t2SXTAB16rr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 1984; // t2SXTB16r_rot
                else
                  return 1978; // t2SXTAB16rr_rot
                break;
                break;
              }
              break;
            case 1:
              // Check Inst{15-12} && Inst{6-4} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 3) == 0)
                return 1886; // t2SEL
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction(insn, 12, 4)) {
              case 15:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 2033; // t2UXTB16r
                  else
                    return 2027; // t2UXTAB16rr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2034; // t2UXTB16r_rot
                else
                  return 2028; // t2UXTAB16rr_rot
                break;
                break;
              }
              break;
            case 1:
              // Check Inst{15-12} && Inst{6-4} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15 && fieldFromInstruction(insn, 4, 3) == 0)
                return 1714; // t2CLZ
              break;
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1920; // t2SMUAD
              else
                return 1897; // t2SMLAD
              break;
            case 1:
              return 2013; // t2UMULL
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1927; // t2SMULWB
              else
                return 1908; // t2SMLAWB
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1921; // t2SMUADX
              else
                return 1898; // t2SMLADX
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1928; // t2SMULWT
              else
                return 1909; // t2SMLAWT
              break;
            }
            break;
          }
          break;
        case 15:
          // Check Inst{23-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2004; // t2UDIV
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{26-24} ...
      switch (fieldFromInstruction(insn, 24, 3)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction(insn, 20, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 4) == 0)
                return 1966; // t2STRs
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1962; // t2STR_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9-9} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 1) == 1)
                  return 1961; // t2STRT
                else
                  return 1965; // t2STRi8
                break;
              case 1:
                return 1963; // t2STR_PRE
              }
              break;
            }
            break;
          case 1:
            return 1964; // t2STRi12
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction(insn, 23, 1)) {
          case 0:
            // Check Inst{11-10} ...
            switch (fieldFromInstruction(insn, 10, 2)) {
            case 0:
              // Check Inst{9-6} for singleton decoding...
              if (fieldFromInstruction(insn, 6, 4) == 0)
                return 1795; // t2LDRs
              break;
            case 2:
              // Check Inst{8-8} for singleton decoding...
              if (fieldFromInstruction(insn, 8, 1) == 1)
                return 1789; // t2LDR_POST
              break;
            case 3:
              // Check Inst{8} ...
              switch (fieldFromInstruction(insn, 8, 1)) {
              case 0:
                // Check Inst{9-9} for singleton decoding...
                if (fieldFromInstruction(insn, 9, 1) == 1)
                  return 1788; // t2LDRT
                else
                  return 1792; // t2LDRi8
                break;
              case 1:
                return 1790; // t2LDR_PRE
              }
              break;
            }
            break;
          case 1:
            return 1791; // t2LDRi12
          default:
            break; // fallthrough
          }
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction(insn, 16, 4) == 15)
            return 1793; // t2LDRpci
          break;
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction(insn, 7, 1)) {
        case 0:
          // Check Inst{6-4} ...
          switch (fieldFromInstruction(insn, 4, 3)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1703; // t2ASRrr
              break;
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction(insn, 20, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1939; // t2SSUB8
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction(insn, 12, 4) == 15)
                  return 1938; // t2SSUB16
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1859; // t2QSUB8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1858; // t2QSUB16
              break;
            }
            break;
          case 2:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1893; // t2SHSUB8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 1892; // t2SHSUB16
              break;
            }
            break;
          case 4:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2026; // t2USUB8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2025; // t2USUB16
              break;
            }
            break;
          case 5:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2019; // t2UQSUB8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2018; // t2UQSUB16
              break;
            }
            break;
          case 6:
            // Check Inst{20} ...
            switch (fieldFromInstruction(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2010; // t2UHSUB8
              break;
            case 1:
              // Check Inst{23-23} && Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 12, 4) == 15)
                return 2009; // t2UHSUB16
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 1985; // t2SXTBr
                  else
                    return 1979; // t2SXTABrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 1986; // t2SXTBr_rot
                else
                  return 1980; // t2SXTABrr_rot
                break;
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction(insn, 12, 4)) {
            case 15:
              // Check Inst{23} ...
              switch (fieldFromInstruction(insn, 23, 1)) {
              case 0:
                // Check Inst{5-4} ...
                switch (fieldFromInstruction(insn, 4, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction(insn, 16, 4) == 15)
                    return 2035; // t2UXTBr
                  else
                    return 2029; // t2UXTABrr
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction(insn, 16, 4) == 15)
                  return 2036; // t2UXTBr_rot
                else
                  return 2030; // t2UXTABrr_rot
                break;
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1929; // t2SMUSD
              else
                return 1910; // t2SMLSD
              break;
            case 1:
              return 1899; // t2SMLAL
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1918; // t2SMMUL
              else
                return 1914; // t2SMMLA
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1930; // t2SMUSDX
              else
                return 1911; // t2SMLSDX
              break;
            }
            break;
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction(insn, 12, 4) == 15)
                return 1919; // t2SMMULR
              else
                return 1915; // t2SMMLAR
              break;
            }
            break;
          }
          break;
        case 8:
          // Check Inst{23-23} && Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0)
            return 1900; // t2SMLALBB
          break;
        case 9:
          // Check Inst{23-23} && Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0)
            return 1901; // t2SMLALBT
          break;
        case 10:
          // Check Inst{23-23} && Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0)
            return 1904; // t2SMLALTB
          break;
        case 11:
          // Check Inst{23-23} && Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 23, 1) == 1 && fieldFromInstruction(insn, 20, 1) == 0)
            return 1905; // t2SMLALTT
          break;
        case 12:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1902; // t2SMLALD
            break;
          case 1:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1912; // t2SMLSLD
            break;
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1903; // t2SMLALDX
            break;
          case 1:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction(insn, 23, 1) == 1)
              return 1913; // t2SMLSLDX
            break;
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{7-4} ...
      switch (fieldFromInstruction(insn, 4, 4)) {
      case 0:
        // Check Inst{26-23} ...
        switch (fieldFromInstruction(insn, 23, 4)) {
        case 4:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 12, 4) == 15)
            return 1869; // t2RORrr
          break;
        case 5:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 1937; // t2SSAX
          break;
        case 6:
          // Check Inst{20} ...
          switch (fieldFromInstruction(insn, 20, 1)) {
          case 0:
            return 1916; // t2SMMLS
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction(insn, 12, 4) == 15)
              return 2020; // t2USAD8
            else
              return 2021; // t2USADA8
            break;
          }
          break;
        case 7:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0)
            return 2012; // t2UMLAL
          break;
        }
        break;
      case 1:
        // Check Inst{26-23} ...
        switch (fieldFromInstruction(insn, 23, 4)) {
        case 5:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 1856; // t2QSAX
          break;
        case 6:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0)
            return 1917; // t2SMMLSR
          break;
        }
        break;
      case 2:
        // Check Inst{26-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 4) == 5 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
          return 1891; // t2SHSAX
        break;
      case 4:
        // Check Inst{26-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 4) == 5 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
          return 2024; // t2USAX
        break;
      case 5:
        // Check Inst{26-23} && Inst{20-20} && Inst{15-12} for singleton decoding...
        if (fieldFromInstruction(insn, 23, 4) == 5 && fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
          return 2017; // t2UQSAX
        break;
      case 6:
        // Check Inst{26-23} ...
        switch (fieldFromInstruction(insn, 23, 4)) {
        case 5:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0 && fieldFromInstruction(insn, 12, 4) == 15)
            return 2008; // t2UHSAX
          break;
        case 7:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction(insn, 20, 1) == 0)
            return 2011; // t2UMAAL
          break;
        }
        break;
      }
      break;
    }
    break;
  }

  return 0;
}

} // End llvm namespace 
