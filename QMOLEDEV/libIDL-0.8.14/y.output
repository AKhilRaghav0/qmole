State 12 conflicts: 1 shift/reduce
State 13 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce
State 15 conflicts: 1 shift/reduce
State 16 conflicts: 1 shift/reduce
State 18 conflicts: 1 shift/reduce
State 57 conflicts: 2 shift/reduce
State 97 conflicts: 1 shift/reduce
State 175 conflicts: 1 shift/reduce
State 194 conflicts: 1 reduce/reduce
State 199 conflicts: 1 shift/reduce
State 231 conflicts: 1 shift/reduce
State 247 conflicts: 1 reduce/reduce
State 298 conflicts: 1 shift/reduce
State 299 conflicts: 1 shift/reduce
State 300 conflicts: 1 shift/reduce
State 301 conflicts: 1 shift/reduce
State 302 conflicts: 1 shift/reduce
State 303 conflicts: 1 shift/reduce
State 314 conflicts: 3 shift/reduce
State 355 conflicts: 1 shift/reduce
State 358 conflicts: 1 reduce/reduce
State 368 conflicts: 1 shift/reduce


Grammar

    0 $accept: specification $end

    1 specification: /* empty */
    2              | definition_list

    3 z_definition_list: /* empty */
    4                  | definition_list

    5 definition_list: definition
    6                | definition_list definition

    7 check_semicolon: ';'
    8                | /* empty */

    9 useless_semicolon: ';'

   10 check_comma: ','
   11            | /* empty */

   12 illegal_ident: scoped_name

   13 definition: type_dcl check_semicolon
   14           | const_dcl check_semicolon
   15           | except_dcl check_semicolon
   16           | interface check_semicolon
   17           | module check_semicolon
   18           | codefrag
   19           | srcfile
   20           | illegal_ident
   21           | useless_semicolon

   22 module_declspec: z_declspec TOK_MODULE

   23 $@1: /* empty */

   24 module: module_declspec new_or_prev_scope $@1 '{' z_definition_list '}' pop_scope

   25 interface_catch_ident: new_or_prev_scope
   26                      | TOK_OBJECT
   27                      | TOK_TYPECODE

   28 $@2: /* empty */

   29 $@3: /* empty */

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' interface_body '}' pop_scope
   31          | z_declspec z_props TOK_INTERFACE interface_catch_ident pop_scope

   32 z_inheritance: /* empty */
   33              | ':' scoped_name_list

   34 scoped_name_list: scoped_name
   35                 | scoped_name_list check_comma scoped_name

   36 interface_body: export_list

   37 export_list: /* empty */
   38            | export_list export

   39 export: type_dcl check_semicolon
   40       | except_dcl check_semicolon
   41       | op_dcl check_semicolon
   42       | attr_dcl check_semicolon
   43       | const_dcl check_semicolon
   44       | codefrag
   45       | useless_semicolon

   46 type_dcl: z_declspec type_dcl_def

   47 type_dcl_def: z_props TOK_TYPEDEF type_declarator
   48             | struct_type
   49             | union_type
   50             | enum_type
   51             | z_props TOK_NATIVE simple_declarator

   52 $@4: /* empty */

   53 type_dcl_def: z_props TOK_NATIVE simple_declarator '(' $@4 TOK_NATIVE_TYPE

   54 type_declarator: type_spec declarator_list

   55 type_spec: simple_type_spec
   56          | constr_type_spec

   57 simple_type_spec: base_type_spec
   58                 | template_type_spec
   59                 | scoped_name

   60 constr_type_spec: struct_type
   61                 | union_type
   62                 | enum_type

   63 z_new_ident_catch: /* empty */
   64                  | new_ident

   65 z_new_scope_catch: /* empty */
   66                  | new_scope

   67 @5: /* empty */

   68 @6: /* empty */

   69 struct_type: z_props TOK_STRUCT @5 z_new_scope_catch '{' @6 member_list '}' pop_scope

   70 @7: /* empty */

   71 @8: /* empty */

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope

   73 switch_type_spec: integer_type
   74                 | char_type
   75                 | boolean_type
   76                 | enum_type
   77                 | scoped_name

   78 switch_body: case_stmt_list

   79 case_stmt_list: case_stmt
   80               | case_stmt_list case_stmt

   81 case_stmt: case_label_list element_spec check_semicolon

   82 element_spec: type_spec declarator

   83 case_label_list: case_label
   84                | case_label_list case_label

   85 case_label: TOK_CASE const_exp ':'
   86           | TOK_DEFAULT ':'

   87 const_dcl: z_declspec const_dcl_def

   88 const_dcl_def: TOK_CONST const_type new_ident '=' const_exp

   89 except_dcl: z_declspec except_dcl_def

   90 except_dcl_def: TOK_EXCEPTION new_scope '{' member_zlist '}' pop_scope

   91 member_zlist: /* empty */
   92             | member_zlist member

   93 is_readonly: /* empty */
   94            | TOK_READONLY

   95 attr_dcl: z_declspec attr_dcl_def

   96 @9: /* empty */

   97 attr_dcl_def: z_props is_readonly TOK_ATTRIBUTE @9 param_type_spec simple_declarator_list

   98 param_type_spec: op_param_type_spec
   99                | TOK_VOID

  100 op_param_type_spec_illegal: sequence_type
  101                           | constr_type_spec

  102 op_param_type_spec: base_type_spec
  103                   | string_type
  104                   | wide_string_type
  105                   | fixed_pt_type
  106                   | scoped_name
  107                   | op_param_type_spec_illegal

  108 is_oneway: /* empty */
  109          | TOK_ONEWAY

  110 op_dcl: z_declspec op_dcl_def

  111 op_dcl_def: z_props is_oneway op_type_spec new_scope parameter_dcls pop_scope is_raises_expr is_context_expr

  112 @10: /* empty */

  113 op_type_spec: @10 op_param_type_spec
  114             | TOK_VOID

  115 is_varargs: /* empty */
  116           | TOK_VARARGS

  117 is_cvarargs: /* empty */
  118            | ',' TOK_VARARGS

  119 parameter_dcls: '(' param_dcl_list is_cvarargs ')'
  120               | '(' is_varargs ')'

  121 param_dcl_list: param_dcl
  122               | param_dcl_list check_comma param_dcl

  123 @11: /* empty */

  124 param_dcl: z_props param_attribute @11 param_type_spec simple_declarator

  125 param_attribute: TOK_IN
  126                | TOK_OUT
  127                | TOK_INOUT
  128                | param_type_spec

  129 is_raises_expr: /* empty */
  130               | raises_expr

  131 is_context_expr: /* empty */
  132                | context_expr

  133 raises_expr: TOK_RAISES '(' scoped_name_list ')'

  134 context_expr: TOK_CONTEXT '(' string_lit_list ')'

  135 const_type: integer_type
  136           | char_type
  137           | octet_type
  138           | wide_char_type
  139           | boolean_type
  140           | floating_pt_type
  141           | string_type
  142           | wide_string_type
  143           | fixed_pt_const_type
  144           | scoped_name

  145 const_exp: or_expr

  146 or_expr: xor_expr
  147        | or_expr '|' xor_expr

  148 xor_expr: and_expr
  149         | xor_expr '^' and_expr

  150 and_expr: shift_expr
  151         | and_expr '&' shift_expr

  152 shift_expr: add_expr
  153           | shift_expr TOK_OP_SHR add_expr
  154           | shift_expr TOK_OP_SHL add_expr

  155 add_expr: mult_expr
  156         | add_expr '+' mult_expr
  157         | add_expr '-' mult_expr

  158 mult_expr: unary_expr
  159          | mult_expr '*' unary_expr
  160          | mult_expr '/' unary_expr
  161          | mult_expr '%' unary_expr

  162 unary_expr: unary_op primary_expr
  163           | primary_expr

  164 unary_op: '-'
  165         | '+'
  166         | '~'

  167 primary_expr: scoped_name
  168             | literal
  169             | '(' const_exp ')'

  170 literal: integer_lit
  171        | string_lit
  172        | char_lit
  173        | fixed_pt_lit
  174        | floating_pt_lit
  175        | boolean_lit

  176 @12: /* empty */

  177 enum_type: z_props TOK_ENUM @12 z_new_ident_catch '{' enumerator_list '}'

  178 scoped_name: ns_scoped_name

  179 ns_scoped_name: ns_prev_ident
  180               | TOK_OP_SCOPE ns_global_ident
  181               | ns_scoped_name TOK_OP_SCOPE ident

  182 enumerator_list: new_ident
  183                | enumerator_list check_comma new_ident

  184 member_list: member
  185            | member_list member

  186 member: type_spec declarator_list check_semicolon

  187 base_type_spec: floating_pt_type
  188               | integer_type
  189               | char_type
  190               | wide_char_type
  191               | boolean_type
  192               | octet_type
  193               | any_type
  194               | object_type
  195               | typecode_type

  196 template_type_spec: sequence_type
  197                   | string_type
  198                   | wide_string_type
  199                   | fixed_pt_type

  200 sequence_type: TOK_SEQUENCE '<' simple_type_spec ',' positive_int_const '>'
  201              | TOK_SEQUENCE '<' simple_type_spec '>'

  202 floating_pt_type: TOK_FLOAT
  203                 | TOK_DOUBLE
  204                 | TOK_LONG TOK_DOUBLE

  205 fixed_pt_type: TOK_FIXED '<' positive_int_const ',' integer_lit '>'

  206 fixed_pt_const_type: TOK_FIXED

  207 integer_type: signed_int
  208             | unsigned_int

  209 signed_int: signed_short_int
  210           | signed_long_int
  211           | signed_longlong_int

  212 signed_short_int: TOK_SHORT

  213 signed_long_int: TOK_LONG

  214 signed_longlong_int: TOK_LONG TOK_LONG

  215 unsigned_int: unsigned_short_int
  216             | unsigned_long_int
  217             | unsigned_longlong_int

  218 unsigned_short_int: TOK_UNSIGNED TOK_SHORT

  219 unsigned_long_int: TOK_UNSIGNED TOK_LONG

  220 unsigned_longlong_int: TOK_UNSIGNED TOK_LONG TOK_LONG

  221 char_type: TOK_CHAR

  222 wide_char_type: TOK_WCHAR

  223 boolean_type: TOK_BOOLEAN

  224 octet_type: TOK_OCTET

  225 any_type: TOK_ANY

  226 object_type: TOK_OBJECT

  227 typecode_type: TOK_TYPECODE

  228 string_type: TOK_STRING '<' positive_int_const '>'
  229            | TOK_STRING

  230 wide_string_type: TOK_WSTRING '<' positive_int_const '>'
  231                 | TOK_WSTRING

  232 declarator_list: declarator
  233                | declarator_list check_comma declarator

  234 declarator: simple_declarator
  235           | complex_declarator

  236 simple_declarator: new_ident

  237 complex_declarator: array_declarator

  238 simple_declarator_list: simple_declarator
  239                       | simple_declarator_list check_comma simple_declarator

  240 array_declarator: new_ident fixed_array_size_list

  241 fixed_array_size_list: fixed_array_size
  242                      | fixed_array_size_list fixed_array_size

  243 fixed_array_size: '[' positive_int_const ']'
  244                 | '[' ']'

  245 prop_hash: TOK_PROP_KEY TOK_PROP_VALUE
  246          | prop_hash ',' TOK_PROP_KEY TOK_PROP_VALUE
  247          | TOK_PROP_KEY
  248          | prop_hash ',' TOK_PROP_KEY

  249 ident: TOK_IDENT

  250 new_ident: ns_new_ident

  251 new_scope: ns_new_ident

  252 new_or_prev_scope: cur_ns_new_or_prev_ident

  253 pop_scope: /* empty */

  254 ns_new_ident: ident

  255 ns_prev_ident: ident

  256 cur_ns_new_or_prev_ident: ident

  257 ns_global_ident: ident

  258 string_lit_list: string_lit
  259                | string_lit_list check_comma string_lit

  260 positive_int_const: const_exp

  261 z_declspec: /* empty */
  262           | TOK_DECLSPEC

  263 z_props: /* empty */

  264 $@13: /* empty */

  265 z_props: '[' $@13 prop_hash ']'

  266 integer_lit: TOK_INTEGER

  267 string_lit: dqstring_cat

  268 char_lit: sqstring

  269 fixed_pt_lit: TOK_FIXEDP

  270 floating_pt_lit: TOK_FLOATP

  271 boolean_lit: TOK_TRUE
  272            | TOK_FALSE

  273 codefrag: z_declspec TOK_CODEFRAG

  274 srcfile: TOK_SRCFILE

  275 dqstring_cat: dqstring
  276             | dqstring_cat dqstring

  277 dqstring: TOK_DQSTRING

  278 sqstring: TOK_SQSTRING


Terminals, with rules where they appear

$end (0) 0
'%' (37) 161
'&' (38) 151
'(' (40) 53 72 119 120 133 134 169
')' (41) 72 119 120 133 134 169
'*' (42) 159
'+' (43) 156 165
',' (44) 10 118 200 205 246 248
'-' (45) 157 164
'/' (47) 160
':' (58) 33 85 86
';' (59) 7 9
'<' (60) 200 201 205 228 230
'=' (61) 88
'>' (62) 200 201 205 228 230
'[' (91) 243 244 265
']' (93) 243 244 265
'^' (94) 149
'{' (123) 24 30 69 72 90 177
'|' (124) 147
'}' (125) 24 30 69 72 90 177
'~' (126) 166
error (256)
TOK_ANY (258) 225
TOK_ATTRIBUTE (259) 97
TOK_BOOLEAN (260) 223
TOK_CASE (261) 85
TOK_CHAR (262) 221
TOK_CONST (263) 88
TOK_CONTEXT (264) 134
TOK_DEFAULT (265) 86
TOK_DOUBLE (266) 203 204
TOK_ENUM (267) 177
TOK_EXCEPTION (268) 90
TOK_FALSE (269) 272
TOK_FIXED (270) 205 206
TOK_FLOAT (271) 202
TOK_IN (272) 125
TOK_INOUT (273) 127
TOK_INTERFACE (274) 30 31
TOK_LONG (275) 204 213 214 219 220
TOK_MODULE (276) 22
TOK_NATIVE (277) 51 53
TOK_OBJECT (278) 26 226
TOK_OCTET (279) 224
TOK_ONEWAY (280) 109
TOK_OP_SCOPE (281) 180 181
TOK_OP_SHL (282) 154
TOK_OP_SHR (283) 153
TOK_OUT (284) 126
TOK_RAISES (285) 133
TOK_READONLY (286) 94
TOK_SEQUENCE (287) 200 201
TOK_SHORT (288) 212 218
TOK_STRING (289) 228 229
TOK_STRUCT (290) 69
TOK_SWITCH (291) 72
TOK_TRUE (292) 271
TOK_TYPECODE (293) 27 227
TOK_TYPEDEF (294) 47
TOK_UNION (295) 72
TOK_UNSIGNED (296) 218 219 220
TOK_VARARGS (297) 116 118
TOK_VOID (298) 99 114
TOK_WCHAR (299) 222
TOK_WSTRING (300) 230 231
TOK_FLOATP (301) 270
TOK_INTEGER (302) 266
TOK_DECLSPEC (303) 262
TOK_PROP_KEY (304) 245 246 247 248
TOK_PROP_VALUE (305) 245 246
TOK_NATIVE_TYPE (306) 53
TOK_IDENT (307) 249
TOK_SQSTRING (308) 278
TOK_DQSTRING (309) 277
TOK_FIXEDP (310) 269
TOK_CODEFRAG (311) 273
TOK_SRCFILE (312) 274


Nonterminals, with rules where they appear

$accept (79)
    on left: 0
specification (80)
    on left: 1 2, on right: 0
z_definition_list (81)
    on left: 3 4, on right: 24
definition_list (82)
    on left: 5 6, on right: 2 4 6
check_semicolon (83)
    on left: 7 8, on right: 13 14 15 16 17 39 40 41 42 43 81 186
useless_semicolon (84)
    on left: 9, on right: 21 45
check_comma (85)
    on left: 10 11, on right: 35 122 183 233 239 259
illegal_ident (86)
    on left: 12, on right: 20
definition (87)
    on left: 13 14 15 16 17 18 19 20 21, on right: 5 6
module_declspec (88)
    on left: 22, on right: 24
module (89)
    on left: 24, on right: 17
$@1 (90)
    on left: 23, on right: 24
interface_catch_ident (91)
    on left: 25 26 27, on right: 30 31
interface (92)
    on left: 30 31, on right: 16
$@2 (93)
    on left: 28, on right: 30
$@3 (94)
    on left: 29, on right: 30
z_inheritance (95)
    on left: 32 33, on right: 30
scoped_name_list (96)
    on left: 34 35, on right: 33 35 133
interface_body (97)
    on left: 36, on right: 30
export_list (98)
    on left: 37 38, on right: 36 38
export (99)
    on left: 39 40 41 42 43 44 45, on right: 38
type_dcl (100)
    on left: 46, on right: 13 39
type_dcl_def (101)
    on left: 47 48 49 50 51 53, on right: 46
$@4 (102)
    on left: 52, on right: 53
type_declarator (103)
    on left: 54, on right: 47
type_spec (104)
    on left: 55 56, on right: 54 82 186
simple_type_spec (105)
    on left: 57 58 59, on right: 55 200 201
constr_type_spec (106)
    on left: 60 61 62, on right: 56 101
z_new_ident_catch (107)
    on left: 63 64, on right: 177
z_new_scope_catch (108)
    on left: 65 66, on right: 69 72
struct_type (109)
    on left: 69, on right: 48 60
@5 (110)
    on left: 67, on right: 69
@6 (111)
    on left: 68, on right: 69
union_type (112)
    on left: 72, on right: 49 61
@7 (113)
    on left: 70, on right: 72
@8 (114)
    on left: 71, on right: 72
switch_type_spec (115)
    on left: 73 74 75 76 77, on right: 72
switch_body (116)
    on left: 78, on right: 72
case_stmt_list (117)
    on left: 79 80, on right: 78 80
case_stmt (118)
    on left: 81, on right: 79 80
element_spec (119)
    on left: 82, on right: 81
case_label_list (120)
    on left: 83 84, on right: 81 84
case_label (121)
    on left: 85 86, on right: 83 84
const_dcl (122)
    on left: 87, on right: 14 43
const_dcl_def (123)
    on left: 88, on right: 87
except_dcl (124)
    on left: 89, on right: 15 40
except_dcl_def (125)
    on left: 90, on right: 89
member_zlist (126)
    on left: 91 92, on right: 90 92
is_readonly (127)
    on left: 93 94, on right: 97
attr_dcl (128)
    on left: 95, on right: 42
attr_dcl_def (129)
    on left: 97, on right: 95
@9 (130)
    on left: 96, on right: 97
param_type_spec (131)
    on left: 98 99, on right: 97 124 128
op_param_type_spec_illegal (132)
    on left: 100 101, on right: 107
op_param_type_spec (133)
    on left: 102 103 104 105 106 107, on right: 98 113
is_oneway (134)
    on left: 108 109, on right: 111
op_dcl (135)
    on left: 110, on right: 41
op_dcl_def (136)
    on left: 111, on right: 110
op_type_spec (137)
    on left: 113 114, on right: 111
@10 (138)
    on left: 112, on right: 113
is_varargs (139)
    on left: 115 116, on right: 120
is_cvarargs (140)
    on left: 117 118, on right: 119
parameter_dcls (141)
    on left: 119 120, on right: 111
param_dcl_list (142)
    on left: 121 122, on right: 119 122
param_dcl (143)
    on left: 124, on right: 121 122
@11 (144)
    on left: 123, on right: 124
param_attribute (145)
    on left: 125 126 127 128, on right: 124
is_raises_expr (146)
    on left: 129 130, on right: 111
is_context_expr (147)
    on left: 131 132, on right: 111
raises_expr (148)
    on left: 133, on right: 130
context_expr (149)
    on left: 134, on right: 132
const_type (150)
    on left: 135 136 137 138 139 140 141 142 143 144, on right: 88
const_exp (151)
    on left: 145, on right: 85 88 169 260
or_expr (152)
    on left: 146 147, on right: 145 147
xor_expr (153)
    on left: 148 149, on right: 146 147 149
and_expr (154)
    on left: 150 151, on right: 148 149 151
shift_expr (155)
    on left: 152 153 154, on right: 150 151 153 154
add_expr (156)
    on left: 155 156 157, on right: 152 153 154 156 157
mult_expr (157)
    on left: 158 159 160 161, on right: 155 156 157 159 160 161
unary_expr (158)
    on left: 162 163, on right: 158 159 160 161
unary_op (159)
    on left: 164 165 166, on right: 162
primary_expr (160)
    on left: 167 168 169, on right: 162 163
literal (161)
    on left: 170 171 172 173 174 175, on right: 168
enum_type (162)
    on left: 177, on right: 50 62 76
@12 (163)
    on left: 176, on right: 177
scoped_name (164)
    on left: 178, on right: 12 34 35 59 77 106 144 167
ns_scoped_name (165)
    on left: 179 180 181, on right: 178 181
enumerator_list (166)
    on left: 182 183, on right: 177 183
member_list (167)
    on left: 184 185, on right: 69 185
member (168)
    on left: 186, on right: 92 184 185
base_type_spec (169)
    on left: 187 188 189 190 191 192 193 194 195, on right: 57 102
template_type_spec (170)
    on left: 196 197 198 199, on right: 58
sequence_type (171)
    on left: 200 201, on right: 100 196
floating_pt_type (172)
    on left: 202 203 204, on right: 140 187
fixed_pt_type (173)
    on left: 205, on right: 105 199
fixed_pt_const_type (174)
    on left: 206, on right: 143
integer_type (175)
    on left: 207 208, on right: 73 135 188
signed_int (176)
    on left: 209 210 211, on right: 207
signed_short_int (177)
    on left: 212, on right: 209
signed_long_int (178)
    on left: 213, on right: 210
signed_longlong_int (179)
    on left: 214, on right: 211
unsigned_int (180)
    on left: 215 216 217, on right: 208
unsigned_short_int (181)
    on left: 218, on right: 215
unsigned_long_int (182)
    on left: 219, on right: 216
unsigned_longlong_int (183)
    on left: 220, on right: 217
char_type (184)
    on left: 221, on right: 74 136 189
wide_char_type (185)
    on left: 222, on right: 138 190
boolean_type (186)
    on left: 223, on right: 75 139 191
octet_type (187)
    on left: 224, on right: 137 192
any_type (188)
    on left: 225, on right: 193
object_type (189)
    on left: 226, on right: 194
typecode_type (190)
    on left: 227, on right: 195
string_type (191)
    on left: 228 229, on right: 103 141 197
wide_string_type (192)
    on left: 230 231, on right: 104 142 198
declarator_list (193)
    on left: 232 233, on right: 54 186 233
declarator (194)
    on left: 234 235, on right: 82 232 233
simple_declarator (195)
    on left: 236, on right: 51 53 124 234 238 239
complex_declarator (196)
    on left: 237, on right: 235
simple_declarator_list (197)
    on left: 238 239, on right: 97 239
array_declarator (198)
    on left: 240, on right: 237
fixed_array_size_list (199)
    on left: 241 242, on right: 240 242
fixed_array_size (200)
    on left: 243 244, on right: 241 242
prop_hash (201)
    on left: 245 246 247 248, on right: 246 248 265
ident (202)
    on left: 249, on right: 181 254 255 256 257
new_ident (203)
    on left: 250, on right: 64 88 182 183 236 240
new_scope (204)
    on left: 251, on right: 66 90 111
new_or_prev_scope (205)
    on left: 252, on right: 24 25
pop_scope (206)
    on left: 253, on right: 24 30 31 69 72 90 111
ns_new_ident (207)
    on left: 254, on right: 250 251
ns_prev_ident (208)
    on left: 255, on right: 179
cur_ns_new_or_prev_ident (209)
    on left: 256, on right: 252
ns_global_ident (210)
    on left: 257, on right: 180
string_lit_list (211)
    on left: 258 259, on right: 134 259
positive_int_const (212)
    on left: 260, on right: 200 205 228 230 243
z_declspec (213)
    on left: 261 262, on right: 22 30 31 46 87 89 95 110 273
z_props (214)
    on left: 263 265, on right: 30 31 47 51 53 69 72 97 111 124 177
$@13 (215)
    on left: 264, on right: 265
integer_lit (216)
    on left: 266, on right: 170 205
string_lit (217)
    on left: 267, on right: 171 258 259
char_lit (218)
    on left: 268, on right: 172
fixed_pt_lit (219)
    on left: 269, on right: 173
floating_pt_lit (220)
    on left: 270, on right: 174
boolean_lit (221)
    on left: 271 272, on right: 175
codefrag (222)
    on left: 273, on right: 18 44
srcfile (223)
    on left: 274, on right: 19
dqstring_cat (224)
    on left: 275 276, on right: 267 276
dqstring (225)
    on left: 277, on right: 275 276
sqstring (226)
    on left: 278, on right: 268


state 0

    0 $accept: . specification $end

    TOK_OP_SCOPE  shift, and go to state 1
    TOK_DECLSPEC  shift, and go to state 2
    TOK_IDENT     shift, and go to state 3
    TOK_SRCFILE   shift, and go to state 4
    ';'           shift, and go to state 5

    $end      reduce using rule 1 (specification)
    $default  reduce using rule 261 (z_declspec)

    specification      go to state 6
    definition_list    go to state 7
    useless_semicolon  go to state 8
    illegal_ident      go to state 9
    definition         go to state 10
    module_declspec    go to state 11
    module             go to state 12
    interface          go to state 13
    type_dcl           go to state 14
    const_dcl          go to state 15
    except_dcl         go to state 16
    scoped_name        go to state 17
    ns_scoped_name     go to state 18
    ident              go to state 19
    ns_prev_ident      go to state 20
    z_declspec         go to state 21
    codefrag           go to state 22
    srcfile            go to state 23


state 1

  180 ns_scoped_name: TOK_OP_SCOPE . ns_global_ident

    TOK_IDENT  shift, and go to state 3

    ident            go to state 24
    ns_global_ident  go to state 25


state 2

  262 z_declspec: TOK_DECLSPEC .

    $default  reduce using rule 262 (z_declspec)


state 3

  249 ident: TOK_IDENT .

    $default  reduce using rule 249 (ident)


state 4

  274 srcfile: TOK_SRCFILE .

    $default  reduce using rule 274 (srcfile)


state 5

    9 useless_semicolon: ';' .

    $default  reduce using rule 9 (useless_semicolon)


state 6

    0 $accept: specification . $end

    $end  shift, and go to state 26


state 7

    2 specification: definition_list .
    6 definition_list: definition_list . definition

    TOK_OP_SCOPE  shift, and go to state 1
    TOK_DECLSPEC  shift, and go to state 2
    TOK_IDENT     shift, and go to state 3
    TOK_SRCFILE   shift, and go to state 4
    ';'           shift, and go to state 5

    $end      reduce using rule 2 (specification)
    $default  reduce using rule 261 (z_declspec)

    useless_semicolon  go to state 8
    illegal_ident      go to state 9
    definition         go to state 27
    module_declspec    go to state 11
    module             go to state 12
    interface          go to state 13
    type_dcl           go to state 14
    const_dcl          go to state 15
    except_dcl         go to state 16
    scoped_name        go to state 17
    ns_scoped_name     go to state 18
    ident              go to state 19
    ns_prev_ident      go to state 20
    z_declspec         go to state 21
    codefrag           go to state 22
    srcfile            go to state 23


state 8

   21 definition: useless_semicolon .

    $default  reduce using rule 21 (definition)


state 9

   20 definition: illegal_ident .

    $default  reduce using rule 20 (definition)


state 10

    5 definition_list: definition .

    $default  reduce using rule 5 (definition_list)


state 11

   24 module: module_declspec . new_or_prev_scope $@1 '{' z_definition_list '}' pop_scope

    TOK_IDENT  shift, and go to state 3

    ident                     go to state 28
    new_or_prev_scope         go to state 29
    cur_ns_new_or_prev_ident  go to state 30


state 12

   17 definition: module . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 32


state 13

   16 definition: interface . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 33


state 14

   13 definition: type_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 34


state 15

   14 definition: const_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 35


state 16

   15 definition: except_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 36


state 17

   12 illegal_ident: scoped_name .

    $default  reduce using rule 12 (illegal_ident)


state 18

  178 scoped_name: ns_scoped_name .
  181 ns_scoped_name: ns_scoped_name . TOK_OP_SCOPE ident

    TOK_OP_SCOPE  shift, and go to state 37

    TOK_OP_SCOPE  [reduce using rule 178 (scoped_name)]
    $default      reduce using rule 178 (scoped_name)


state 19

  255 ns_prev_ident: ident .

    $default  reduce using rule 255 (ns_prev_ident)


state 20

  179 ns_scoped_name: ns_prev_ident .

    $default  reduce using rule 179 (ns_scoped_name)


state 21

   22 module_declspec: z_declspec . TOK_MODULE
   30 interface: z_declspec . z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' interface_body '}' pop_scope
   31          | z_declspec . z_props TOK_INTERFACE interface_catch_ident pop_scope
   46 type_dcl: z_declspec . type_dcl_def
   87 const_dcl: z_declspec . const_dcl_def
   89 except_dcl: z_declspec . except_dcl_def
  273 codefrag: z_declspec . TOK_CODEFRAG

    TOK_CONST      shift, and go to state 38
    TOK_EXCEPTION  shift, and go to state 39
    TOK_MODULE     shift, and go to state 40
    TOK_CODEFRAG   shift, and go to state 41
    '['            shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    type_dcl_def    go to state 43
    struct_type     go to state 44
    union_type      go to state 45
    const_dcl_def   go to state 46
    except_dcl_def  go to state 47
    enum_type       go to state 48
    z_props         go to state 49


state 22

   18 definition: codefrag .

    $default  reduce using rule 18 (definition)


state 23

   19 definition: srcfile .

    $default  reduce using rule 19 (definition)


state 24

  257 ns_global_ident: ident .

    $default  reduce using rule 257 (ns_global_ident)


state 25

  180 ns_scoped_name: TOK_OP_SCOPE ns_global_ident .

    $default  reduce using rule 180 (ns_scoped_name)


state 26

    0 $accept: specification $end .

    $default  accept


state 27

    6 definition_list: definition_list definition .

    $default  reduce using rule 6 (definition_list)


state 28

  256 cur_ns_new_or_prev_ident: ident .

    $default  reduce using rule 256 (cur_ns_new_or_prev_ident)


state 29

   24 module: module_declspec new_or_prev_scope . $@1 '{' z_definition_list '}' pop_scope

    $default  reduce using rule 23 ($@1)

    $@1  go to state 50


state 30

  252 new_or_prev_scope: cur_ns_new_or_prev_ident .

    $default  reduce using rule 252 (new_or_prev_scope)


state 31

    7 check_semicolon: ';' .

    $default  reduce using rule 7 (check_semicolon)


state 32

   17 definition: module check_semicolon .

    $default  reduce using rule 17 (definition)


state 33

   16 definition: interface check_semicolon .

    $default  reduce using rule 16 (definition)


state 34

   13 definition: type_dcl check_semicolon .

    $default  reduce using rule 13 (definition)


state 35

   14 definition: const_dcl check_semicolon .

    $default  reduce using rule 14 (definition)


state 36

   15 definition: except_dcl check_semicolon .

    $default  reduce using rule 15 (definition)


state 37

  181 ns_scoped_name: ns_scoped_name TOK_OP_SCOPE . ident

    TOK_IDENT  shift, and go to state 3

    ident  go to state 51


state 38

   88 const_dcl_def: TOK_CONST . const_type new_ident '=' const_exp

    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 55
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3

    const_type             go to state 64
    scoped_name            go to state 65
    ns_scoped_name         go to state 18
    floating_pt_type       go to state 66
    fixed_pt_const_type    go to state 67
    integer_type           go to state 68
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 77
    wide_char_type         go to state 78
    boolean_type           go to state 79
    octet_type             go to state 80
    string_type            go to state 81
    wide_string_type       go to state 82
    ident                  go to state 19
    ns_prev_ident          go to state 20


state 39

   90 except_dcl_def: TOK_EXCEPTION . new_scope '{' member_zlist '}' pop_scope

    TOK_IDENT  shift, and go to state 3

    ident         go to state 83
    new_scope     go to state 84
    ns_new_ident  go to state 85


state 40

   22 module_declspec: z_declspec TOK_MODULE .

    $default  reduce using rule 22 (module_declspec)


state 41

  273 codefrag: z_declspec TOK_CODEFRAG .

    $default  reduce using rule 273 (codefrag)


state 42

  265 z_props: '[' . $@13 prop_hash ']'

    $default  reduce using rule 264 ($@13)

    $@13  go to state 86


state 43

   46 type_dcl: z_declspec type_dcl_def .

    $default  reduce using rule 46 (type_dcl)


state 44

   48 type_dcl_def: struct_type .

    $default  reduce using rule 48 (type_dcl_def)


state 45

   49 type_dcl_def: union_type .

    $default  reduce using rule 49 (type_dcl_def)


state 46

   87 const_dcl: z_declspec const_dcl_def .

    $default  reduce using rule 87 (const_dcl)


state 47

   89 except_dcl: z_declspec except_dcl_def .

    $default  reduce using rule 89 (except_dcl)


state 48

   50 type_dcl_def: enum_type .

    $default  reduce using rule 50 (type_dcl_def)


state 49

   30 interface: z_declspec z_props . TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' interface_body '}' pop_scope
   31          | z_declspec z_props . TOK_INTERFACE interface_catch_ident pop_scope
   47 type_dcl_def: z_props . TOK_TYPEDEF type_declarator
   51             | z_props . TOK_NATIVE simple_declarator
   53             | z_props . TOK_NATIVE simple_declarator '(' $@4 TOK_NATIVE_TYPE
   69 struct_type: z_props . TOK_STRUCT @5 z_new_scope_catch '{' @6 member_list '}' pop_scope
   72 union_type: z_props . TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope
  177 enum_type: z_props . TOK_ENUM @12 z_new_ident_catch '{' enumerator_list '}'

    TOK_ENUM       shift, and go to state 87
    TOK_INTERFACE  shift, and go to state 88
    TOK_NATIVE     shift, and go to state 89
    TOK_STRUCT     shift, and go to state 90
    TOK_TYPEDEF    shift, and go to state 91
    TOK_UNION      shift, and go to state 92


state 50

   24 module: module_declspec new_or_prev_scope $@1 . '{' z_definition_list '}' pop_scope

    '{'  shift, and go to state 93


state 51

  181 ns_scoped_name: ns_scoped_name TOK_OP_SCOPE ident .

    $default  reduce using rule 181 (ns_scoped_name)


state 52

  223 boolean_type: TOK_BOOLEAN .

    $default  reduce using rule 223 (boolean_type)


state 53

  221 char_type: TOK_CHAR .

    $default  reduce using rule 221 (char_type)


state 54

  203 floating_pt_type: TOK_DOUBLE .

    $default  reduce using rule 203 (floating_pt_type)


state 55

  206 fixed_pt_const_type: TOK_FIXED .

    $default  reduce using rule 206 (fixed_pt_const_type)


state 56

  202 floating_pt_type: TOK_FLOAT .

    $default  reduce using rule 202 (floating_pt_type)


state 57

  204 floating_pt_type: TOK_LONG . TOK_DOUBLE
  213 signed_long_int: TOK_LONG .
  214 signed_longlong_int: TOK_LONG . TOK_LONG

    TOK_DOUBLE  shift, and go to state 94
    TOK_LONG    shift, and go to state 95

    TOK_DOUBLE  [reduce using rule 213 (signed_long_int)]
    TOK_LONG    [reduce using rule 213 (signed_long_int)]
    $default    reduce using rule 213 (signed_long_int)


state 58

  224 octet_type: TOK_OCTET .

    $default  reduce using rule 224 (octet_type)


state 59

  212 signed_short_int: TOK_SHORT .

    $default  reduce using rule 212 (signed_short_int)


state 60

  228 string_type: TOK_STRING . '<' positive_int_const '>'
  229            | TOK_STRING .

    '<'  shift, and go to state 96

    $default  reduce using rule 229 (string_type)


state 61

  218 unsigned_short_int: TOK_UNSIGNED . TOK_SHORT
  219 unsigned_long_int: TOK_UNSIGNED . TOK_LONG
  220 unsigned_longlong_int: TOK_UNSIGNED . TOK_LONG TOK_LONG

    TOK_LONG   shift, and go to state 97
    TOK_SHORT  shift, and go to state 98


state 62

  222 wide_char_type: TOK_WCHAR .

    $default  reduce using rule 222 (wide_char_type)


state 63

  230 wide_string_type: TOK_WSTRING . '<' positive_int_const '>'
  231                 | TOK_WSTRING .

    '<'  shift, and go to state 99

    $default  reduce using rule 231 (wide_string_type)


state 64

   88 const_dcl_def: TOK_CONST const_type . new_ident '=' const_exp

    TOK_IDENT  shift, and go to state 3

    ident         go to state 83
    new_ident     go to state 100
    ns_new_ident  go to state 101


state 65

  144 const_type: scoped_name .

    $default  reduce using rule 144 (const_type)


state 66

  140 const_type: floating_pt_type .

    $default  reduce using rule 140 (const_type)


state 67

  143 const_type: fixed_pt_const_type .

    $default  reduce using rule 143 (const_type)


state 68

  135 const_type: integer_type .

    $default  reduce using rule 135 (const_type)


state 69

  207 integer_type: signed_int .

    $default  reduce using rule 207 (integer_type)


state 70

  209 signed_int: signed_short_int .

    $default  reduce using rule 209 (signed_int)


state 71

  210 signed_int: signed_long_int .

    $default  reduce using rule 210 (signed_int)


state 72

  211 signed_int: signed_longlong_int .

    $default  reduce using rule 211 (signed_int)


state 73

  208 integer_type: unsigned_int .

    $default  reduce using rule 208 (integer_type)


state 74

  215 unsigned_int: unsigned_short_int .

    $default  reduce using rule 215 (unsigned_int)


state 75

  216 unsigned_int: unsigned_long_int .

    $default  reduce using rule 216 (unsigned_int)


state 76

  217 unsigned_int: unsigned_longlong_int .

    $default  reduce using rule 217 (unsigned_int)


state 77

  136 const_type: char_type .

    $default  reduce using rule 136 (const_type)


state 78

  138 const_type: wide_char_type .

    $default  reduce using rule 138 (const_type)


state 79

  139 const_type: boolean_type .

    $default  reduce using rule 139 (const_type)


state 80

  137 const_type: octet_type .

    $default  reduce using rule 137 (const_type)


state 81

  141 const_type: string_type .

    $default  reduce using rule 141 (const_type)


state 82

  142 const_type: wide_string_type .

    $default  reduce using rule 142 (const_type)


state 83

  254 ns_new_ident: ident .

    $default  reduce using rule 254 (ns_new_ident)


state 84

   90 except_dcl_def: TOK_EXCEPTION new_scope . '{' member_zlist '}' pop_scope

    '{'  shift, and go to state 102


state 85

  251 new_scope: ns_new_ident .

    $default  reduce using rule 251 (new_scope)


state 86

  265 z_props: '[' $@13 . prop_hash ']'

    TOK_PROP_KEY  shift, and go to state 103

    prop_hash  go to state 104


state 87

  177 enum_type: z_props TOK_ENUM . @12 z_new_ident_catch '{' enumerator_list '}'

    $default  reduce using rule 176 (@12)

    @12  go to state 105


state 88

   30 interface: z_declspec z_props TOK_INTERFACE . interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' interface_body '}' pop_scope
   31          | z_declspec z_props TOK_INTERFACE . interface_catch_ident pop_scope

    TOK_OBJECT    shift, and go to state 106
    TOK_TYPECODE  shift, and go to state 107
    TOK_IDENT     shift, and go to state 3

    interface_catch_ident     go to state 108
    ident                     go to state 28
    new_or_prev_scope         go to state 109
    cur_ns_new_or_prev_ident  go to state 30


state 89

   51 type_dcl_def: z_props TOK_NATIVE . simple_declarator
   53             | z_props TOK_NATIVE . simple_declarator '(' $@4 TOK_NATIVE_TYPE

    TOK_IDENT  shift, and go to state 3

    simple_declarator  go to state 110
    ident              go to state 83
    new_ident          go to state 111
    ns_new_ident       go to state 101


state 90

   69 struct_type: z_props TOK_STRUCT . @5 z_new_scope_catch '{' @6 member_list '}' pop_scope

    $default  reduce using rule 67 (@5)

    @5  go to state 112


state 91

   47 type_dcl_def: z_props TOK_TYPEDEF . type_declarator

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    type_declarator        go to state 118
    type_spec              go to state 119
    simple_type_spec       go to state 120
    constr_type_spec       go to state 121
    struct_type            go to state 122
    union_type             go to state 123
    enum_type              go to state 124
    scoped_name            go to state 125
    ns_scoped_name         go to state 18
    base_type_spec         go to state 126
    template_type_spec     go to state 127
    sequence_type          go to state 128
    floating_pt_type       go to state 129
    fixed_pt_type          go to state 130
    integer_type           go to state 131
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 132
    wide_char_type         go to state 133
    boolean_type           go to state 134
    octet_type             go to state 135
    any_type               go to state 136
    object_type            go to state 137
    typecode_type          go to state 138
    string_type            go to state 139
    wide_string_type       go to state 140
    ident                  go to state 19
    ns_prev_ident          go to state 20
    z_props                go to state 141


state 92

   72 union_type: z_props TOK_UNION . @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope

    $default  reduce using rule 70 (@7)

    @7  go to state 142


state 93

   24 module: module_declspec new_or_prev_scope $@1 '{' . z_definition_list '}' pop_scope

    TOK_OP_SCOPE  shift, and go to state 1
    TOK_DECLSPEC  shift, and go to state 2
    TOK_IDENT     shift, and go to state 3
    TOK_SRCFILE   shift, and go to state 4
    ';'           shift, and go to state 5

    '}'       reduce using rule 3 (z_definition_list)
    $default  reduce using rule 261 (z_declspec)

    z_definition_list  go to state 143
    definition_list    go to state 144
    useless_semicolon  go to state 8
    illegal_ident      go to state 9
    definition         go to state 10
    module_declspec    go to state 11
    module             go to state 12
    interface          go to state 13
    type_dcl           go to state 14
    const_dcl          go to state 15
    except_dcl         go to state 16
    scoped_name        go to state 17
    ns_scoped_name     go to state 18
    ident              go to state 19
    ns_prev_ident      go to state 20
    z_declspec         go to state 21
    codefrag           go to state 22
    srcfile            go to state 23


state 94

  204 floating_pt_type: TOK_LONG TOK_DOUBLE .

    $default  reduce using rule 204 (floating_pt_type)


state 95

  214 signed_longlong_int: TOK_LONG TOK_LONG .

    $default  reduce using rule 214 (signed_longlong_int)


state 96

  228 string_type: TOK_STRING '<' . positive_int_const '>'

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    const_exp           go to state 156
    or_expr             go to state 157
    xor_expr            go to state 158
    and_expr            go to state 159
    shift_expr          go to state 160
    add_expr            go to state 161
    mult_expr           go to state 162
    unary_expr          go to state 163
    unary_op            go to state 164
    primary_expr        go to state 165
    literal             go to state 166
    scoped_name         go to state 167
    ns_scoped_name      go to state 18
    ident               go to state 19
    ns_prev_ident       go to state 20
    positive_int_const  go to state 168
    integer_lit         go to state 169
    string_lit          go to state 170
    char_lit            go to state 171
    fixed_pt_lit        go to state 172
    floating_pt_lit     go to state 173
    boolean_lit         go to state 174
    dqstring_cat        go to state 175
    dqstring            go to state 176
    sqstring            go to state 177


state 97

  219 unsigned_long_int: TOK_UNSIGNED TOK_LONG .
  220 unsigned_longlong_int: TOK_UNSIGNED TOK_LONG . TOK_LONG

    TOK_LONG  shift, and go to state 178

    TOK_LONG  [reduce using rule 219 (unsigned_long_int)]
    $default  reduce using rule 219 (unsigned_long_int)


state 98

  218 unsigned_short_int: TOK_UNSIGNED TOK_SHORT .

    $default  reduce using rule 218 (unsigned_short_int)


state 99

  230 wide_string_type: TOK_WSTRING '<' . positive_int_const '>'

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    const_exp           go to state 156
    or_expr             go to state 157
    xor_expr            go to state 158
    and_expr            go to state 159
    shift_expr          go to state 160
    add_expr            go to state 161
    mult_expr           go to state 162
    unary_expr          go to state 163
    unary_op            go to state 164
    primary_expr        go to state 165
    literal             go to state 166
    scoped_name         go to state 167
    ns_scoped_name      go to state 18
    ident               go to state 19
    ns_prev_ident       go to state 20
    positive_int_const  go to state 179
    integer_lit         go to state 169
    string_lit          go to state 170
    char_lit            go to state 171
    fixed_pt_lit        go to state 172
    floating_pt_lit     go to state 173
    boolean_lit         go to state 174
    dqstring_cat        go to state 175
    dqstring            go to state 176
    sqstring            go to state 177


state 100

   88 const_dcl_def: TOK_CONST const_type new_ident . '=' const_exp

    '='  shift, and go to state 180


state 101

  250 new_ident: ns_new_ident .

    $default  reduce using rule 250 (new_ident)


state 102

   90 except_dcl_def: TOK_EXCEPTION new_scope '{' . member_zlist '}' pop_scope

    $default  reduce using rule 91 (member_zlist)

    member_zlist  go to state 181


state 103

  245 prop_hash: TOK_PROP_KEY . TOK_PROP_VALUE
  247          | TOK_PROP_KEY .

    TOK_PROP_VALUE  shift, and go to state 182

    $default  reduce using rule 247 (prop_hash)


state 104

  246 prop_hash: prop_hash . ',' TOK_PROP_KEY TOK_PROP_VALUE
  248          | prop_hash . ',' TOK_PROP_KEY
  265 z_props: '[' $@13 prop_hash . ']'

    ','  shift, and go to state 183
    ']'  shift, and go to state 184


state 105

  177 enum_type: z_props TOK_ENUM @12 . z_new_ident_catch '{' enumerator_list '}'

    TOK_IDENT  shift, and go to state 3

    $default  reduce using rule 63 (z_new_ident_catch)

    z_new_ident_catch  go to state 185
    ident              go to state 83
    new_ident          go to state 186
    ns_new_ident       go to state 101


state 106

   26 interface_catch_ident: TOK_OBJECT .

    $default  reduce using rule 26 (interface_catch_ident)


state 107

   27 interface_catch_ident: TOK_TYPECODE .

    $default  reduce using rule 27 (interface_catch_ident)


state 108

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident . $@2 pop_scope z_inheritance $@3 '{' interface_body '}' pop_scope
   31          | z_declspec z_props TOK_INTERFACE interface_catch_ident . pop_scope

    '{'       reduce using rule 28 ($@2)
    ':'       reduce using rule 28 ($@2)
    $default  reduce using rule 253 (pop_scope)

    $@2        go to state 187
    pop_scope  go to state 188


state 109

   25 interface_catch_ident: new_or_prev_scope .

    $default  reduce using rule 25 (interface_catch_ident)


state 110

   51 type_dcl_def: z_props TOK_NATIVE simple_declarator .
   53             | z_props TOK_NATIVE simple_declarator . '(' $@4 TOK_NATIVE_TYPE

    '('  shift, and go to state 189

    $default  reduce using rule 51 (type_dcl_def)


state 111

  236 simple_declarator: new_ident .

    $default  reduce using rule 236 (simple_declarator)


state 112

   69 struct_type: z_props TOK_STRUCT @5 . z_new_scope_catch '{' @6 member_list '}' pop_scope

    TOK_IDENT  shift, and go to state 3

    $default  reduce using rule 65 (z_new_scope_catch)

    z_new_scope_catch  go to state 190
    ident              go to state 83
    new_scope          go to state 191
    ns_new_ident       go to state 85


state 113

  225 any_type: TOK_ANY .

    $default  reduce using rule 225 (any_type)


state 114

  205 fixed_pt_type: TOK_FIXED . '<' positive_int_const ',' integer_lit '>'

    '<'  shift, and go to state 192


state 115

  226 object_type: TOK_OBJECT .

    $default  reduce using rule 226 (object_type)


state 116

  200 sequence_type: TOK_SEQUENCE . '<' simple_type_spec ',' positive_int_const '>'
  201              | TOK_SEQUENCE . '<' simple_type_spec '>'

    '<'  shift, and go to state 193


state 117

  227 typecode_type: TOK_TYPECODE .

    $default  reduce using rule 227 (typecode_type)


state 118

   47 type_dcl_def: z_props TOK_TYPEDEF type_declarator .

    $default  reduce using rule 47 (type_dcl_def)


state 119

   54 type_declarator: type_spec . declarator_list

    TOK_IDENT  shift, and go to state 3

    declarator_list     go to state 194
    declarator          go to state 195
    simple_declarator   go to state 196
    complex_declarator  go to state 197
    array_declarator    go to state 198
    ident               go to state 83
    new_ident           go to state 199
    ns_new_ident        go to state 101


state 120

   55 type_spec: simple_type_spec .

    $default  reduce using rule 55 (type_spec)


state 121

   56 type_spec: constr_type_spec .

    $default  reduce using rule 56 (type_spec)


state 122

   60 constr_type_spec: struct_type .

    $default  reduce using rule 60 (constr_type_spec)


state 123

   61 constr_type_spec: union_type .

    $default  reduce using rule 61 (constr_type_spec)


state 124

   62 constr_type_spec: enum_type .

    $default  reduce using rule 62 (constr_type_spec)


state 125

   59 simple_type_spec: scoped_name .

    $default  reduce using rule 59 (simple_type_spec)


state 126

   57 simple_type_spec: base_type_spec .

    $default  reduce using rule 57 (simple_type_spec)


state 127

   58 simple_type_spec: template_type_spec .

    $default  reduce using rule 58 (simple_type_spec)


state 128

  196 template_type_spec: sequence_type .

    $default  reduce using rule 196 (template_type_spec)


state 129

  187 base_type_spec: floating_pt_type .

    $default  reduce using rule 187 (base_type_spec)


state 130

  199 template_type_spec: fixed_pt_type .

    $default  reduce using rule 199 (template_type_spec)


state 131

  188 base_type_spec: integer_type .

    $default  reduce using rule 188 (base_type_spec)


state 132

  189 base_type_spec: char_type .

    $default  reduce using rule 189 (base_type_spec)


state 133

  190 base_type_spec: wide_char_type .

    $default  reduce using rule 190 (base_type_spec)


state 134

  191 base_type_spec: boolean_type .

    $default  reduce using rule 191 (base_type_spec)


state 135

  192 base_type_spec: octet_type .

    $default  reduce using rule 192 (base_type_spec)


state 136

  193 base_type_spec: any_type .

    $default  reduce using rule 193 (base_type_spec)


state 137

  194 base_type_spec: object_type .

    $default  reduce using rule 194 (base_type_spec)


state 138

  195 base_type_spec: typecode_type .

    $default  reduce using rule 195 (base_type_spec)


state 139

  197 template_type_spec: string_type .

    $default  reduce using rule 197 (template_type_spec)


state 140

  198 template_type_spec: wide_string_type .

    $default  reduce using rule 198 (template_type_spec)


state 141

   69 struct_type: z_props . TOK_STRUCT @5 z_new_scope_catch '{' @6 member_list '}' pop_scope
   72 union_type: z_props . TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope
  177 enum_type: z_props . TOK_ENUM @12 z_new_ident_catch '{' enumerator_list '}'

    TOK_ENUM    shift, and go to state 87
    TOK_STRUCT  shift, and go to state 90
    TOK_UNION   shift, and go to state 92


state 142

   72 union_type: z_props TOK_UNION @7 . z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope

    TOK_IDENT  shift, and go to state 3

    $default  reduce using rule 65 (z_new_scope_catch)

    z_new_scope_catch  go to state 200
    ident              go to state 83
    new_scope          go to state 191
    ns_new_ident       go to state 85


state 143

   24 module: module_declspec new_or_prev_scope $@1 '{' z_definition_list . '}' pop_scope

    '}'  shift, and go to state 201


state 144

    4 z_definition_list: definition_list .
    6 definition_list: definition_list . definition

    TOK_OP_SCOPE  shift, and go to state 1
    TOK_DECLSPEC  shift, and go to state 2
    TOK_IDENT     shift, and go to state 3
    TOK_SRCFILE   shift, and go to state 4
    ';'           shift, and go to state 5

    '}'       reduce using rule 4 (z_definition_list)
    $default  reduce using rule 261 (z_declspec)

    useless_semicolon  go to state 8
    illegal_ident      go to state 9
    definition         go to state 27
    module_declspec    go to state 11
    module             go to state 12
    interface          go to state 13
    type_dcl           go to state 14
    const_dcl          go to state 15
    except_dcl         go to state 16
    scoped_name        go to state 17
    ns_scoped_name     go to state 18
    ident              go to state 19
    ns_prev_ident      go to state 20
    z_declspec         go to state 21
    codefrag           go to state 22
    srcfile            go to state 23


state 145

  272 boolean_lit: TOK_FALSE .

    $default  reduce using rule 272 (boolean_lit)


state 146

  271 boolean_lit: TOK_TRUE .

    $default  reduce using rule 271 (boolean_lit)


state 147

  270 floating_pt_lit: TOK_FLOATP .

    $default  reduce using rule 270 (floating_pt_lit)


state 148

  266 integer_lit: TOK_INTEGER .

    $default  reduce using rule 266 (integer_lit)


state 149

  278 sqstring: TOK_SQSTRING .

    $default  reduce using rule 278 (sqstring)


state 150

  277 dqstring: TOK_DQSTRING .

    $default  reduce using rule 277 (dqstring)


state 151

  269 fixed_pt_lit: TOK_FIXEDP .

    $default  reduce using rule 269 (fixed_pt_lit)


state 152

  169 primary_expr: '(' . const_exp ')'

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    const_exp        go to state 202
    or_expr          go to state 157
    xor_expr         go to state 158
    and_expr         go to state 159
    shift_expr       go to state 160
    add_expr         go to state 161
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 153

  165 unary_op: '+' .

    $default  reduce using rule 165 (unary_op)


state 154

  164 unary_op: '-' .

    $default  reduce using rule 164 (unary_op)


state 155

  166 unary_op: '~' .

    $default  reduce using rule 166 (unary_op)


state 156

  260 positive_int_const: const_exp .

    $default  reduce using rule 260 (positive_int_const)


state 157

  145 const_exp: or_expr .
  147 or_expr: or_expr . '|' xor_expr

    '|'  shift, and go to state 203

    $default  reduce using rule 145 (const_exp)


state 158

  146 or_expr: xor_expr .
  149 xor_expr: xor_expr . '^' and_expr

    '^'  shift, and go to state 204

    $default  reduce using rule 146 (or_expr)


state 159

  148 xor_expr: and_expr .
  151 and_expr: and_expr . '&' shift_expr

    '&'  shift, and go to state 205

    $default  reduce using rule 148 (xor_expr)


state 160

  150 and_expr: shift_expr .
  153 shift_expr: shift_expr . TOK_OP_SHR add_expr
  154           | shift_expr . TOK_OP_SHL add_expr

    TOK_OP_SHL  shift, and go to state 206
    TOK_OP_SHR  shift, and go to state 207

    $default  reduce using rule 150 (and_expr)


state 161

  152 shift_expr: add_expr .
  156 add_expr: add_expr . '+' mult_expr
  157         | add_expr . '-' mult_expr

    '+'  shift, and go to state 208
    '-'  shift, and go to state 209

    $default  reduce using rule 152 (shift_expr)


state 162

  155 add_expr: mult_expr .
  159 mult_expr: mult_expr . '*' unary_expr
  160          | mult_expr . '/' unary_expr
  161          | mult_expr . '%' unary_expr

    '*'  shift, and go to state 210
    '/'  shift, and go to state 211
    '%'  shift, and go to state 212

    $default  reduce using rule 155 (add_expr)


state 163

  158 mult_expr: unary_expr .

    $default  reduce using rule 158 (mult_expr)


state 164

  162 unary_expr: unary_op . primary_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152

    primary_expr     go to state 213
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 165

  163 unary_expr: primary_expr .

    $default  reduce using rule 163 (unary_expr)


state 166

  168 primary_expr: literal .

    $default  reduce using rule 168 (primary_expr)


state 167

  167 primary_expr: scoped_name .

    $default  reduce using rule 167 (primary_expr)


state 168

  228 string_type: TOK_STRING '<' positive_int_const . '>'

    '>'  shift, and go to state 214


state 169

  170 literal: integer_lit .

    $default  reduce using rule 170 (literal)


state 170

  171 literal: string_lit .

    $default  reduce using rule 171 (literal)


state 171

  172 literal: char_lit .

    $default  reduce using rule 172 (literal)


state 172

  173 literal: fixed_pt_lit .

    $default  reduce using rule 173 (literal)


state 173

  174 literal: floating_pt_lit .

    $default  reduce using rule 174 (literal)


state 174

  175 literal: boolean_lit .

    $default  reduce using rule 175 (literal)


state 175

  267 string_lit: dqstring_cat .
  276 dqstring_cat: dqstring_cat . dqstring

    TOK_DQSTRING  shift, and go to state 150

    TOK_DQSTRING  [reduce using rule 267 (string_lit)]
    $default      reduce using rule 267 (string_lit)

    dqstring  go to state 215


state 176

  275 dqstring_cat: dqstring .

    $default  reduce using rule 275 (dqstring_cat)


state 177

  268 char_lit: sqstring .

    $default  reduce using rule 268 (char_lit)


state 178

  220 unsigned_longlong_int: TOK_UNSIGNED TOK_LONG TOK_LONG .

    $default  reduce using rule 220 (unsigned_longlong_int)


state 179

  230 wide_string_type: TOK_WSTRING '<' positive_int_const . '>'

    '>'  shift, and go to state 216


state 180

   88 const_dcl_def: TOK_CONST const_type new_ident '=' . const_exp

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    const_exp        go to state 217
    or_expr          go to state 157
    xor_expr         go to state 158
    and_expr         go to state 159
    shift_expr       go to state 160
    add_expr         go to state 161
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 181

   90 except_dcl_def: TOK_EXCEPTION new_scope '{' member_zlist . '}' pop_scope
   92 member_zlist: member_zlist . member

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '}'           shift, and go to state 218
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    type_spec              go to state 219
    simple_type_spec       go to state 120
    constr_type_spec       go to state 121
    struct_type            go to state 122
    union_type             go to state 123
    enum_type              go to state 124
    scoped_name            go to state 125
    ns_scoped_name         go to state 18
    member                 go to state 220
    base_type_spec         go to state 126
    template_type_spec     go to state 127
    sequence_type          go to state 128
    floating_pt_type       go to state 129
    fixed_pt_type          go to state 130
    integer_type           go to state 131
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 132
    wide_char_type         go to state 133
    boolean_type           go to state 134
    octet_type             go to state 135
    any_type               go to state 136
    object_type            go to state 137
    typecode_type          go to state 138
    string_type            go to state 139
    wide_string_type       go to state 140
    ident                  go to state 19
    ns_prev_ident          go to state 20
    z_props                go to state 141


state 182

  245 prop_hash: TOK_PROP_KEY TOK_PROP_VALUE .

    $default  reduce using rule 245 (prop_hash)


state 183

  246 prop_hash: prop_hash ',' . TOK_PROP_KEY TOK_PROP_VALUE
  248          | prop_hash ',' . TOK_PROP_KEY

    TOK_PROP_KEY  shift, and go to state 221


state 184

  265 z_props: '[' $@13 prop_hash ']' .

    $default  reduce using rule 265 (z_props)


state 185

  177 enum_type: z_props TOK_ENUM @12 z_new_ident_catch . '{' enumerator_list '}'

    '{'  shift, and go to state 222


state 186

   64 z_new_ident_catch: new_ident .

    $default  reduce using rule 64 (z_new_ident_catch)


state 187

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 . pop_scope z_inheritance $@3 '{' interface_body '}' pop_scope

    $default  reduce using rule 253 (pop_scope)

    pop_scope  go to state 223


state 188

   31 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident pop_scope .

    $default  reduce using rule 31 (interface)


state 189

   53 type_dcl_def: z_props TOK_NATIVE simple_declarator '(' . $@4 TOK_NATIVE_TYPE

    $default  reduce using rule 52 ($@4)

    $@4  go to state 224


state 190

   69 struct_type: z_props TOK_STRUCT @5 z_new_scope_catch . '{' @6 member_list '}' pop_scope

    '{'  shift, and go to state 225


state 191

   66 z_new_scope_catch: new_scope .

    $default  reduce using rule 66 (z_new_scope_catch)


state 192

  205 fixed_pt_type: TOK_FIXED '<' . positive_int_const ',' integer_lit '>'

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    const_exp           go to state 156
    or_expr             go to state 157
    xor_expr            go to state 158
    and_expr            go to state 159
    shift_expr          go to state 160
    add_expr            go to state 161
    mult_expr           go to state 162
    unary_expr          go to state 163
    unary_op            go to state 164
    primary_expr        go to state 165
    literal             go to state 166
    scoped_name         go to state 167
    ns_scoped_name      go to state 18
    ident               go to state 19
    ns_prev_ident       go to state 20
    positive_int_const  go to state 226
    integer_lit         go to state 169
    string_lit          go to state 170
    char_lit            go to state 171
    fixed_pt_lit        go to state 172
    floating_pt_lit     go to state 173
    boolean_lit         go to state 174
    dqstring_cat        go to state 175
    dqstring            go to state 176
    sqstring            go to state 177


state 193

  200 sequence_type: TOK_SEQUENCE '<' . simple_type_spec ',' positive_int_const '>'
  201              | TOK_SEQUENCE '<' . simple_type_spec '>'

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3

    simple_type_spec       go to state 227
    scoped_name            go to state 125
    ns_scoped_name         go to state 18
    base_type_spec         go to state 126
    template_type_spec     go to state 127
    sequence_type          go to state 128
    floating_pt_type       go to state 129
    fixed_pt_type          go to state 130
    integer_type           go to state 131
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 132
    wide_char_type         go to state 133
    boolean_type           go to state 134
    octet_type             go to state 135
    any_type               go to state 136
    object_type            go to state 137
    typecode_type          go to state 138
    string_type            go to state 139
    wide_string_type       go to state 140
    ident                  go to state 19
    ns_prev_ident          go to state 20


state 194

   54 type_declarator: type_spec declarator_list .
  233 declarator_list: declarator_list . check_comma declarator

    ','  shift, and go to state 228

    TOK_IDENT  reduce using rule 11 (check_comma)
    TOK_IDENT  [reduce using rule 54 (type_declarator)]
    $default   reduce using rule 54 (type_declarator)

    check_comma  go to state 229


state 195

  232 declarator_list: declarator .

    $default  reduce using rule 232 (declarator_list)


state 196

  234 declarator: simple_declarator .

    $default  reduce using rule 234 (declarator)


state 197

  235 declarator: complex_declarator .

    $default  reduce using rule 235 (declarator)


state 198

  237 complex_declarator: array_declarator .

    $default  reduce using rule 237 (complex_declarator)


state 199

  236 simple_declarator: new_ident .
  240 array_declarator: new_ident . fixed_array_size_list

    '['  shift, and go to state 230

    '['       [reduce using rule 236 (simple_declarator)]
    $default  reduce using rule 236 (simple_declarator)

    fixed_array_size_list  go to state 231
    fixed_array_size       go to state 232


state 200

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch . TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope

    TOK_SWITCH  shift, and go to state 233


state 201

   24 module: module_declspec new_or_prev_scope $@1 '{' z_definition_list '}' . pop_scope

    $default  reduce using rule 253 (pop_scope)

    pop_scope  go to state 234


state 202

  169 primary_expr: '(' const_exp . ')'

    ')'  shift, and go to state 235


state 203

  147 or_expr: or_expr '|' . xor_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    xor_expr         go to state 236
    and_expr         go to state 159
    shift_expr       go to state 160
    add_expr         go to state 161
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 204

  149 xor_expr: xor_expr '^' . and_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    and_expr         go to state 237
    shift_expr       go to state 160
    add_expr         go to state 161
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 205

  151 and_expr: and_expr '&' . shift_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    shift_expr       go to state 238
    add_expr         go to state 161
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 206

  154 shift_expr: shift_expr TOK_OP_SHL . add_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    add_expr         go to state 239
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 207

  153 shift_expr: shift_expr TOK_OP_SHR . add_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    add_expr         go to state 240
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 208

  156 add_expr: add_expr '+' . mult_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    mult_expr        go to state 241
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 209

  157 add_expr: add_expr '-' . mult_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    mult_expr        go to state 242
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 210

  159 mult_expr: mult_expr '*' . unary_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    unary_expr       go to state 243
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 211

  160 mult_expr: mult_expr '/' . unary_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    unary_expr       go to state 244
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 212

  161 mult_expr: mult_expr '%' . unary_expr

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    unary_expr       go to state 245
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 213

  162 unary_expr: unary_op primary_expr .

    $default  reduce using rule 162 (unary_expr)


state 214

  228 string_type: TOK_STRING '<' positive_int_const '>' .

    $default  reduce using rule 228 (string_type)


state 215

  276 dqstring_cat: dqstring_cat dqstring .

    $default  reduce using rule 276 (dqstring_cat)


state 216

  230 wide_string_type: TOK_WSTRING '<' positive_int_const '>' .

    $default  reduce using rule 230 (wide_string_type)


state 217

   88 const_dcl_def: TOK_CONST const_type new_ident '=' const_exp .

    $default  reduce using rule 88 (const_dcl_def)


state 218

   90 except_dcl_def: TOK_EXCEPTION new_scope '{' member_zlist '}' . pop_scope

    $default  reduce using rule 253 (pop_scope)

    pop_scope  go to state 246


state 219

  186 member: type_spec . declarator_list check_semicolon

    TOK_IDENT  shift, and go to state 3

    declarator_list     go to state 247
    declarator          go to state 195
    simple_declarator   go to state 196
    complex_declarator  go to state 197
    array_declarator    go to state 198
    ident               go to state 83
    new_ident           go to state 199
    ns_new_ident        go to state 101


state 220

   92 member_zlist: member_zlist member .

    $default  reduce using rule 92 (member_zlist)


state 221

  246 prop_hash: prop_hash ',' TOK_PROP_KEY . TOK_PROP_VALUE
  248          | prop_hash ',' TOK_PROP_KEY .

    TOK_PROP_VALUE  shift, and go to state 248

    $default  reduce using rule 248 (prop_hash)


state 222

  177 enum_type: z_props TOK_ENUM @12 z_new_ident_catch '{' . enumerator_list '}'

    TOK_IDENT  shift, and go to state 3

    enumerator_list  go to state 249
    ident            go to state 83
    new_ident        go to state 250
    ns_new_ident     go to state 101


state 223

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope . z_inheritance $@3 '{' interface_body '}' pop_scope

    ':'  shift, and go to state 251

    $default  reduce using rule 32 (z_inheritance)

    z_inheritance  go to state 252


state 224

   53 type_dcl_def: z_props TOK_NATIVE simple_declarator '(' $@4 . TOK_NATIVE_TYPE

    TOK_NATIVE_TYPE  shift, and go to state 253


state 225

   69 struct_type: z_props TOK_STRUCT @5 z_new_scope_catch '{' . @6 member_list '}' pop_scope

    $default  reduce using rule 68 (@6)

    @6  go to state 254


state 226

  205 fixed_pt_type: TOK_FIXED '<' positive_int_const . ',' integer_lit '>'

    ','  shift, and go to state 255


state 227

  200 sequence_type: TOK_SEQUENCE '<' simple_type_spec . ',' positive_int_const '>'
  201              | TOK_SEQUENCE '<' simple_type_spec . '>'

    ','  shift, and go to state 256
    '>'  shift, and go to state 257


state 228

   10 check_comma: ',' .

    $default  reduce using rule 10 (check_comma)


state 229

  233 declarator_list: declarator_list check_comma . declarator

    TOK_IDENT  shift, and go to state 3

    declarator          go to state 258
    simple_declarator   go to state 196
    complex_declarator  go to state 197
    array_declarator    go to state 198
    ident               go to state 83
    new_ident           go to state 199
    ns_new_ident        go to state 101


state 230

  243 fixed_array_size: '[' . positive_int_const ']'
  244                 | '[' . ']'

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155
    ']'           shift, and go to state 259

    const_exp           go to state 156
    or_expr             go to state 157
    xor_expr            go to state 158
    and_expr            go to state 159
    shift_expr          go to state 160
    add_expr            go to state 161
    mult_expr           go to state 162
    unary_expr          go to state 163
    unary_op            go to state 164
    primary_expr        go to state 165
    literal             go to state 166
    scoped_name         go to state 167
    ns_scoped_name      go to state 18
    ident               go to state 19
    ns_prev_ident       go to state 20
    positive_int_const  go to state 260
    integer_lit         go to state 169
    string_lit          go to state 170
    char_lit            go to state 171
    fixed_pt_lit        go to state 172
    floating_pt_lit     go to state 173
    boolean_lit         go to state 174
    dqstring_cat        go to state 175
    dqstring            go to state 176
    sqstring            go to state 177


state 231

  240 array_declarator: new_ident fixed_array_size_list .
  242 fixed_array_size_list: fixed_array_size_list . fixed_array_size

    '['  shift, and go to state 230

    '['       [reduce using rule 240 (array_declarator)]
    $default  reduce using rule 240 (array_declarator)

    fixed_array_size  go to state 261


state 232

  241 fixed_array_size_list: fixed_array_size .

    $default  reduce using rule 241 (fixed_array_size_list)


state 233

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH . '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope

    '('  shift, and go to state 262


state 234

   24 module: module_declspec new_or_prev_scope $@1 '{' z_definition_list '}' pop_scope .

    $default  reduce using rule 24 (module)


state 235

  169 primary_expr: '(' const_exp ')' .

    $default  reduce using rule 169 (primary_expr)


state 236

  147 or_expr: or_expr '|' xor_expr .
  149 xor_expr: xor_expr . '^' and_expr

    '^'  shift, and go to state 204

    $default  reduce using rule 147 (or_expr)


state 237

  149 xor_expr: xor_expr '^' and_expr .
  151 and_expr: and_expr . '&' shift_expr

    '&'  shift, and go to state 205

    $default  reduce using rule 149 (xor_expr)


state 238

  151 and_expr: and_expr '&' shift_expr .
  153 shift_expr: shift_expr . TOK_OP_SHR add_expr
  154           | shift_expr . TOK_OP_SHL add_expr

    TOK_OP_SHL  shift, and go to state 206
    TOK_OP_SHR  shift, and go to state 207

    $default  reduce using rule 151 (and_expr)


state 239

  154 shift_expr: shift_expr TOK_OP_SHL add_expr .
  156 add_expr: add_expr . '+' mult_expr
  157         | add_expr . '-' mult_expr

    '+'  shift, and go to state 208
    '-'  shift, and go to state 209

    $default  reduce using rule 154 (shift_expr)


state 240

  153 shift_expr: shift_expr TOK_OP_SHR add_expr .
  156 add_expr: add_expr . '+' mult_expr
  157         | add_expr . '-' mult_expr

    '+'  shift, and go to state 208
    '-'  shift, and go to state 209

    $default  reduce using rule 153 (shift_expr)


state 241

  156 add_expr: add_expr '+' mult_expr .
  159 mult_expr: mult_expr . '*' unary_expr
  160          | mult_expr . '/' unary_expr
  161          | mult_expr . '%' unary_expr

    '*'  shift, and go to state 210
    '/'  shift, and go to state 211
    '%'  shift, and go to state 212

    $default  reduce using rule 156 (add_expr)


state 242

  157 add_expr: add_expr '-' mult_expr .
  159 mult_expr: mult_expr . '*' unary_expr
  160          | mult_expr . '/' unary_expr
  161          | mult_expr . '%' unary_expr

    '*'  shift, and go to state 210
    '/'  shift, and go to state 211
    '%'  shift, and go to state 212

    $default  reduce using rule 157 (add_expr)


state 243

  159 mult_expr: mult_expr '*' unary_expr .

    $default  reduce using rule 159 (mult_expr)


state 244

  160 mult_expr: mult_expr '/' unary_expr .

    $default  reduce using rule 160 (mult_expr)


state 245

  161 mult_expr: mult_expr '%' unary_expr .

    $default  reduce using rule 161 (mult_expr)


state 246

   90 except_dcl_def: TOK_EXCEPTION new_scope '{' member_zlist '}' pop_scope .

    $default  reduce using rule 90 (except_dcl_def)


state 247

  186 member: type_spec declarator_list . check_semicolon
  233 declarator_list: declarator_list . check_comma declarator

    ';'  shift, and go to state 31
    ','  shift, and go to state 228

    TOK_IDENT  reduce using rule 8 (check_semicolon)
    TOK_IDENT  [reduce using rule 11 (check_comma)]
    $default   reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 263
    check_comma      go to state 229


state 248

  246 prop_hash: prop_hash ',' TOK_PROP_KEY TOK_PROP_VALUE .

    $default  reduce using rule 246 (prop_hash)


state 249

  177 enum_type: z_props TOK_ENUM @12 z_new_ident_catch '{' enumerator_list . '}'
  183 enumerator_list: enumerator_list . check_comma new_ident

    ','  shift, and go to state 228
    '}'  shift, and go to state 264

    $default  reduce using rule 11 (check_comma)

    check_comma  go to state 265


state 250

  182 enumerator_list: new_ident .

    $default  reduce using rule 182 (enumerator_list)


state 251

   33 z_inheritance: ':' . scoped_name_list

    TOK_OP_SCOPE  shift, and go to state 1
    TOK_IDENT     shift, and go to state 3

    scoped_name_list  go to state 266
    scoped_name       go to state 267
    ns_scoped_name    go to state 18
    ident             go to state 19
    ns_prev_ident     go to state 20


state 252

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance . $@3 '{' interface_body '}' pop_scope

    $default  reduce using rule 29 ($@3)

    $@3  go to state 268


state 253

   53 type_dcl_def: z_props TOK_NATIVE simple_declarator '(' $@4 TOK_NATIVE_TYPE .

    $default  reduce using rule 53 (type_dcl_def)


state 254

   69 struct_type: z_props TOK_STRUCT @5 z_new_scope_catch '{' @6 . member_list '}' pop_scope

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    type_spec              go to state 219
    simple_type_spec       go to state 120
    constr_type_spec       go to state 121
    struct_type            go to state 122
    union_type             go to state 123
    enum_type              go to state 124
    scoped_name            go to state 125
    ns_scoped_name         go to state 18
    member_list            go to state 269
    member                 go to state 270
    base_type_spec         go to state 126
    template_type_spec     go to state 127
    sequence_type          go to state 128
    floating_pt_type       go to state 129
    fixed_pt_type          go to state 130
    integer_type           go to state 131
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 132
    wide_char_type         go to state 133
    boolean_type           go to state 134
    octet_type             go to state 135
    any_type               go to state 136
    object_type            go to state 137
    typecode_type          go to state 138
    string_type            go to state 139
    wide_string_type       go to state 140
    ident                  go to state 19
    ns_prev_ident          go to state 20
    z_props                go to state 141


state 255

  205 fixed_pt_type: TOK_FIXED '<' positive_int_const ',' . integer_lit '>'

    TOK_INTEGER  shift, and go to state 148

    integer_lit  go to state 271


state 256

  200 sequence_type: TOK_SEQUENCE '<' simple_type_spec ',' . positive_int_const '>'

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    const_exp           go to state 156
    or_expr             go to state 157
    xor_expr            go to state 158
    and_expr            go to state 159
    shift_expr          go to state 160
    add_expr            go to state 161
    mult_expr           go to state 162
    unary_expr          go to state 163
    unary_op            go to state 164
    primary_expr        go to state 165
    literal             go to state 166
    scoped_name         go to state 167
    ns_scoped_name      go to state 18
    ident               go to state 19
    ns_prev_ident       go to state 20
    positive_int_const  go to state 272
    integer_lit         go to state 169
    string_lit          go to state 170
    char_lit            go to state 171
    fixed_pt_lit        go to state 172
    floating_pt_lit     go to state 173
    boolean_lit         go to state 174
    dqstring_cat        go to state 175
    dqstring            go to state 176
    sqstring            go to state 177


state 257

  201 sequence_type: TOK_SEQUENCE '<' simple_type_spec '>' .

    $default  reduce using rule 201 (sequence_type)


state 258

  233 declarator_list: declarator_list check_comma declarator .

    $default  reduce using rule 233 (declarator_list)


state 259

  244 fixed_array_size: '[' ']' .

    $default  reduce using rule 244 (fixed_array_size)


state 260

  243 fixed_array_size: '[' positive_int_const . ']'

    ']'  shift, and go to state 273


state 261

  242 fixed_array_size_list: fixed_array_size_list fixed_array_size .

    $default  reduce using rule 242 (fixed_array_size_list)


state 262

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' . switch_type_spec ')' '{' @8 switch_body '}' pop_scope

    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_LONG      shift, and go to state 274
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SHORT     shift, and go to state 59
    TOK_UNSIGNED  shift, and go to state 61
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    switch_type_spec       go to state 275
    enum_type              go to state 276
    scoped_name            go to state 277
    ns_scoped_name         go to state 18
    integer_type           go to state 278
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 279
    boolean_type           go to state 280
    ident                  go to state 19
    ns_prev_ident          go to state 20
    z_props                go to state 281


state 263

  186 member: type_spec declarator_list check_semicolon .

    $default  reduce using rule 186 (member)


state 264

  177 enum_type: z_props TOK_ENUM @12 z_new_ident_catch '{' enumerator_list '}' .

    $default  reduce using rule 177 (enum_type)


state 265

  183 enumerator_list: enumerator_list check_comma . new_ident

    TOK_IDENT  shift, and go to state 3

    ident         go to state 83
    new_ident     go to state 282
    ns_new_ident  go to state 101


state 266

   33 z_inheritance: ':' scoped_name_list .
   35 scoped_name_list: scoped_name_list . check_comma scoped_name

    ','  shift, and go to state 228

    '{'       reduce using rule 33 (z_inheritance)
    $default  reduce using rule 11 (check_comma)

    check_comma  go to state 283


state 267

   34 scoped_name_list: scoped_name .

    $default  reduce using rule 34 (scoped_name_list)


state 268

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 . '{' interface_body '}' pop_scope

    '{'  shift, and go to state 284


state 269

   69 struct_type: z_props TOK_STRUCT @5 z_new_scope_catch '{' @6 member_list . '}' pop_scope
  185 member_list: member_list . member

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '}'           shift, and go to state 285
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    type_spec              go to state 219
    simple_type_spec       go to state 120
    constr_type_spec       go to state 121
    struct_type            go to state 122
    union_type             go to state 123
    enum_type              go to state 124
    scoped_name            go to state 125
    ns_scoped_name         go to state 18
    member                 go to state 286
    base_type_spec         go to state 126
    template_type_spec     go to state 127
    sequence_type          go to state 128
    floating_pt_type       go to state 129
    fixed_pt_type          go to state 130
    integer_type           go to state 131
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 132
    wide_char_type         go to state 133
    boolean_type           go to state 134
    octet_type             go to state 135
    any_type               go to state 136
    object_type            go to state 137
    typecode_type          go to state 138
    string_type            go to state 139
    wide_string_type       go to state 140
    ident                  go to state 19
    ns_prev_ident          go to state 20
    z_props                go to state 141


state 270

  184 member_list: member .

    $default  reduce using rule 184 (member_list)


state 271

  205 fixed_pt_type: TOK_FIXED '<' positive_int_const ',' integer_lit . '>'

    '>'  shift, and go to state 287


state 272

  200 sequence_type: TOK_SEQUENCE '<' simple_type_spec ',' positive_int_const . '>'

    '>'  shift, and go to state 288


state 273

  243 fixed_array_size: '[' positive_int_const ']' .

    $default  reduce using rule 243 (fixed_array_size)


state 274

  213 signed_long_int: TOK_LONG .
  214 signed_longlong_int: TOK_LONG . TOK_LONG

    TOK_LONG  shift, and go to state 95

    $default  reduce using rule 213 (signed_long_int)


state 275

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec . ')' '{' @8 switch_body '}' pop_scope

    ')'  shift, and go to state 289


state 276

   76 switch_type_spec: enum_type .

    $default  reduce using rule 76 (switch_type_spec)


state 277

   77 switch_type_spec: scoped_name .

    $default  reduce using rule 77 (switch_type_spec)


state 278

   73 switch_type_spec: integer_type .

    $default  reduce using rule 73 (switch_type_spec)


state 279

   74 switch_type_spec: char_type .

    $default  reduce using rule 74 (switch_type_spec)


state 280

   75 switch_type_spec: boolean_type .

    $default  reduce using rule 75 (switch_type_spec)


state 281

  177 enum_type: z_props . TOK_ENUM @12 z_new_ident_catch '{' enumerator_list '}'

    TOK_ENUM  shift, and go to state 87


state 282

  183 enumerator_list: enumerator_list check_comma new_ident .

    $default  reduce using rule 183 (enumerator_list)


state 283

   35 scoped_name_list: scoped_name_list check_comma . scoped_name

    TOK_OP_SCOPE  shift, and go to state 1
    TOK_IDENT     shift, and go to state 3

    scoped_name     go to state 290
    ns_scoped_name  go to state 18
    ident           go to state 19
    ns_prev_ident   go to state 20


state 284

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' . interface_body '}' pop_scope

    $default  reduce using rule 37 (export_list)

    interface_body  go to state 291
    export_list     go to state 292


state 285

   69 struct_type: z_props TOK_STRUCT @5 z_new_scope_catch '{' @6 member_list '}' . pop_scope

    $default  reduce using rule 253 (pop_scope)

    pop_scope  go to state 293


state 286

  185 member_list: member_list member .

    $default  reduce using rule 185 (member_list)


state 287

  205 fixed_pt_type: TOK_FIXED '<' positive_int_const ',' integer_lit '>' .

    $default  reduce using rule 205 (fixed_pt_type)


state 288

  200 sequence_type: TOK_SEQUENCE '<' simple_type_spec ',' positive_int_const '>' .

    $default  reduce using rule 200 (sequence_type)


state 289

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' . '{' @8 switch_body '}' pop_scope

    '{'  shift, and go to state 294


state 290

   35 scoped_name_list: scoped_name_list check_comma scoped_name .

    $default  reduce using rule 35 (scoped_name_list)


state 291

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' interface_body . '}' pop_scope

    '}'  shift, and go to state 295


state 292

   36 interface_body: export_list .
   38 export_list: export_list . export

    TOK_DECLSPEC  shift, and go to state 2
    ';'           shift, and go to state 5

    '}'       reduce using rule 36 (interface_body)
    $default  reduce using rule 261 (z_declspec)

    useless_semicolon  go to state 296
    export             go to state 297
    type_dcl           go to state 298
    const_dcl          go to state 299
    except_dcl         go to state 300
    attr_dcl           go to state 301
    op_dcl             go to state 302
    z_declspec         go to state 303
    codefrag           go to state 304


state 293

   69 struct_type: z_props TOK_STRUCT @5 z_new_scope_catch '{' @6 member_list '}' pop_scope .

    $default  reduce using rule 69 (struct_type)


state 294

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' . @8 switch_body '}' pop_scope

    $default  reduce using rule 71 (@8)

    @8  go to state 305


state 295

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' interface_body '}' . pop_scope

    $default  reduce using rule 253 (pop_scope)

    pop_scope  go to state 306


state 296

   45 export: useless_semicolon .

    $default  reduce using rule 45 (export)


state 297

   38 export_list: export_list export .

    $default  reduce using rule 38 (export_list)


state 298

   39 export: type_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 307


state 299

   43 export: const_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 308


state 300

   40 export: except_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 309


state 301

   42 export: attr_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 310


state 302

   41 export: op_dcl . check_semicolon

    ';'  shift, and go to state 31

    ';'       [reduce using rule 8 (check_semicolon)]
    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 311


state 303

   46 type_dcl: z_declspec . type_dcl_def
   87 const_dcl: z_declspec . const_dcl_def
   89 except_dcl: z_declspec . except_dcl_def
   95 attr_dcl: z_declspec . attr_dcl_def
  110 op_dcl: z_declspec . op_dcl_def
  273 codefrag: z_declspec . TOK_CODEFRAG

    TOK_CONST      shift, and go to state 38
    TOK_EXCEPTION  shift, and go to state 39
    TOK_CODEFRAG   shift, and go to state 41
    '['            shift, and go to state 42

    '['       [reduce using rule 263 (z_props)]
    $default  reduce using rule 263 (z_props)

    type_dcl_def    go to state 43
    struct_type     go to state 44
    union_type      go to state 45
    const_dcl_def   go to state 46
    except_dcl_def  go to state 47
    attr_dcl_def    go to state 312
    op_dcl_def      go to state 313
    enum_type       go to state 48
    z_props         go to state 314


state 304

   44 export: codefrag .

    $default  reduce using rule 44 (export)


state 305

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 . switch_body '}' pop_scope

    TOK_CASE     shift, and go to state 315
    TOK_DEFAULT  shift, and go to state 316

    switch_body      go to state 317
    case_stmt_list   go to state 318
    case_stmt        go to state 319
    case_label_list  go to state 320
    case_label       go to state 321


state 306

   30 interface: z_declspec z_props TOK_INTERFACE interface_catch_ident $@2 pop_scope z_inheritance $@3 '{' interface_body '}' pop_scope .

    $default  reduce using rule 30 (interface)


state 307

   39 export: type_dcl check_semicolon .

    $default  reduce using rule 39 (export)


state 308

   43 export: const_dcl check_semicolon .

    $default  reduce using rule 43 (export)


state 309

   40 export: except_dcl check_semicolon .

    $default  reduce using rule 40 (export)


state 310

   42 export: attr_dcl check_semicolon .

    $default  reduce using rule 42 (export)


state 311

   41 export: op_dcl check_semicolon .

    $default  reduce using rule 41 (export)


state 312

   95 attr_dcl: z_declspec attr_dcl_def .

    $default  reduce using rule 95 (attr_dcl)


state 313

  110 op_dcl: z_declspec op_dcl_def .

    $default  reduce using rule 110 (op_dcl)


state 314

   47 type_dcl_def: z_props . TOK_TYPEDEF type_declarator
   51             | z_props . TOK_NATIVE simple_declarator
   53             | z_props . TOK_NATIVE simple_declarator '(' $@4 TOK_NATIVE_TYPE
   69 struct_type: z_props . TOK_STRUCT @5 z_new_scope_catch '{' @6 member_list '}' pop_scope
   72 union_type: z_props . TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope
   97 attr_dcl_def: z_props . is_readonly TOK_ATTRIBUTE @9 param_type_spec simple_declarator_list
  111 op_dcl_def: z_props . is_oneway op_type_spec new_scope parameter_dcls pop_scope is_raises_expr is_context_expr
  177 enum_type: z_props . TOK_ENUM @12 z_new_ident_catch '{' enumerator_list '}'

    TOK_ENUM      shift, and go to state 87
    TOK_NATIVE    shift, and go to state 89
    TOK_ONEWAY    shift, and go to state 322
    TOK_READONLY  shift, and go to state 323
    TOK_STRUCT    shift, and go to state 90
    TOK_TYPEDEF   shift, and go to state 91
    TOK_UNION     shift, and go to state 92

    TOK_ATTRIBUTE  reduce using rule 93 (is_readonly)
    TOK_ENUM       [reduce using rule 108 (is_oneway)]
    TOK_STRUCT     [reduce using rule 108 (is_oneway)]
    TOK_UNION      [reduce using rule 108 (is_oneway)]
    $default       reduce using rule 108 (is_oneway)

    is_readonly  go to state 324
    is_oneway    go to state 325


state 315

   85 case_label: TOK_CASE . const_exp ':'

    TOK_FALSE     shift, and go to state 145
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_TRUE      shift, and go to state 146
    TOK_FLOATP    shift, and go to state 147
    TOK_INTEGER   shift, and go to state 148
    TOK_IDENT     shift, and go to state 3
    TOK_SQSTRING  shift, and go to state 149
    TOK_DQSTRING  shift, and go to state 150
    TOK_FIXEDP    shift, and go to state 151
    '('           shift, and go to state 152
    '+'           shift, and go to state 153
    '-'           shift, and go to state 154
    '~'           shift, and go to state 155

    const_exp        go to state 326
    or_expr          go to state 157
    xor_expr         go to state 158
    and_expr         go to state 159
    shift_expr       go to state 160
    add_expr         go to state 161
    mult_expr        go to state 162
    unary_expr       go to state 163
    unary_op         go to state 164
    primary_expr     go to state 165
    literal          go to state 166
    scoped_name      go to state 167
    ns_scoped_name   go to state 18
    ident            go to state 19
    ns_prev_ident    go to state 20
    integer_lit      go to state 169
    string_lit       go to state 170
    char_lit         go to state 171
    fixed_pt_lit     go to state 172
    floating_pt_lit  go to state 173
    boolean_lit      go to state 174
    dqstring_cat     go to state 175
    dqstring         go to state 176
    sqstring         go to state 177


state 316

   86 case_label: TOK_DEFAULT . ':'

    ':'  shift, and go to state 327


state 317

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body . '}' pop_scope

    '}'  shift, and go to state 328


state 318

   78 switch_body: case_stmt_list .
   80 case_stmt_list: case_stmt_list . case_stmt

    TOK_CASE     shift, and go to state 315
    TOK_DEFAULT  shift, and go to state 316

    $default  reduce using rule 78 (switch_body)

    case_stmt        go to state 329
    case_label_list  go to state 320
    case_label       go to state 321


state 319

   79 case_stmt_list: case_stmt .

    $default  reduce using rule 79 (case_stmt_list)


state 320

   81 case_stmt: case_label_list . element_spec check_semicolon
   84 case_label_list: case_label_list . case_label

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CASE      shift, and go to state 315
    TOK_CHAR      shift, and go to state 53
    TOK_DEFAULT   shift, and go to state 316
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    type_spec              go to state 330
    simple_type_spec       go to state 120
    constr_type_spec       go to state 121
    struct_type            go to state 122
    union_type             go to state 123
    element_spec           go to state 331
    case_label             go to state 332
    enum_type              go to state 124
    scoped_name            go to state 125
    ns_scoped_name         go to state 18
    base_type_spec         go to state 126
    template_type_spec     go to state 127
    sequence_type          go to state 128
    floating_pt_type       go to state 129
    fixed_pt_type          go to state 130
    integer_type           go to state 131
    signed_int             go to state 69
    signed_short_int       go to state 70
    signed_long_int        go to state 71
    signed_longlong_int    go to state 72
    unsigned_int           go to state 73
    unsigned_short_int     go to state 74
    unsigned_long_int      go to state 75
    unsigned_longlong_int  go to state 76
    char_type              go to state 132
    wide_char_type         go to state 133
    boolean_type           go to state 134
    octet_type             go to state 135
    any_type               go to state 136
    object_type            go to state 137
    typecode_type          go to state 138
    string_type            go to state 139
    wide_string_type       go to state 140
    ident                  go to state 19
    ns_prev_ident          go to state 20
    z_props                go to state 141


state 321

   83 case_label_list: case_label .

    $default  reduce using rule 83 (case_label_list)


state 322

  109 is_oneway: TOK_ONEWAY .

    $default  reduce using rule 109 (is_oneway)


state 323

   94 is_readonly: TOK_READONLY .

    $default  reduce using rule 94 (is_readonly)


state 324

   97 attr_dcl_def: z_props is_readonly . TOK_ATTRIBUTE @9 param_type_spec simple_declarator_list

    TOK_ATTRIBUTE  shift, and go to state 333


state 325

  111 op_dcl_def: z_props is_oneway . op_type_spec new_scope parameter_dcls pop_scope is_raises_expr is_context_expr

    TOK_VOID  shift, and go to state 334

    $default  reduce using rule 112 (@10)

    op_type_spec  go to state 335
    @10           go to state 336


state 326

   85 case_label: TOK_CASE const_exp . ':'

    ':'  shift, and go to state 337


state 327

   86 case_label: TOK_DEFAULT ':' .

    $default  reduce using rule 86 (case_label)


state 328

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' . pop_scope

    $default  reduce using rule 253 (pop_scope)

    pop_scope  go to state 338


state 329

   80 case_stmt_list: case_stmt_list case_stmt .

    $default  reduce using rule 80 (case_stmt_list)


state 330

   82 element_spec: type_spec . declarator

    TOK_IDENT  shift, and go to state 3

    declarator          go to state 339
    simple_declarator   go to state 196
    complex_declarator  go to state 197
    array_declarator    go to state 198
    ident               go to state 83
    new_ident           go to state 199
    ns_new_ident        go to state 101


state 331

   81 case_stmt: case_label_list element_spec . check_semicolon

    ';'  shift, and go to state 31

    $default  reduce using rule 8 (check_semicolon)

    check_semicolon  go to state 340


state 332

   84 case_label_list: case_label_list case_label .

    $default  reduce using rule 84 (case_label_list)


state 333

   97 attr_dcl_def: z_props is_readonly TOK_ATTRIBUTE . @9 param_type_spec simple_declarator_list

    $default  reduce using rule 96 (@9)

    @9  go to state 341


state 334

  114 op_type_spec: TOK_VOID .

    $default  reduce using rule 114 (op_type_spec)


state 335

  111 op_dcl_def: z_props is_oneway op_type_spec . new_scope parameter_dcls pop_scope is_raises_expr is_context_expr

    TOK_IDENT  shift, and go to state 3

    ident         go to state 83
    new_scope     go to state 342
    ns_new_ident  go to state 85


state 336

  113 op_type_spec: @10 . op_param_type_spec

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    constr_type_spec            go to state 343
    struct_type                 go to state 122
    union_type                  go to state 123
    op_param_type_spec_illegal  go to state 344
    op_param_type_spec          go to state 345
    enum_type                   go to state 124
    scoped_name                 go to state 346
    ns_scoped_name              go to state 18
    base_type_spec              go to state 347
    sequence_type               go to state 348
    floating_pt_type            go to state 129
    fixed_pt_type               go to state 349
    integer_type                go to state 131
    signed_int                  go to state 69
    signed_short_int            go to state 70
    signed_long_int             go to state 71
    signed_longlong_int         go to state 72
    unsigned_int                go to state 73
    unsigned_short_int          go to state 74
    unsigned_long_int           go to state 75
    unsigned_longlong_int       go to state 76
    char_type                   go to state 132
    wide_char_type              go to state 133
    boolean_type                go to state 134
    octet_type                  go to state 135
    any_type                    go to state 136
    object_type                 go to state 137
    typecode_type               go to state 138
    string_type                 go to state 350
    wide_string_type            go to state 351
    ident                       go to state 19
    ns_prev_ident               go to state 20
    z_props                     go to state 141


state 337

   85 case_label: TOK_CASE const_exp ':' .

    $default  reduce using rule 85 (case_label)


state 338

   72 union_type: z_props TOK_UNION @7 z_new_scope_catch TOK_SWITCH '(' switch_type_spec ')' '{' @8 switch_body '}' pop_scope .

    $default  reduce using rule 72 (union_type)


state 339

   82 element_spec: type_spec declarator .

    $default  reduce using rule 82 (element_spec)


state 340

   81 case_stmt: case_label_list element_spec check_semicolon .

    $default  reduce using rule 81 (case_stmt)


state 341

   97 attr_dcl_def: z_props is_readonly TOK_ATTRIBUTE @9 . param_type_spec simple_declarator_list

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_VOID      shift, and go to state 352
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    constr_type_spec            go to state 343
    struct_type                 go to state 122
    union_type                  go to state 123
    param_type_spec             go to state 353
    op_param_type_spec_illegal  go to state 344
    op_param_type_spec          go to state 354
    enum_type                   go to state 124
    scoped_name                 go to state 346
    ns_scoped_name              go to state 18
    base_type_spec              go to state 347
    sequence_type               go to state 348
    floating_pt_type            go to state 129
    fixed_pt_type               go to state 349
    integer_type                go to state 131
    signed_int                  go to state 69
    signed_short_int            go to state 70
    signed_long_int             go to state 71
    signed_longlong_int         go to state 72
    unsigned_int                go to state 73
    unsigned_short_int          go to state 74
    unsigned_long_int           go to state 75
    unsigned_longlong_int       go to state 76
    char_type                   go to state 132
    wide_char_type              go to state 133
    boolean_type                go to state 134
    octet_type                  go to state 135
    any_type                    go to state 136
    object_type                 go to state 137
    typecode_type               go to state 138
    string_type                 go to state 350
    wide_string_type            go to state 351
    ident                       go to state 19
    ns_prev_ident               go to state 20
    z_props                     go to state 141


state 342

  111 op_dcl_def: z_props is_oneway op_type_spec new_scope . parameter_dcls pop_scope is_raises_expr is_context_expr

    '('  shift, and go to state 355

    parameter_dcls  go to state 356


state 343

  101 op_param_type_spec_illegal: constr_type_spec .

    $default  reduce using rule 101 (op_param_type_spec_illegal)


state 344

  107 op_param_type_spec: op_param_type_spec_illegal .

    $default  reduce using rule 107 (op_param_type_spec)


state 345

  113 op_type_spec: @10 op_param_type_spec .

    $default  reduce using rule 113 (op_type_spec)


state 346

  106 op_param_type_spec: scoped_name .

    $default  reduce using rule 106 (op_param_type_spec)


state 347

  102 op_param_type_spec: base_type_spec .

    $default  reduce using rule 102 (op_param_type_spec)


state 348

  100 op_param_type_spec_illegal: sequence_type .

    $default  reduce using rule 100 (op_param_type_spec_illegal)


state 349

  105 op_param_type_spec: fixed_pt_type .

    $default  reduce using rule 105 (op_param_type_spec)


state 350

  103 op_param_type_spec: string_type .

    $default  reduce using rule 103 (op_param_type_spec)


state 351

  104 op_param_type_spec: wide_string_type .

    $default  reduce using rule 104 (op_param_type_spec)


state 352

   99 param_type_spec: TOK_VOID .

    $default  reduce using rule 99 (param_type_spec)


state 353

   97 attr_dcl_def: z_props is_readonly TOK_ATTRIBUTE @9 param_type_spec . simple_declarator_list

    TOK_IDENT  shift, and go to state 3

    simple_declarator       go to state 357
    simple_declarator_list  go to state 358
    ident                   go to state 83
    new_ident               go to state 111
    ns_new_ident            go to state 101


state 354

   98 param_type_spec: op_param_type_spec .

    $default  reduce using rule 98 (param_type_spec)


state 355

  119 parameter_dcls: '(' . param_dcl_list is_cvarargs ')'
  120               | '(' . is_varargs ')'

    TOK_VARARGS  shift, and go to state 359
    '['          shift, and go to state 42

    ')'       reduce using rule 115 (is_varargs)
    '['       [reduce using rule 263 (z_props)]
    $default  reduce using rule 263 (z_props)

    is_varargs      go to state 360
    param_dcl_list  go to state 361
    param_dcl       go to state 362
    z_props         go to state 363


state 356

  111 op_dcl_def: z_props is_oneway op_type_spec new_scope parameter_dcls . pop_scope is_raises_expr is_context_expr

    $default  reduce using rule 253 (pop_scope)

    pop_scope  go to state 364


state 357

  238 simple_declarator_list: simple_declarator .

    $default  reduce using rule 238 (simple_declarator_list)


state 358

   97 attr_dcl_def: z_props is_readonly TOK_ATTRIBUTE @9 param_type_spec simple_declarator_list .
  239 simple_declarator_list: simple_declarator_list . check_comma simple_declarator

    ','  shift, and go to state 228

    TOK_IDENT  reduce using rule 11 (check_comma)
    TOK_IDENT  [reduce using rule 97 (attr_dcl_def)]
    $default   reduce using rule 97 (attr_dcl_def)

    check_comma  go to state 365


state 359

  116 is_varargs: TOK_VARARGS .

    $default  reduce using rule 116 (is_varargs)


state 360

  120 parameter_dcls: '(' is_varargs . ')'

    ')'  shift, and go to state 366


state 361

  119 parameter_dcls: '(' param_dcl_list . is_cvarargs ')'
  122 param_dcl_list: param_dcl_list . check_comma param_dcl

    ','  shift, and go to state 367

    ')'       reduce using rule 117 (is_cvarargs)
    $default  reduce using rule 11 (check_comma)

    check_comma  go to state 368
    is_cvarargs  go to state 369


state 362

  121 param_dcl_list: param_dcl .

    $default  reduce using rule 121 (param_dcl_list)


state 363

  124 param_dcl: z_props . param_attribute @11 param_type_spec simple_declarator

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_IN        shift, and go to state 370
    TOK_INOUT     shift, and go to state 371
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_OUT       shift, and go to state 372
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_VOID      shift, and go to state 352
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    constr_type_spec            go to state 343
    struct_type                 go to state 122
    union_type                  go to state 123
    param_type_spec             go to state 373
    op_param_type_spec_illegal  go to state 344
    op_param_type_spec          go to state 354
    param_attribute             go to state 374
    enum_type                   go to state 124
    scoped_name                 go to state 346
    ns_scoped_name              go to state 18
    base_type_spec              go to state 347
    sequence_type               go to state 348
    floating_pt_type            go to state 129
    fixed_pt_type               go to state 349
    integer_type                go to state 131
    signed_int                  go to state 69
    signed_short_int            go to state 70
    signed_long_int             go to state 71
    signed_longlong_int         go to state 72
    unsigned_int                go to state 73
    unsigned_short_int          go to state 74
    unsigned_long_int           go to state 75
    unsigned_longlong_int       go to state 76
    char_type                   go to state 132
    wide_char_type              go to state 133
    boolean_type                go to state 134
    octet_type                  go to state 135
    any_type                    go to state 136
    object_type                 go to state 137
    typecode_type               go to state 138
    string_type                 go to state 350
    wide_string_type            go to state 351
    ident                       go to state 19
    ns_prev_ident               go to state 20
    z_props                     go to state 141


state 364

  111 op_dcl_def: z_props is_oneway op_type_spec new_scope parameter_dcls pop_scope . is_raises_expr is_context_expr

    TOK_RAISES  shift, and go to state 375

    $default  reduce using rule 129 (is_raises_expr)

    is_raises_expr  go to state 376
    raises_expr     go to state 377


state 365

  239 simple_declarator_list: simple_declarator_list check_comma . simple_declarator

    TOK_IDENT  shift, and go to state 3

    simple_declarator  go to state 378
    ident              go to state 83
    new_ident          go to state 111
    ns_new_ident       go to state 101


state 366

  120 parameter_dcls: '(' is_varargs ')' .

    $default  reduce using rule 120 (parameter_dcls)


state 367

   10 check_comma: ',' .
  118 is_cvarargs: ',' . TOK_VARARGS

    TOK_VARARGS  shift, and go to state 379

    $default  reduce using rule 10 (check_comma)


state 368

  122 param_dcl_list: param_dcl_list check_comma . param_dcl

    '['  shift, and go to state 42

    '['       [reduce using rule 263 (z_props)]
    $default  reduce using rule 263 (z_props)

    param_dcl  go to state 380
    z_props    go to state 363


state 369

  119 parameter_dcls: '(' param_dcl_list is_cvarargs . ')'

    ')'  shift, and go to state 381


state 370

  125 param_attribute: TOK_IN .

    $default  reduce using rule 125 (param_attribute)


state 371

  127 param_attribute: TOK_INOUT .

    $default  reduce using rule 127 (param_attribute)


state 372

  126 param_attribute: TOK_OUT .

    $default  reduce using rule 126 (param_attribute)


state 373

  128 param_attribute: param_type_spec .

    $default  reduce using rule 128 (param_attribute)


state 374

  124 param_dcl: z_props param_attribute . @11 param_type_spec simple_declarator

    $default  reduce using rule 123 (@11)

    @11  go to state 382


state 375

  133 raises_expr: TOK_RAISES . '(' scoped_name_list ')'

    '('  shift, and go to state 383


state 376

  111 op_dcl_def: z_props is_oneway op_type_spec new_scope parameter_dcls pop_scope is_raises_expr . is_context_expr

    TOK_CONTEXT  shift, and go to state 384

    $default  reduce using rule 131 (is_context_expr)

    is_context_expr  go to state 385
    context_expr     go to state 386


state 377

  130 is_raises_expr: raises_expr .

    $default  reduce using rule 130 (is_raises_expr)


state 378

  239 simple_declarator_list: simple_declarator_list check_comma simple_declarator .

    $default  reduce using rule 239 (simple_declarator_list)


state 379

  118 is_cvarargs: ',' TOK_VARARGS .

    $default  reduce using rule 118 (is_cvarargs)


state 380

  122 param_dcl_list: param_dcl_list check_comma param_dcl .

    $default  reduce using rule 122 (param_dcl_list)


state 381

  119 parameter_dcls: '(' param_dcl_list is_cvarargs ')' .

    $default  reduce using rule 119 (parameter_dcls)


state 382

  124 param_dcl: z_props param_attribute @11 . param_type_spec simple_declarator

    TOK_ANY       shift, and go to state 113
    TOK_BOOLEAN   shift, and go to state 52
    TOK_CHAR      shift, and go to state 53
    TOK_DOUBLE    shift, and go to state 54
    TOK_FIXED     shift, and go to state 114
    TOK_FLOAT     shift, and go to state 56
    TOK_LONG      shift, and go to state 57
    TOK_OBJECT    shift, and go to state 115
    TOK_OCTET     shift, and go to state 58
    TOK_OP_SCOPE  shift, and go to state 1
    TOK_SEQUENCE  shift, and go to state 116
    TOK_SHORT     shift, and go to state 59
    TOK_STRING    shift, and go to state 60
    TOK_TYPECODE  shift, and go to state 117
    TOK_UNSIGNED  shift, and go to state 61
    TOK_VOID      shift, and go to state 352
    TOK_WCHAR     shift, and go to state 62
    TOK_WSTRING   shift, and go to state 63
    TOK_IDENT     shift, and go to state 3
    '['           shift, and go to state 42

    $default  reduce using rule 263 (z_props)

    constr_type_spec            go to state 343
    struct_type                 go to state 122
    union_type                  go to state 123
    param_type_spec             go to state 387
    op_param_type_spec_illegal  go to state 344
    op_param_type_spec          go to state 354
    enum_type                   go to state 124
    scoped_name                 go to state 346
    ns_scoped_name              go to state 18
    base_type_spec              go to state 347
    sequence_type               go to state 348
    floating_pt_type            go to state 129
    fixed_pt_type               go to state 349
    integer_type                go to state 131
    signed_int                  go to state 69
    signed_short_int            go to state 70
    signed_long_int             go to state 71
    signed_longlong_int         go to state 72
    unsigned_int                go to state 73
    unsigned_short_int          go to state 74
    unsigned_long_int           go to state 75
    unsigned_longlong_int       go to state 76
    char_type                   go to state 132
    wide_char_type              go to state 133
    boolean_type                go to state 134
    octet_type                  go to state 135
    any_type                    go to state 136
    object_type                 go to state 137
    typecode_type               go to state 138
    string_type                 go to state 350
    wide_string_type            go to state 351
    ident                       go to state 19
    ns_prev_ident               go to state 20
    z_props                     go to state 141


state 383

  133 raises_expr: TOK_RAISES '(' . scoped_name_list ')'

    TOK_OP_SCOPE  shift, and go to state 1
    TOK_IDENT     shift, and go to state 3

    scoped_name_list  go to state 388
    scoped_name       go to state 267
    ns_scoped_name    go to state 18
    ident             go to state 19
    ns_prev_ident     go to state 20


state 384

  134 context_expr: TOK_CONTEXT . '(' string_lit_list ')'

    '('  shift, and go to state 389


state 385

  111 op_dcl_def: z_props is_oneway op_type_spec new_scope parameter_dcls pop_scope is_raises_expr is_context_expr .

    $default  reduce using rule 111 (op_dcl_def)


state 386

  132 is_context_expr: context_expr .

    $default  reduce using rule 132 (is_context_expr)


state 387

  124 param_dcl: z_props param_attribute @11 param_type_spec . simple_declarator

    TOK_IDENT  shift, and go to state 3

    simple_declarator  go to state 390
    ident              go to state 83
    new_ident          go to state 111
    ns_new_ident       go to state 101


state 388

   35 scoped_name_list: scoped_name_list . check_comma scoped_name
  133 raises_expr: TOK_RAISES '(' scoped_name_list . ')'

    ','  shift, and go to state 228
    ')'  shift, and go to state 391

    $default  reduce using rule 11 (check_comma)

    check_comma  go to state 283


state 389

  134 context_expr: TOK_CONTEXT '(' . string_lit_list ')'

    TOK_DQSTRING  shift, and go to state 150

    string_lit_list  go to state 392
    string_lit       go to state 393
    dqstring_cat     go to state 175
    dqstring         go to state 176


state 390

  124 param_dcl: z_props param_attribute @11 param_type_spec simple_declarator .

    $default  reduce using rule 124 (param_dcl)


state 391

  133 raises_expr: TOK_RAISES '(' scoped_name_list ')' .

    $default  reduce using rule 133 (raises_expr)


state 392

  134 context_expr: TOK_CONTEXT '(' string_lit_list . ')'
  259 string_lit_list: string_lit_list . check_comma string_lit

    ','  shift, and go to state 228
    ')'  shift, and go to state 394

    $default  reduce using rule 11 (check_comma)

    check_comma  go to state 395


state 393

  258 string_lit_list: string_lit .

    $default  reduce using rule 258 (string_lit_list)


state 394

  134 context_expr: TOK_CONTEXT '(' string_lit_list ')' .

    $default  reduce using rule 134 (context_expr)


state 395

  259 string_lit_list: string_lit_list check_comma . string_lit

    TOK_DQSTRING  shift, and go to state 150

    string_lit    go to state 396
    dqstring_cat  go to state 175
    dqstring      go to state 176


state 396

  259 string_lit_list: string_lit_list check_comma string_lit .

    $default  reduce using rule 259 (string_lit_list)
