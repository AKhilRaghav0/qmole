/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef dynany_H
#define dynany_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/** typedefs **/
#if !defined(ORBIT_DECL_Test) && !defined(_Test_defined)
#define ORBIT_DECL_Test 1
#define _Test_defined 1
#define Test__freekids CORBA_Object__freekids
typedef CORBA_Object Test;
extern CORBA_unsigned_long Test__classid;
#if !defined(TC_IMPL_TC_Test_0)
#define TC_IMPL_TC_Test_0 'd'
#define TC_IMPL_TC_Test_1 'y'
#define TC_IMPL_TC_Test_2 'n'
#define TC_IMPL_TC_Test_3 'a'
#define TC_IMPL_TC_Test_4 'n'
#define TC_IMPL_TC_Test_5 'y'
#ifdef ORBIT_IDL_C_IMODULE_dynany
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_Test_struct;
#define TC_Test ((CORBA_TypeCode)&TC_Test_struct)
#endif
#endif
#if !defined(_Test_MyArray_defined)
#define _Test_MyArray_defined 1
typedef CORBA_double Test_MyArray[100];
typedef CORBA_double Test_MyArray_slice;
#if !defined(TC_IMPL_TC_Test_MyArray_0)
#define TC_IMPL_TC_Test_MyArray_0 'd'
#define TC_IMPL_TC_Test_MyArray_1 'y'
#define TC_IMPL_TC_Test_MyArray_2 'n'
#define TC_IMPL_TC_Test_MyArray_3 'a'
#define TC_IMPL_TC_Test_MyArray_4 'n'
#define TC_IMPL_TC_Test_MyArray_5 'y'
#ifdef ORBIT_IDL_C_IMODULE_dynany
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_Test_MyArray_struct;
#define TC_Test_MyArray ((CORBA_TypeCode)&TC_Test_MyArray_struct)
#endif
#define Test_MyArray__alloc() ((Test_MyArray_slice *)ORBit_small_alloc (TC_Test_MyArray))
#define Test_MyArray__freekids(m,d) ORBit_small_freekids (TC_Test_MyArray,(m),(d))
#endif
#if !defined(_Test_Fishy_defined)
#define _Test_Fishy_defined 1
typedef enum {
  Test_KIPPER,
  Test_BLOATER,
  Test_HERRING
} Test_Fishy;
#if !defined(TC_IMPL_TC_Test_Fishy_0)
#define TC_IMPL_TC_Test_Fishy_0 'd'
#define TC_IMPL_TC_Test_Fishy_1 'y'
#define TC_IMPL_TC_Test_Fishy_2 'n'
#define TC_IMPL_TC_Test_Fishy_3 'a'
#define TC_IMPL_TC_Test_Fishy_4 'n'
#define TC_IMPL_TC_Test_Fishy_5 'y'
#ifdef ORBIT_IDL_C_IMODULE_dynany
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_Test_Fishy_struct;
#define TC_Test_Fishy ((CORBA_TypeCode)&TC_Test_Fishy_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet)
#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 'd'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'y'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'a'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 'y'
#if !defined(_CORBA_sequence_CORBA_octet_defined)
#define _CORBA_sequence_CORBA_octet_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_octet* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_octet;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 'd'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'y'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'a'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 'y'
#ifdef ORBIT_IDL_C_IMODULE_dynany
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_octet_struct;
#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
#endif
#define CORBA_sequence_CORBA_octet__alloc() ((CORBA_sequence_CORBA_octet *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
#define CORBA_sequence_CORBA_octet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#endif
#if !defined(_Test_OSeq_defined)
#define _Test_OSeq_defined 1
typedef CORBA_sequence_CORBA_octet Test_OSeq;
#define Test_OSeq_marshal(x,y,z) CORBA_sequence_CORBA_octet_marshal((x),(y),(z))
#define Test_OSeq_demarshal(x,y,z,i) CORBA_sequence_CORBA_octet_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_Test_OSeq_0)
#define TC_IMPL_TC_Test_OSeq_0 'd'
#define TC_IMPL_TC_Test_OSeq_1 'y'
#define TC_IMPL_TC_Test_OSeq_2 'n'
#define TC_IMPL_TC_Test_OSeq_3 'a'
#define TC_IMPL_TC_Test_OSeq_4 'n'
#define TC_IMPL_TC_Test_OSeq_5 'y'
#ifdef ORBIT_IDL_C_IMODULE_dynany
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_Test_OSeq_struct;
#define TC_Test_OSeq ((CORBA_TypeCode)&TC_Test_OSeq_struct)
#endif
#define Test_OSeq__alloc() ((Test_OSeq *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
#define Test_OSeq__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
#define Test_OSeq_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
#endif
#if !defined(_Test_English_defined)
#define _Test_English_defined 1
typedef struct Test_English_type Test_English;
struct Test_English_type {
CORBA_unsigned_long _d;
union {
CORBA_long tgw;
CORBA_double nut;
CORBA_string atl;
Test_Fishy rmt;
Test_OSeq ibid;
} _u;
};
#if !defined(TC_IMPL_TC_Test_English_0)
#define TC_IMPL_TC_Test_English_0 'd'
#define TC_IMPL_TC_Test_English_1 'y'
#define TC_IMPL_TC_Test_English_2 'n'
#define TC_IMPL_TC_Test_English_3 'a'
#define TC_IMPL_TC_Test_English_4 'n'
#define TC_IMPL_TC_Test_English_5 'y'
#ifdef ORBIT_IDL_C_IMODULE_dynany
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_Test_English_struct;
#define TC_Test_English ((CORBA_TypeCode)&TC_Test_English_struct)
#endif
#define Test_English__alloc() ((Test_English *)ORBit_small_alloc (TC_Test_English))
#define Test_English__freekids(m,d) ORBit_small_freekids (TC_Test_English,(m),(d))
#endif
#if !defined(_Test_Unions_defined)
#define _Test_Unions_defined 1
typedef struct Test_Unions_type Test_Unions;
struct Test_Unions_type {
CORBA_long tgw;
CORBA_double nut;
CORBA_string atl;
Test_Fishy rmt;
Test_OSeq ibid;
};

#if !defined(TC_IMPL_TC_Test_Unions_0)
#define TC_IMPL_TC_Test_Unions_0 'd'
#define TC_IMPL_TC_Test_Unions_1 'y'
#define TC_IMPL_TC_Test_Unions_2 'n'
#define TC_IMPL_TC_Test_Unions_3 'a'
#define TC_IMPL_TC_Test_Unions_4 'n'
#define TC_IMPL_TC_Test_Unions_5 'y'
#ifdef ORBIT_IDL_C_IMODULE_dynany
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_Test_Unions_struct;
#define TC_Test_Unions ((CORBA_TypeCode)&TC_Test_Unions_struct)
#endif
#define Test_Unions__alloc() ((Test_Unions *)ORBit_small_alloc (TC_Test_Unions))
#define Test_Unions__freekids(m,d) ORBit_small_freekids (TC_Test_Unions,(m),(d))
#endif

/** POA structures **/
#ifndef _defined_POA_Test
#define _defined_POA_Test 1
typedef struct {
  void *_private;
} POA_Test__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_Test__epv *Test_epv;
} POA_Test__vepv;
typedef struct {
  void *_private;
  POA_Test__vepv *vepv;
} POA_Test;
extern void POA_Test__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_Test__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_Test */

/** skel prototypes **/

/** stub prototypes **/
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_dynany
static 
#else
extern 
#endif
ORBit_IInterface Test__iinterface;
#define Test_IMETHODS_LEN 0
#define Test__imethods (ORBit_IMethod*) NULL

/** IMethods index */

#ifndef __ORBIT_IMETHODS_INDEX
#define __ORBIT_IMETHODS_INDEX
#define ORBIT_IMETHODS_INDEX(m) (m ## __imethods_index)
#endif /* __ORBIT_IMETHODS_INDEX */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif /* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
