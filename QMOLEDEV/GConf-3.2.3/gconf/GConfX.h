/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef GConfX_H
#define GConfX_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/** typedefs **/
#if !defined(_ConfigBasicValueType_defined)
#define _ConfigBasicValueType_defined 1
typedef enum {
  BInvalidVal,
  BIntVal,
  BStringVal,
  BFloatVal,
  BBoolVal,
  BSchemaVal
} ConfigBasicValueType;
#if !defined(TC_IMPL_TC_ConfigBasicValueType_0)
#define TC_IMPL_TC_ConfigBasicValueType_0 'G'
#define TC_IMPL_TC_ConfigBasicValueType_1 'C'
#define TC_IMPL_TC_ConfigBasicValueType_2 'o'
#define TC_IMPL_TC_ConfigBasicValueType_3 'n'
#define TC_IMPL_TC_ConfigBasicValueType_4 'f'
#define TC_IMPL_TC_ConfigBasicValueType_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigBasicValueType_struct;
#define TC_ConfigBasicValueType ((CORBA_TypeCode)&TC_ConfigBasicValueType_struct)
#endif
#endif
#if !defined(_ConfigValueType_defined)
#define _ConfigValueType_defined 1
typedef enum {
  InvalidVal,
  IntVal,
  StringVal,
  FloatVal,
  BoolVal,
  SchemaVal,
  ListVal,
  PairVal
} ConfigValueType;
#if !defined(TC_IMPL_TC_ConfigValueType_0)
#define TC_IMPL_TC_ConfigValueType_0 'G'
#define TC_IMPL_TC_ConfigValueType_1 'C'
#define TC_IMPL_TC_ConfigValueType_2 'o'
#define TC_IMPL_TC_ConfigValueType_3 'n'
#define TC_IMPL_TC_ConfigValueType_4 'f'
#define TC_IMPL_TC_ConfigValueType_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigValueType_struct;
#define TC_ConfigValueType ((CORBA_TypeCode)&TC_ConfigValueType_struct)
#endif
#endif
#if !defined(_ConfigSchema_defined)
#define _ConfigSchema_defined 1
typedef struct ConfigSchema_type ConfigSchema;
struct ConfigSchema_type {
ConfigValueType value_type;
ConfigValueType value_list_type;
ConfigValueType value_car_type;
ConfigValueType value_cdr_type;
CORBA_string locale;
CORBA_string short_desc;
CORBA_string long_desc;
CORBA_string owner;
CORBA_string encoded_default_value;
};

#if !defined(TC_IMPL_TC_ConfigSchema_0)
#define TC_IMPL_TC_ConfigSchema_0 'G'
#define TC_IMPL_TC_ConfigSchema_1 'C'
#define TC_IMPL_TC_ConfigSchema_2 'o'
#define TC_IMPL_TC_ConfigSchema_3 'n'
#define TC_IMPL_TC_ConfigSchema_4 'f'
#define TC_IMPL_TC_ConfigSchema_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigSchema_struct;
#define TC_ConfigSchema ((CORBA_TypeCode)&TC_ConfigSchema_struct)
#endif
#define ConfigSchema__alloc() ((ConfigSchema *)ORBit_small_alloc (TC_ConfigSchema))
#define ConfigSchema__freekids(m,d) ORBit_small_freekids (TC_ConfigSchema,(m),(d))
#endif
#if !defined(_ConfigBasicValue_defined)
#define _ConfigBasicValue_defined 1
typedef struct ConfigBasicValue_type ConfigBasicValue;
struct ConfigBasicValue_type {
ConfigBasicValueType _d;
union {
CORBA_long dummy;
CORBA_long int_value;
CORBA_string string_value;
CORBA_float float_value;
CORBA_boolean bool_value;
ConfigSchema schema_value;
} _u;
};
#if !defined(TC_IMPL_TC_ConfigBasicValue_0)
#define TC_IMPL_TC_ConfigBasicValue_0 'G'
#define TC_IMPL_TC_ConfigBasicValue_1 'C'
#define TC_IMPL_TC_ConfigBasicValue_2 'o'
#define TC_IMPL_TC_ConfigBasicValue_3 'n'
#define TC_IMPL_TC_ConfigBasicValue_4 'f'
#define TC_IMPL_TC_ConfigBasicValue_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigBasicValue_struct;
#define TC_ConfigBasicValue ((CORBA_TypeCode)&TC_ConfigBasicValue_struct)
#endif
#define ConfigBasicValue__alloc() ((ConfigBasicValue *)ORBit_small_alloc (TC_ConfigBasicValue))
#define ConfigBasicValue__freekids(m,d) ORBit_small_freekids (TC_ConfigBasicValue,(m),(d))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_ConfigBasicValue)
#define ORBIT_DECL_CORBA_sequence_ConfigBasicValue 1
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_0 'G'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_1 'C'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_2 'o'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_3 'n'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_4 'f'
#define ORBIT_IMPL_CORBA_sequence_ConfigBasicValue_5 'X'
#if !defined(_CORBA_sequence_ConfigBasicValue_defined)
#define _CORBA_sequence_ConfigBasicValue_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; ConfigBasicValue* _buffer; CORBA_boolean _release; } CORBA_sequence_ConfigBasicValue;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_0)
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_0 'G'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_1 'C'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_2 'o'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_3 'n'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_4 'f'
#define TC_IMPL_TC_CORBA_sequence_ConfigBasicValue_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_ConfigBasicValue_struct;
#define TC_CORBA_sequence_ConfigBasicValue ((CORBA_TypeCode)&TC_CORBA_sequence_ConfigBasicValue_struct)
#endif
#define CORBA_sequence_ConfigBasicValue__alloc() ((CORBA_sequence_ConfigBasicValue *)ORBit_small_alloc (TC_CORBA_sequence_ConfigBasicValue))
#define CORBA_sequence_ConfigBasicValue__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_ConfigBasicValue,(m),(d))
#define CORBA_sequence_ConfigBasicValue_allocbuf(l) ((ConfigBasicValue*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigBasicValue, (l)))
#define CORBA_sequence_ConfigBasicValue_allocbuf(l) ((ConfigBasicValue*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigBasicValue, (l)))
#endif
#if !defined(_BasicValueList_defined)
#define _BasicValueList_defined 1
typedef CORBA_sequence_ConfigBasicValue BasicValueList;
#define BasicValueList_marshal(x,y,z) CORBA_sequence_ConfigBasicValue_marshal((x),(y),(z))
#define BasicValueList_demarshal(x,y,z,i) CORBA_sequence_ConfigBasicValue_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_BasicValueList_0)
#define TC_IMPL_TC_BasicValueList_0 'G'
#define TC_IMPL_TC_BasicValueList_1 'C'
#define TC_IMPL_TC_BasicValueList_2 'o'
#define TC_IMPL_TC_BasicValueList_3 'n'
#define TC_IMPL_TC_BasicValueList_4 'f'
#define TC_IMPL_TC_BasicValueList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_BasicValueList_struct;
#define TC_BasicValueList ((CORBA_TypeCode)&TC_BasicValueList_struct)
#endif
#define BasicValueList__alloc() ((BasicValueList *)ORBit_small_alloc (TC_CORBA_sequence_ConfigBasicValue))
#define BasicValueList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_ConfigBasicValue,(m),(d))
#define BasicValueList_allocbuf(l) ((ConfigBasicValue*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigBasicValue, (l)))
#endif
#if !defined(_ConfigList_defined)
#define _ConfigList_defined 1
typedef struct ConfigList_type ConfigList;
struct ConfigList_type {
BasicValueList seq;
ConfigBasicValueType list_type;
};

#if !defined(TC_IMPL_TC_ConfigList_0)
#define TC_IMPL_TC_ConfigList_0 'G'
#define TC_IMPL_TC_ConfigList_1 'C'
#define TC_IMPL_TC_ConfigList_2 'o'
#define TC_IMPL_TC_ConfigList_3 'n'
#define TC_IMPL_TC_ConfigList_4 'f'
#define TC_IMPL_TC_ConfigList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigList_struct;
#define TC_ConfigList ((CORBA_TypeCode)&TC_ConfigList_struct)
#endif
#define ConfigList__alloc() ((ConfigList *)ORBit_small_alloc (TC_ConfigList))
#define ConfigList__freekids(m,d) ORBit_small_freekids (TC_ConfigList,(m),(d))
#endif
#if !defined(_ConfigValue_defined)
#define _ConfigValue_defined 1
typedef struct ConfigValue_type ConfigValue;
struct ConfigValue_type {
ConfigValueType _d;
union {
CORBA_long dummy;
CORBA_long int_value;
CORBA_string string_value;
CORBA_float float_value;
CORBA_boolean bool_value;
ConfigSchema schema_value;
ConfigList list_value;
BasicValueList pair_value;
} _u;
};
#if !defined(TC_IMPL_TC_ConfigValue_0)
#define TC_IMPL_TC_ConfigValue_0 'G'
#define TC_IMPL_TC_ConfigValue_1 'C'
#define TC_IMPL_TC_ConfigValue_2 'o'
#define TC_IMPL_TC_ConfigValue_3 'n'
#define TC_IMPL_TC_ConfigValue_4 'f'
#define TC_IMPL_TC_ConfigValue_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigValue_struct;
#define TC_ConfigValue ((CORBA_TypeCode)&TC_ConfigValue_struct)
#endif
#define ConfigValue__alloc() ((ConfigValue *)ORBit_small_alloc (TC_ConfigValue))
#define ConfigValue__freekids(m,d) ORBit_small_freekids (TC_ConfigValue,(m),(d))
#endif
#if !defined(_ConfigStringProperty_defined)
#define _ConfigStringProperty_defined 1
typedef struct ConfigStringProperty_type ConfigStringProperty;
struct ConfigStringProperty_type {
CORBA_string key;
CORBA_string value;
};

#if !defined(TC_IMPL_TC_ConfigStringProperty_0)
#define TC_IMPL_TC_ConfigStringProperty_0 'G'
#define TC_IMPL_TC_ConfigStringProperty_1 'C'
#define TC_IMPL_TC_ConfigStringProperty_2 'o'
#define TC_IMPL_TC_ConfigStringProperty_3 'n'
#define TC_IMPL_TC_ConfigStringProperty_4 'f'
#define TC_IMPL_TC_ConfigStringProperty_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigStringProperty_struct;
#define TC_ConfigStringProperty ((CORBA_TypeCode)&TC_ConfigStringProperty_struct)
#endif
#define ConfigStringProperty__alloc() ((ConfigStringProperty *)ORBit_small_alloc (TC_ConfigStringProperty))
#define ConfigStringProperty__freekids(m,d) ORBit_small_freekids (TC_ConfigStringProperty,(m),(d))
#endif
#if !defined(ORBIT_DECL_ConfigDatabase) && !defined(_ConfigDatabase_defined)
#define ORBIT_DECL_ConfigDatabase 1
#define _ConfigDatabase_defined 1
#define ConfigDatabase__freekids CORBA_Object__freekids
typedef CORBA_Object ConfigDatabase;
extern CORBA_unsigned_long ConfigDatabase__classid;
#if !defined(TC_IMPL_TC_ConfigDatabase_0)
#define TC_IMPL_TC_ConfigDatabase_0 'G'
#define TC_IMPL_TC_ConfigDatabase_1 'C'
#define TC_IMPL_TC_ConfigDatabase_2 'o'
#define TC_IMPL_TC_ConfigDatabase_3 'n'
#define TC_IMPL_TC_ConfigDatabase_4 'f'
#define TC_IMPL_TC_ConfigDatabase_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase_struct;
#define TC_ConfigDatabase ((CORBA_TypeCode)&TC_ConfigDatabase_struct)
#endif
#endif
#if !defined(ORBIT_DECL_ConfigListener) && !defined(_ConfigListener_defined)
#define ORBIT_DECL_ConfigListener 1
#define _ConfigListener_defined 1
#define ConfigListener__freekids CORBA_Object__freekids
typedef CORBA_Object ConfigListener;
extern CORBA_unsigned_long ConfigListener__classid;
#if !defined(TC_IMPL_TC_ConfigListener_0)
#define TC_IMPL_TC_ConfigListener_0 'G'
#define TC_IMPL_TC_ConfigListener_1 'C'
#define TC_IMPL_TC_ConfigListener_2 'o'
#define TC_IMPL_TC_ConfigListener_3 'n'
#define TC_IMPL_TC_ConfigListener_4 'f'
#define TC_IMPL_TC_ConfigListener_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigListener_struct;
#define TC_ConfigListener ((CORBA_TypeCode)&TC_ConfigListener_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'X'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_string* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_ConfigListener_KeyList_defined)
#define _ConfigListener_KeyList_defined 1
typedef CORBA_sequence_CORBA_string ConfigListener_KeyList;
#define ConfigListener_KeyList_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define ConfigListener_KeyList_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigListener_KeyList_0)
#define TC_IMPL_TC_ConfigListener_KeyList_0 'G'
#define TC_IMPL_TC_ConfigListener_KeyList_1 'C'
#define TC_IMPL_TC_ConfigListener_KeyList_2 'o'
#define TC_IMPL_TC_ConfigListener_KeyList_3 'n'
#define TC_IMPL_TC_ConfigListener_KeyList_4 'f'
#define TC_IMPL_TC_ConfigListener_KeyList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigListener_KeyList_struct;
#define TC_ConfigListener_KeyList ((CORBA_TypeCode)&TC_ConfigListener_KeyList_struct)
#endif
#define ConfigListener_KeyList__alloc() ((ConfigListener_KeyList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define ConfigListener_KeyList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define ConfigListener_KeyList_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_ConfigErrorType_defined)
#define _ConfigErrorType_defined 1
typedef enum {
  ConfigFailed,
  ConfigNoPermission,
  ConfigBadAddress,
  ConfigBadKey,
  ConfigParseError,
  ConfigCorrupt,
  ConfigTypeMismatch,
  ConfigIsDir,
  ConfigIsKey,
  ConfigOverridden,
  ConfigLockFailed,
  ConfigNoWritableDatabase,
  ConfigInShutdown
} ConfigErrorType;
#if !defined(TC_IMPL_TC_ConfigErrorType_0)
#define TC_IMPL_TC_ConfigErrorType_0 'G'
#define TC_IMPL_TC_ConfigErrorType_1 'C'
#define TC_IMPL_TC_ConfigErrorType_2 'o'
#define TC_IMPL_TC_ConfigErrorType_3 'n'
#define TC_IMPL_TC_ConfigErrorType_4 'f'
#define TC_IMPL_TC_ConfigErrorType_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigErrorType_struct;
#define TC_ConfigErrorType ((CORBA_TypeCode)&TC_ConfigErrorType_struct)
#endif
#endif
#undef ex_ConfigException
#define ex_ConfigException "IDL:ConfigException:1.0"
#if !defined(_ConfigException_defined)
#define _ConfigException_defined 1
typedef struct ConfigException_type ConfigException;
struct ConfigException_type {
ConfigErrorType err_no;
CORBA_string message;
};

#if !defined(TC_IMPL_TC_ConfigException_0)
#define TC_IMPL_TC_ConfigException_0 'G'
#define TC_IMPL_TC_ConfigException_1 'C'
#define TC_IMPL_TC_ConfigException_2 'o'
#define TC_IMPL_TC_ConfigException_3 'n'
#define TC_IMPL_TC_ConfigException_4 'f'
#define TC_IMPL_TC_ConfigException_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigException_struct;
#define TC_ConfigException ((CORBA_TypeCode)&TC_ConfigException_struct)
#endif
#define ConfigException__alloc() ((ConfigException *)ORBit_small_alloc (TC_ConfigException))
#define ConfigException__freekids(m,d) ORBit_small_freekids (TC_ConfigException,(m),(d))
#endif
#if !defined(ORBIT_DECL_ConfigDatabase) && !defined(_ConfigDatabase_defined)
#define ORBIT_DECL_ConfigDatabase 1
#define _ConfigDatabase_defined 1
#define ConfigDatabase__freekids CORBA_Object__freekids
typedef CORBA_Object ConfigDatabase;
extern CORBA_unsigned_long ConfigDatabase__classid;
#if !defined(TC_IMPL_TC_ConfigDatabase_0)
#define TC_IMPL_TC_ConfigDatabase_0 'G'
#define TC_IMPL_TC_ConfigDatabase_1 'C'
#define TC_IMPL_TC_ConfigDatabase_2 'o'
#define TC_IMPL_TC_ConfigDatabase_3 'n'
#define TC_IMPL_TC_ConfigDatabase_4 'f'
#define TC_IMPL_TC_ConfigDatabase_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase_struct;
#define TC_ConfigDatabase ((CORBA_TypeCode)&TC_ConfigDatabase_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'X'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_string* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_ConfigDatabase_KeyList_defined)
#define _ConfigDatabase_KeyList_defined 1
typedef CORBA_sequence_CORBA_string ConfigDatabase_KeyList;
#define ConfigDatabase_KeyList_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define ConfigDatabase_KeyList_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigDatabase_KeyList_0)
#define TC_IMPL_TC_ConfigDatabase_KeyList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_KeyList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_KeyList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_KeyList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_KeyList_4 'f'
#define TC_IMPL_TC_ConfigDatabase_KeyList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase_KeyList_struct;
#define TC_ConfigDatabase_KeyList ((CORBA_TypeCode)&TC_ConfigDatabase_KeyList_struct)
#endif
#define ConfigDatabase_KeyList__alloc() ((ConfigDatabase_KeyList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define ConfigDatabase_KeyList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define ConfigDatabase_KeyList_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_ConfigValue)
#define ORBIT_DECL_CORBA_sequence_ConfigValue 1
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_0 'G'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_1 'C'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_2 'o'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_3 'n'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_4 'f'
#define ORBIT_IMPL_CORBA_sequence_ConfigValue_5 'X'
#if !defined(_CORBA_sequence_ConfigValue_defined)
#define _CORBA_sequence_ConfigValue_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; ConfigValue* _buffer; CORBA_boolean _release; } CORBA_sequence_ConfigValue;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_ConfigValue_0)
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_0 'G'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_1 'C'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_2 'o'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_3 'n'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_4 'f'
#define TC_IMPL_TC_CORBA_sequence_ConfigValue_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_ConfigValue_struct;
#define TC_CORBA_sequence_ConfigValue ((CORBA_TypeCode)&TC_CORBA_sequence_ConfigValue_struct)
#endif
#define CORBA_sequence_ConfigValue__alloc() ((CORBA_sequence_ConfigValue *)ORBit_small_alloc (TC_CORBA_sequence_ConfigValue))
#define CORBA_sequence_ConfigValue__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_ConfigValue,(m),(d))
#define CORBA_sequence_ConfigValue_allocbuf(l) ((ConfigValue*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigValue, (l)))
#define CORBA_sequence_ConfigValue_allocbuf(l) ((ConfigValue*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigValue, (l)))
#endif
#if !defined(_ConfigDatabase_ValueList_defined)
#define _ConfigDatabase_ValueList_defined 1
typedef CORBA_sequence_ConfigValue ConfigDatabase_ValueList;
#define ConfigDatabase_ValueList_marshal(x,y,z) CORBA_sequence_ConfigValue_marshal((x),(y),(z))
#define ConfigDatabase_ValueList_demarshal(x,y,z,i) CORBA_sequence_ConfigValue_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigDatabase_ValueList_0)
#define TC_IMPL_TC_ConfigDatabase_ValueList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_ValueList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_ValueList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_ValueList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_ValueList_4 'f'
#define TC_IMPL_TC_ConfigDatabase_ValueList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase_ValueList_struct;
#define TC_ConfigDatabase_ValueList ((CORBA_TypeCode)&TC_ConfigDatabase_ValueList_struct)
#endif
#define ConfigDatabase_ValueList__alloc() ((ConfigDatabase_ValueList *)ORBit_small_alloc (TC_CORBA_sequence_ConfigValue))
#define ConfigDatabase_ValueList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_ConfigValue,(m),(d))
#define ConfigDatabase_ValueList_allocbuf(l) ((ConfigValue*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigValue, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_boolean)
#define ORBIT_DECL_CORBA_sequence_CORBA_boolean 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_4 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_5 'X'
#if !defined(_CORBA_sequence_CORBA_boolean_defined)
#define _CORBA_sequence_CORBA_boolean_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_boolean* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_boolean;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_4 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_boolean_struct;
#define TC_CORBA_sequence_CORBA_boolean ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_boolean_struct)
#endif
#define CORBA_sequence_CORBA_boolean__alloc() ((CORBA_sequence_CORBA_boolean *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_boolean))
#define CORBA_sequence_CORBA_boolean__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_boolean,(m),(d))
#define CORBA_sequence_CORBA_boolean_allocbuf(l) ((CORBA_boolean*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_boolean, (l)))
#define CORBA_sequence_CORBA_boolean_allocbuf(l) ((CORBA_boolean*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_boolean, (l)))
#endif
#if !defined(_ConfigDatabase_IsDefaultList_defined)
#define _ConfigDatabase_IsDefaultList_defined 1
typedef CORBA_sequence_CORBA_boolean ConfigDatabase_IsDefaultList;
#define ConfigDatabase_IsDefaultList_marshal(x,y,z) CORBA_sequence_CORBA_boolean_marshal((x),(y),(z))
#define ConfigDatabase_IsDefaultList_demarshal(x,y,z,i) CORBA_sequence_CORBA_boolean_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigDatabase_IsDefaultList_0)
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_4 'f'
#define TC_IMPL_TC_ConfigDatabase_IsDefaultList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase_IsDefaultList_struct;
#define TC_ConfigDatabase_IsDefaultList ((CORBA_TypeCode)&TC_ConfigDatabase_IsDefaultList_struct)
#endif
#define ConfigDatabase_IsDefaultList__alloc() ((ConfigDatabase_IsDefaultList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_boolean))
#define ConfigDatabase_IsDefaultList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_boolean,(m),(d))
#define ConfigDatabase_IsDefaultList_allocbuf(l) ((CORBA_boolean*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_boolean, (l)))
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_boolean)
#define ORBIT_DECL_CORBA_sequence_CORBA_boolean 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_4 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_boolean_5 'X'
#if !defined(_CORBA_sequence_CORBA_boolean_defined)
#define _CORBA_sequence_CORBA_boolean_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_boolean* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_boolean;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_4 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_boolean_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_boolean_struct;
#define TC_CORBA_sequence_CORBA_boolean ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_boolean_struct)
#endif
#define CORBA_sequence_CORBA_boolean__alloc() ((CORBA_sequence_CORBA_boolean *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_boolean))
#define CORBA_sequence_CORBA_boolean__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_boolean,(m),(d))
#define CORBA_sequence_CORBA_boolean_allocbuf(l) ((CORBA_boolean*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_boolean, (l)))
#define CORBA_sequence_CORBA_boolean_allocbuf(l) ((CORBA_boolean*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_boolean, (l)))
#endif
#if !defined(_ConfigDatabase_IsWritableList_defined)
#define _ConfigDatabase_IsWritableList_defined 1
typedef CORBA_sequence_CORBA_boolean ConfigDatabase_IsWritableList;
#define ConfigDatabase_IsWritableList_marshal(x,y,z) CORBA_sequence_CORBA_boolean_marshal((x),(y),(z))
#define ConfigDatabase_IsWritableList_demarshal(x,y,z,i) CORBA_sequence_CORBA_boolean_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigDatabase_IsWritableList_0)
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_0 'G'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_1 'C'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_2 'o'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_3 'n'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_4 'f'
#define TC_IMPL_TC_ConfigDatabase_IsWritableList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase_IsWritableList_struct;
#define TC_ConfigDatabase_IsWritableList ((CORBA_TypeCode)&TC_ConfigDatabase_IsWritableList_struct)
#endif
#define ConfigDatabase_IsWritableList__alloc() ((ConfigDatabase_IsWritableList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_boolean))
#define ConfigDatabase_IsWritableList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_boolean,(m),(d))
#define ConfigDatabase_IsWritableList_allocbuf(l) ((CORBA_boolean*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_boolean, (l)))
#endif
#if !defined(ORBIT_DECL_ConfigDatabase2) && !defined(_ConfigDatabase2_defined)
#define ORBIT_DECL_ConfigDatabase2 1
#define _ConfigDatabase2_defined 1
#define ConfigDatabase2__freekids CORBA_Object__freekids
typedef CORBA_Object ConfigDatabase2;
extern CORBA_unsigned_long ConfigDatabase2__classid;
#if !defined(TC_IMPL_TC_ConfigDatabase2_0)
#define TC_IMPL_TC_ConfigDatabase2_0 'G'
#define TC_IMPL_TC_ConfigDatabase2_1 'C'
#define TC_IMPL_TC_ConfigDatabase2_2 'o'
#define TC_IMPL_TC_ConfigDatabase2_3 'n'
#define TC_IMPL_TC_ConfigDatabase2_4 'f'
#define TC_IMPL_TC_ConfigDatabase2_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase2_struct;
#define TC_ConfigDatabase2 ((CORBA_TypeCode)&TC_ConfigDatabase2_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'X'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_string* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_ConfigDatabase2_SchemaNameList_defined)
#define _ConfigDatabase2_SchemaNameList_defined 1
typedef CORBA_sequence_CORBA_string ConfigDatabase2_SchemaNameList;
#define ConfigDatabase2_SchemaNameList_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define ConfigDatabase2_SchemaNameList_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigDatabase2_SchemaNameList_0)
#define TC_IMPL_TC_ConfigDatabase2_SchemaNameList_0 'G'
#define TC_IMPL_TC_ConfigDatabase2_SchemaNameList_1 'C'
#define TC_IMPL_TC_ConfigDatabase2_SchemaNameList_2 'o'
#define TC_IMPL_TC_ConfigDatabase2_SchemaNameList_3 'n'
#define TC_IMPL_TC_ConfigDatabase2_SchemaNameList_4 'f'
#define TC_IMPL_TC_ConfigDatabase2_SchemaNameList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase2_SchemaNameList_struct;
#define TC_ConfigDatabase2_SchemaNameList ((CORBA_TypeCode)&TC_ConfigDatabase2_SchemaNameList_struct)
#endif
#define ConfigDatabase2_SchemaNameList__alloc() ((ConfigDatabase2_SchemaNameList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define ConfigDatabase2_SchemaNameList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define ConfigDatabase2_SchemaNameList_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(ORBIT_DECL_ConfigDatabase3) && !defined(_ConfigDatabase3_defined)
#define ORBIT_DECL_ConfigDatabase3 1
#define _ConfigDatabase3_defined 1
#define ConfigDatabase3__freekids CORBA_Object__freekids
typedef CORBA_Object ConfigDatabase3;
extern CORBA_unsigned_long ConfigDatabase3__classid;
#if !defined(TC_IMPL_TC_ConfigDatabase3_0)
#define TC_IMPL_TC_ConfigDatabase3_0 'G'
#define TC_IMPL_TC_ConfigDatabase3_1 'C'
#define TC_IMPL_TC_ConfigDatabase3_2 'o'
#define TC_IMPL_TC_ConfigDatabase3_3 'n'
#define TC_IMPL_TC_ConfigDatabase3_4 'f'
#define TC_IMPL_TC_ConfigDatabase3_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase3_struct;
#define TC_ConfigDatabase3 ((CORBA_TypeCode)&TC_ConfigDatabase3_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_ConfigStringProperty)
#define ORBIT_DECL_CORBA_sequence_ConfigStringProperty 1
#define ORBIT_IMPL_CORBA_sequence_ConfigStringProperty_0 'G'
#define ORBIT_IMPL_CORBA_sequence_ConfigStringProperty_1 'C'
#define ORBIT_IMPL_CORBA_sequence_ConfigStringProperty_2 'o'
#define ORBIT_IMPL_CORBA_sequence_ConfigStringProperty_3 'n'
#define ORBIT_IMPL_CORBA_sequence_ConfigStringProperty_4 'f'
#define ORBIT_IMPL_CORBA_sequence_ConfigStringProperty_5 'X'
#if !defined(_CORBA_sequence_ConfigStringProperty_defined)
#define _CORBA_sequence_ConfigStringProperty_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; ConfigStringProperty* _buffer; CORBA_boolean _release; } CORBA_sequence_ConfigStringProperty;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_ConfigStringProperty_0)
#define TC_IMPL_TC_CORBA_sequence_ConfigStringProperty_0 'G'
#define TC_IMPL_TC_CORBA_sequence_ConfigStringProperty_1 'C'
#define TC_IMPL_TC_CORBA_sequence_ConfigStringProperty_2 'o'
#define TC_IMPL_TC_CORBA_sequence_ConfigStringProperty_3 'n'
#define TC_IMPL_TC_CORBA_sequence_ConfigStringProperty_4 'f'
#define TC_IMPL_TC_CORBA_sequence_ConfigStringProperty_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_ConfigStringProperty_struct;
#define TC_CORBA_sequence_ConfigStringProperty ((CORBA_TypeCode)&TC_CORBA_sequence_ConfigStringProperty_struct)
#endif
#define CORBA_sequence_ConfigStringProperty__alloc() ((CORBA_sequence_ConfigStringProperty *)ORBit_small_alloc (TC_CORBA_sequence_ConfigStringProperty))
#define CORBA_sequence_ConfigStringProperty__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_ConfigStringProperty,(m),(d))
#define CORBA_sequence_ConfigStringProperty_allocbuf(l) ((ConfigStringProperty*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigStringProperty, (l)))
#define CORBA_sequence_ConfigStringProperty_allocbuf(l) ((ConfigStringProperty*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigStringProperty, (l)))
#endif
#if !defined(_ConfigDatabase3_PropList_defined)
#define _ConfigDatabase3_PropList_defined 1
typedef CORBA_sequence_ConfigStringProperty ConfigDatabase3_PropList;
#define ConfigDatabase3_PropList_marshal(x,y,z) CORBA_sequence_ConfigStringProperty_marshal((x),(y),(z))
#define ConfigDatabase3_PropList_demarshal(x,y,z,i) CORBA_sequence_ConfigStringProperty_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigDatabase3_PropList_0)
#define TC_IMPL_TC_ConfigDatabase3_PropList_0 'G'
#define TC_IMPL_TC_ConfigDatabase3_PropList_1 'C'
#define TC_IMPL_TC_ConfigDatabase3_PropList_2 'o'
#define TC_IMPL_TC_ConfigDatabase3_PropList_3 'n'
#define TC_IMPL_TC_ConfigDatabase3_PropList_4 'f'
#define TC_IMPL_TC_ConfigDatabase3_PropList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase3_PropList_struct;
#define TC_ConfigDatabase3_PropList ((CORBA_TypeCode)&TC_ConfigDatabase3_PropList_struct)
#endif
#define ConfigDatabase3_PropList__alloc() ((ConfigDatabase3_PropList *)ORBit_small_alloc (TC_CORBA_sequence_ConfigStringProperty))
#define ConfigDatabase3_PropList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_ConfigStringProperty,(m),(d))
#define ConfigDatabase3_PropList_allocbuf(l) ((ConfigStringProperty*)ORBit_small_allocbuf (TC_CORBA_sequence_ConfigStringProperty, (l)))
#endif
#if !defined(_ConfigDatabase3_UnsetFlags_defined)
#define _ConfigDatabase3_UnsetFlags_defined 1
typedef CORBA_long ConfigDatabase3_UnsetFlags;
#define ConfigDatabase3_UnsetFlags_marshal(x,y,z) CORBA_long_marshal((x),(y),(z))
#define ConfigDatabase3_UnsetFlags_demarshal(x,y,z,i) CORBA_long_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigDatabase3_UnsetFlags_0)
#define TC_IMPL_TC_ConfigDatabase3_UnsetFlags_0 'G'
#define TC_IMPL_TC_ConfigDatabase3_UnsetFlags_1 'C'
#define TC_IMPL_TC_ConfigDatabase3_UnsetFlags_2 'o'
#define TC_IMPL_TC_ConfigDatabase3_UnsetFlags_3 'n'
#define TC_IMPL_TC_ConfigDatabase3_UnsetFlags_4 'f'
#define TC_IMPL_TC_ConfigDatabase3_UnsetFlags_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigDatabase3_UnsetFlags_struct;
#define TC_ConfigDatabase3_UnsetFlags ((CORBA_TypeCode)&TC_ConfigDatabase3_UnsetFlags_struct)
#endif
#define ConfigDatabase3_UnsetFlags__alloc() ((ConfigDatabase3_UnsetFlags *)ORBit_small_alloc (TC_CORBA_long))
#define ConfigDatabase3_UnsetFlags__freekids(m,d) ORBit_small_freekids (TC_CORBA_long,(m),(d))
#endif
#ifndef ConfigDatabase3_UNSET_INCLUDING_SCHEMA_NAMES
#define ConfigDatabase3_UNSET_INCLUDING_SCHEMA_NAMES 1
#endif /* !ConfigDatabase3_UNSET_INCLUDING_SCHEMA_NAMES */

#if !defined(ORBIT_DECL_ConfigServer) && !defined(_ConfigServer_defined)
#define ORBIT_DECL_ConfigServer 1
#define _ConfigServer_defined 1
#define ConfigServer__freekids CORBA_Object__freekids
typedef CORBA_Object ConfigServer;
extern CORBA_unsigned_long ConfigServer__classid;
#if !defined(TC_IMPL_TC_ConfigServer_0)
#define TC_IMPL_TC_ConfigServer_0 'G'
#define TC_IMPL_TC_ConfigServer_1 'C'
#define TC_IMPL_TC_ConfigServer_2 'o'
#define TC_IMPL_TC_ConfigServer_3 'n'
#define TC_IMPL_TC_ConfigServer_4 'f'
#define TC_IMPL_TC_ConfigServer_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigServer_struct;
#define TC_ConfigServer ((CORBA_TypeCode)&TC_ConfigServer_struct)
#endif
#endif
#if !defined(ORBIT_DECL_ConfigServer2) && !defined(_ConfigServer2_defined)
#define ORBIT_DECL_ConfigServer2 1
#define _ConfigServer2_defined 1
#define ConfigServer2__freekids CORBA_Object__freekids
typedef CORBA_Object ConfigServer2;
extern CORBA_unsigned_long ConfigServer2__classid;
#if !defined(TC_IMPL_TC_ConfigServer2_0)
#define TC_IMPL_TC_ConfigServer2_0 'G'
#define TC_IMPL_TC_ConfigServer2_1 'C'
#define TC_IMPL_TC_ConfigServer2_2 'o'
#define TC_IMPL_TC_ConfigServer2_3 'n'
#define TC_IMPL_TC_ConfigServer2_4 'f'
#define TC_IMPL_TC_ConfigServer2_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigServer2_struct;
#define TC_ConfigServer2 ((CORBA_TypeCode)&TC_ConfigServer2_struct)
#endif
#endif
#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_string)
#define ORBIT_DECL_CORBA_sequence_CORBA_string 1
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_0 'G'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_1 'C'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_2 'o'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_3 'n'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_4 'f'
#define ORBIT_IMPL_CORBA_sequence_CORBA_string_5 'X'
#if !defined(_CORBA_sequence_CORBA_string_defined)
#define _CORBA_sequence_CORBA_string_defined 1
typedef struct { CORBA_unsigned_long _maximum, _length; CORBA_string* _buffer; CORBA_boolean _release; } CORBA_sequence_CORBA_string;
#endif
#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_string_0)
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_0 'G'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_1 'C'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_2 'o'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_3 'n'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_4 'f'
#define TC_IMPL_TC_CORBA_sequence_CORBA_string_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_string_struct;
#define TC_CORBA_sequence_CORBA_string ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_string_struct)
#endif
#define CORBA_sequence_CORBA_string__alloc() ((CORBA_sequence_CORBA_string *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define CORBA_sequence_CORBA_string__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#define CORBA_sequence_CORBA_string_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif
#if !defined(_ConfigServer2_AddressList_defined)
#define _ConfigServer2_AddressList_defined 1
typedef CORBA_sequence_CORBA_string ConfigServer2_AddressList;
#define ConfigServer2_AddressList_marshal(x,y,z) CORBA_sequence_CORBA_string_marshal((x),(y),(z))
#define ConfigServer2_AddressList_demarshal(x,y,z,i) CORBA_sequence_CORBA_string_demarshal((x),(y),(z),(i))
#if !defined(TC_IMPL_TC_ConfigServer2_AddressList_0)
#define TC_IMPL_TC_ConfigServer2_AddressList_0 'G'
#define TC_IMPL_TC_ConfigServer2_AddressList_1 'C'
#define TC_IMPL_TC_ConfigServer2_AddressList_2 'o'
#define TC_IMPL_TC_ConfigServer2_AddressList_3 'n'
#define TC_IMPL_TC_ConfigServer2_AddressList_4 'f'
#define TC_IMPL_TC_ConfigServer2_AddressList_5 'X'
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_ConfigServer2_AddressList_struct;
#define TC_ConfigServer2_AddressList ((CORBA_TypeCode)&TC_ConfigServer2_AddressList_struct)
#endif
#define ConfigServer2_AddressList__alloc() ((ConfigServer2_AddressList *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_string))
#define ConfigServer2_AddressList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_string,(m),(d))
#define ConfigServer2_AddressList_allocbuf(l) ((CORBA_string*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_string, (l)))
#endif

/** POA structures **/
#ifndef _defined_POA_ConfigListener
#define _defined_POA_ConfigListener 1
typedef struct {
  void *_private;
void (*notify)(PortableServer_Servant _servant, const ConfigDatabase database, const CORBA_unsigned_long cnxn, const CORBA_char * key, const ConfigValue* value, const CORBA_boolean is_default, const CORBA_boolean is_writable, CORBA_Environment *ev);
void (*ping)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*update_listener)(PortableServer_Servant _servant, const ConfigDatabase database, const CORBA_char * db_address, const CORBA_unsigned_long old_cnxn, const CORBA_char * where, const CORBA_unsigned_long new_cnxn, CORBA_Environment *ev);
void (*invalidate_cached_values)(PortableServer_Servant _servant, const ConfigDatabase database, const ConfigListener_KeyList* keys, CORBA_Environment *ev);
void (*drop_all_caches)(PortableServer_Servant _servant, CORBA_Environment *ev);
} POA_ConfigListener__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_ConfigListener__epv *ConfigListener_epv;
} POA_ConfigListener__vepv;
typedef struct {
  void *_private;
  POA_ConfigListener__vepv *vepv;
} POA_ConfigListener;
extern void POA_ConfigListener__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_ConfigListener__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_ConfigListener */
#ifndef _defined_POA_ConfigDatabase
#define _defined_POA_ConfigDatabase 1
typedef struct {
  void *_private;
CORBA_unsigned_long (*add_listener)(PortableServer_Servant _servant, const CORBA_char * where, const ConfigListener who, CORBA_Environment *ev);
void (*remove_listener)(PortableServer_Servant _servant, const CORBA_unsigned_long cnxn, CORBA_Environment *ev);
ConfigValue* (*lookup)(PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment *ev);
ConfigValue* (*lookup_with_locale)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, const CORBA_boolean use_schema_default, CORBA_boolean* value_is_default, CORBA_boolean* value_is_writable, CORBA_Environment *ev);
ConfigValue* (*lookup_default_value)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, CORBA_Environment *ev);
void (*batch_lookup)(PortableServer_Servant _servant, const ConfigDatabase_KeyList* keys, const CORBA_char * locale, ConfigDatabase_ValueList** values, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev);
void (*set)(PortableServer_Servant _servant, const CORBA_char * key, const ConfigValue* value, CORBA_Environment *ev);
void (*unset)(PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment *ev);
void (*unset_with_locale)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, CORBA_Environment *ev);
void (*batch_change)(PortableServer_Servant _servant, const CORBA_char * locale, const ConfigDatabase_KeyList* keys, const ConfigDatabase_ValueList* values, CORBA_Environment *ev);
CORBA_boolean (*dir_exists)(PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment *ev);
void (*remove_dir)(PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment *ev);
void (*all_entries)(PortableServer_Servant _servant, const CORBA_char * dir, const CORBA_char * locale, ConfigDatabase_KeyList** keys, ConfigDatabase_ValueList** values, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev);
void (*all_dirs)(PortableServer_Servant _servant, const CORBA_char * dir, ConfigDatabase_KeyList** subdirs, CORBA_Environment *ev);
void (*set_schema)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * schema_key, CORBA_Environment *ev);
void (*sync)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*clear_cache)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*synchronous_sync)(PortableServer_Servant _servant, CORBA_Environment *ev);
} POA_ConfigDatabase__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_ConfigDatabase__epv *ConfigDatabase_epv;
} POA_ConfigDatabase__vepv;
typedef struct {
  void *_private;
  POA_ConfigDatabase__vepv *vepv;
} POA_ConfigDatabase;
extern void POA_ConfigDatabase__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_ConfigDatabase__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_ConfigDatabase */
#ifndef _defined_POA_ConfigDatabase2
#define _defined_POA_ConfigDatabase2 1
typedef struct {
  void *_private;
ConfigValue* (*lookup_with_schema_name)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, const CORBA_boolean use_schema_default, CORBA_string* schema_name, CORBA_boolean* value_is_default, CORBA_boolean* value_is_writable, CORBA_Environment *ev);
void (*all_entries_with_schema_name)(PortableServer_Servant _servant, const CORBA_char * dir, const CORBA_char * locale, ConfigDatabase_KeyList** keys, ConfigDatabase_ValueList** values, ConfigDatabase2_SchemaNameList** schema_names, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev);
} POA_ConfigDatabase2__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_ConfigDatabase__epv *ConfigDatabase_epv;
  POA_ConfigDatabase2__epv *ConfigDatabase2_epv;
} POA_ConfigDatabase2__vepv;
typedef struct {
  void *_private;
  POA_ConfigDatabase2__vepv *vepv;
} POA_ConfigDatabase2;
extern void POA_ConfigDatabase2__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_ConfigDatabase2__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_ConfigDatabase2 */
#ifndef _defined_POA_ConfigDatabase3
#define _defined_POA_ConfigDatabase3 1
typedef struct {
  void *_private;
CORBA_unsigned_long (*add_listener_with_properties)(PortableServer_Servant _servant, const CORBA_char * where, const ConfigListener who, const ConfigDatabase3_PropList* properties, CORBA_Environment *ev);
void (*recursive_unset)(PortableServer_Servant _servant, const CORBA_char * key, const ConfigDatabase3_UnsetFlags flags, CORBA_Environment *ev);
} POA_ConfigDatabase3__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_ConfigDatabase__epv *ConfigDatabase_epv;
  POA_ConfigDatabase2__epv *ConfigDatabase2_epv;
  POA_ConfigDatabase3__epv *ConfigDatabase3_epv;
} POA_ConfigDatabase3__vepv;
typedef struct {
  void *_private;
  POA_ConfigDatabase3__vepv *vepv;
} POA_ConfigDatabase3;
extern void POA_ConfigDatabase3__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_ConfigDatabase3__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_ConfigDatabase3 */
#ifndef _defined_POA_ConfigServer
#define _defined_POA_ConfigServer 1
typedef struct {
  void *_private;
ConfigDatabase (*get_default_database)(PortableServer_Servant _servant, CORBA_Environment *ev);
ConfigDatabase (*get_database)(PortableServer_Servant _servant, const CORBA_char * address, CORBA_Environment *ev);
void (*add_client)(PortableServer_Servant _servant, const ConfigListener client, CORBA_Environment *ev);
void (*remove_client)(PortableServer_Servant _servant, const ConfigListener client, CORBA_Environment *ev);
CORBA_long (*ping)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*shutdown)(PortableServer_Servant _servant, CORBA_Environment *ev);
} POA_ConfigServer__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_ConfigServer__epv *ConfigServer_epv;
} POA_ConfigServer__vepv;
typedef struct {
  void *_private;
  POA_ConfigServer__vepv *vepv;
} POA_ConfigServer;
extern void POA_ConfigServer__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_ConfigServer__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_ConfigServer */
#ifndef _defined_POA_ConfigServer2
#define _defined_POA_ConfigServer2 1
typedef struct {
  void *_private;
ConfigDatabase (*get_database_for_addresses)(PortableServer_Servant _servant, const ConfigServer2_AddressList* addresses, CORBA_Environment *ev);
} POA_ConfigServer2__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_ConfigServer__epv *ConfigServer_epv;
  POA_ConfigServer2__epv *ConfigServer2_epv;
} POA_ConfigServer2__vepv;
typedef struct {
  void *_private;
  POA_ConfigServer2__vepv *vepv;
} POA_ConfigServer2;
extern void POA_ConfigServer2__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_ConfigServer2__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_ConfigServer2 */

/** skel prototypes **/
void _ORBIT_skel_small_ConfigListener_notify(POA_ConfigListener *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_notify)(PortableServer_Servant _servant, const ConfigDatabase database, const CORBA_unsigned_long cnxn, const CORBA_char * key, const ConfigValue* value, const CORBA_boolean is_default, const CORBA_boolean is_writable, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigListener_ping(POA_ConfigListener *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_ping)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigListener_update_listener(POA_ConfigListener *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_update_listener)(PortableServer_Servant _servant, const ConfigDatabase database, const CORBA_char * db_address, const CORBA_unsigned_long old_cnxn, const CORBA_char * where, const CORBA_unsigned_long new_cnxn, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigListener_invalidate_cached_values(POA_ConfigListener *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_invalidate_cached_values)(PortableServer_Servant _servant, const ConfigDatabase database, const ConfigListener_KeyList* keys, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigListener_drop_all_caches(POA_ConfigListener *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_drop_all_caches)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_add_listener(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_add_listener)(PortableServer_Servant _servant, const CORBA_char * where, const ConfigListener who, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_remove_listener(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_remove_listener)(PortableServer_Servant _servant, const CORBA_unsigned_long cnxn, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_lookup(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, ConfigValue* (*_impl_lookup)(PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_lookup_with_locale(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, ConfigValue* (*_impl_lookup_with_locale)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, const CORBA_boolean use_schema_default, CORBA_boolean* value_is_default, CORBA_boolean* value_is_writable, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_lookup_default_value(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, ConfigValue* (*_impl_lookup_default_value)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_batch_lookup(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_batch_lookup)(PortableServer_Servant _servant, const ConfigDatabase_KeyList* keys, const CORBA_char * locale, ConfigDatabase_ValueList** values, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_set(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_set)(PortableServer_Servant _servant, const CORBA_char * key, const ConfigValue* value, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_unset(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_unset)(PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_unset_with_locale(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_unset_with_locale)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_batch_change(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_batch_change)(PortableServer_Servant _servant, const CORBA_char * locale, const ConfigDatabase_KeyList* keys, const ConfigDatabase_ValueList* values, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_dir_exists(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_boolean (*_impl_dir_exists)(PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_remove_dir(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_remove_dir)(PortableServer_Servant _servant, const CORBA_char * dir, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_all_entries(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_all_entries)(PortableServer_Servant _servant, const CORBA_char * dir, const CORBA_char * locale, ConfigDatabase_KeyList** keys, ConfigDatabase_ValueList** values, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_all_dirs(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_all_dirs)(PortableServer_Servant _servant, const CORBA_char * dir, ConfigDatabase_KeyList** subdirs, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_set_schema(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_set_schema)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * schema_key, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_sync(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_sync)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_clear_cache(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_clear_cache)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase_synchronous_sync(POA_ConfigDatabase *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_synchronous_sync)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase2_lookup_with_schema_name(POA_ConfigDatabase2 *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, ConfigValue* (*_impl_lookup_with_schema_name)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * locale, const CORBA_boolean use_schema_default, CORBA_string* schema_name, CORBA_boolean* value_is_default, CORBA_boolean* value_is_writable, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase2_all_entries_with_schema_name(POA_ConfigDatabase2 *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_all_entries_with_schema_name)(PortableServer_Servant _servant, const CORBA_char * dir, const CORBA_char * locale, ConfigDatabase_KeyList** keys, ConfigDatabase_ValueList** values, ConfigDatabase2_SchemaNameList** schema_names, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase3_add_listener_with_properties(POA_ConfigDatabase3 *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_unsigned_long (*_impl_add_listener_with_properties)(PortableServer_Servant _servant, const CORBA_char * where, const ConfigListener who, const ConfigDatabase3_PropList* properties, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigDatabase3_recursive_unset(POA_ConfigDatabase3 *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_recursive_unset)(PortableServer_Servant _servant, const CORBA_char * key, const ConfigDatabase3_UnsetFlags flags, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigServer_get_default_database(POA_ConfigServer *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, ConfigDatabase (*_impl_get_default_database)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigServer_get_database(POA_ConfigServer *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, ConfigDatabase (*_impl_get_database)(PortableServer_Servant _servant, const CORBA_char * address, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigServer_add_client(POA_ConfigServer *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_add_client)(PortableServer_Servant _servant, const ConfigListener client, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigServer_remove_client(POA_ConfigServer *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_remove_client)(PortableServer_Servant _servant, const ConfigListener client, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigServer_ping(POA_ConfigServer *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_long (*_impl_ping)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigServer_shutdown(POA_ConfigServer *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_shutdown)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_ConfigServer2_get_database_for_addresses(POA_ConfigServer2 *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, ConfigDatabase (*_impl_get_database_for_addresses)(PortableServer_Servant _servant, const ConfigServer2_AddressList* addresses, CORBA_Environment *ev));

/** stub prototypes **/
void ConfigListener_notify(ConfigListener _obj, const ConfigDatabase database, const CORBA_unsigned_long cnxn, const CORBA_char * key, const ConfigValue* value, const CORBA_boolean is_default, const CORBA_boolean is_writable, CORBA_Environment *ev);
void ConfigListener_ping(ConfigListener _obj, CORBA_Environment *ev);
void ConfigListener_update_listener(ConfigListener _obj, const ConfigDatabase database, const CORBA_char * db_address, const CORBA_unsigned_long old_cnxn, const CORBA_char * where, const CORBA_unsigned_long new_cnxn, CORBA_Environment *ev);
void ConfigListener_invalidate_cached_values(ConfigListener _obj, const ConfigDatabase database, const ConfigListener_KeyList* keys, CORBA_Environment *ev);
void ConfigListener_drop_all_caches(ConfigListener _obj, CORBA_Environment *ev);
CORBA_unsigned_long ConfigDatabase_add_listener(ConfigDatabase _obj, const CORBA_char * where, const ConfigListener who, CORBA_Environment *ev);
void ConfigDatabase_remove_listener(ConfigDatabase _obj, const CORBA_unsigned_long cnxn, CORBA_Environment *ev);
ConfigValue* ConfigDatabase_lookup(ConfigDatabase _obj, const CORBA_char * key, CORBA_Environment *ev);
ConfigValue* ConfigDatabase_lookup_with_locale(ConfigDatabase _obj, const CORBA_char * key, const CORBA_char * locale, const CORBA_boolean use_schema_default, CORBA_boolean* value_is_default, CORBA_boolean* value_is_writable, CORBA_Environment *ev);
ConfigValue* ConfigDatabase_lookup_default_value(ConfigDatabase _obj, const CORBA_char * key, const CORBA_char * locale, CORBA_Environment *ev);
void ConfigDatabase_batch_lookup(ConfigDatabase _obj, const ConfigDatabase_KeyList* keys, const CORBA_char * locale, ConfigDatabase_ValueList** values, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev);
void ConfigDatabase_set(ConfigDatabase _obj, const CORBA_char * key, const ConfigValue* value, CORBA_Environment *ev);
void ConfigDatabase_unset(ConfigDatabase _obj, const CORBA_char * key, CORBA_Environment *ev);
void ConfigDatabase_unset_with_locale(ConfigDatabase _obj, const CORBA_char * key, const CORBA_char * locale, CORBA_Environment *ev);
void ConfigDatabase_batch_change(ConfigDatabase _obj, const CORBA_char * locale, const ConfigDatabase_KeyList* keys, const ConfigDatabase_ValueList* values, CORBA_Environment *ev);
CORBA_boolean ConfigDatabase_dir_exists(ConfigDatabase _obj, const CORBA_char * dir, CORBA_Environment *ev);
void ConfigDatabase_remove_dir(ConfigDatabase _obj, const CORBA_char * dir, CORBA_Environment *ev);
void ConfigDatabase_all_entries(ConfigDatabase _obj, const CORBA_char * dir, const CORBA_char * locale, ConfigDatabase_KeyList** keys, ConfigDatabase_ValueList** values, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev);
void ConfigDatabase_all_dirs(ConfigDatabase _obj, const CORBA_char * dir, ConfigDatabase_KeyList** subdirs, CORBA_Environment *ev);
void ConfigDatabase_set_schema(ConfigDatabase _obj, const CORBA_char * key, const CORBA_char * schema_key, CORBA_Environment *ev);
void ConfigDatabase_sync(ConfigDatabase _obj, CORBA_Environment *ev);
void ConfigDatabase_clear_cache(ConfigDatabase _obj, CORBA_Environment *ev);
void ConfigDatabase_synchronous_sync(ConfigDatabase _obj, CORBA_Environment *ev);
#define ConfigDatabase2_add_listener ConfigDatabase_add_listener
#define ConfigDatabase2_remove_listener ConfigDatabase_remove_listener
#define ConfigDatabase2_lookup ConfigDatabase_lookup
#define ConfigDatabase2_lookup_with_locale ConfigDatabase_lookup_with_locale
#define ConfigDatabase2_lookup_default_value ConfigDatabase_lookup_default_value
#define ConfigDatabase2_batch_lookup ConfigDatabase_batch_lookup
#define ConfigDatabase2_set ConfigDatabase_set
#define ConfigDatabase2_unset ConfigDatabase_unset
#define ConfigDatabase2_unset_with_locale ConfigDatabase_unset_with_locale
#define ConfigDatabase2_batch_change ConfigDatabase_batch_change
#define ConfigDatabase2_dir_exists ConfigDatabase_dir_exists
#define ConfigDatabase2_remove_dir ConfigDatabase_remove_dir
#define ConfigDatabase2_all_entries ConfigDatabase_all_entries
#define ConfigDatabase2_all_dirs ConfigDatabase_all_dirs
#define ConfigDatabase2_set_schema ConfigDatabase_set_schema
#define ConfigDatabase2_sync ConfigDatabase_sync
#define ConfigDatabase2_clear_cache ConfigDatabase_clear_cache
#define ConfigDatabase2_synchronous_sync ConfigDatabase_synchronous_sync
ConfigValue* ConfigDatabase2_lookup_with_schema_name(ConfigDatabase2 _obj, const CORBA_char * key, const CORBA_char * locale, const CORBA_boolean use_schema_default, CORBA_string* schema_name, CORBA_boolean* value_is_default, CORBA_boolean* value_is_writable, CORBA_Environment *ev);
void ConfigDatabase2_all_entries_with_schema_name(ConfigDatabase2 _obj, const CORBA_char * dir, const CORBA_char * locale, ConfigDatabase_KeyList** keys, ConfigDatabase_ValueList** values, ConfigDatabase2_SchemaNameList** schema_names, ConfigDatabase_IsDefaultList** is_defaults, ConfigDatabase_IsWritableList** is_writables, CORBA_Environment *ev);
#define ConfigDatabase3_add_listener ConfigDatabase_add_listener
#define ConfigDatabase3_remove_listener ConfigDatabase_remove_listener
#define ConfigDatabase3_lookup ConfigDatabase_lookup
#define ConfigDatabase3_lookup_with_locale ConfigDatabase_lookup_with_locale
#define ConfigDatabase3_lookup_default_value ConfigDatabase_lookup_default_value
#define ConfigDatabase3_batch_lookup ConfigDatabase_batch_lookup
#define ConfigDatabase3_set ConfigDatabase_set
#define ConfigDatabase3_unset ConfigDatabase_unset
#define ConfigDatabase3_unset_with_locale ConfigDatabase_unset_with_locale
#define ConfigDatabase3_batch_change ConfigDatabase_batch_change
#define ConfigDatabase3_dir_exists ConfigDatabase_dir_exists
#define ConfigDatabase3_remove_dir ConfigDatabase_remove_dir
#define ConfigDatabase3_all_entries ConfigDatabase_all_entries
#define ConfigDatabase3_all_dirs ConfigDatabase_all_dirs
#define ConfigDatabase3_set_schema ConfigDatabase_set_schema
#define ConfigDatabase3_sync ConfigDatabase_sync
#define ConfigDatabase3_clear_cache ConfigDatabase_clear_cache
#define ConfigDatabase3_synchronous_sync ConfigDatabase_synchronous_sync
#define ConfigDatabase3_lookup_with_schema_name ConfigDatabase2_lookup_with_schema_name
#define ConfigDatabase3_all_entries_with_schema_name ConfigDatabase2_all_entries_with_schema_name
CORBA_unsigned_long ConfigDatabase3_add_listener_with_properties(ConfigDatabase3 _obj, const CORBA_char * where, const ConfigListener who, const ConfigDatabase3_PropList* properties, CORBA_Environment *ev);
void ConfigDatabase3_recursive_unset(ConfigDatabase3 _obj, const CORBA_char * key, const ConfigDatabase3_UnsetFlags flags, CORBA_Environment *ev);
ConfigDatabase ConfigServer_get_default_database(ConfigServer _obj, CORBA_Environment *ev);
ConfigDatabase ConfigServer_get_database(ConfigServer _obj, const CORBA_char * address, CORBA_Environment *ev);
void ConfigServer_add_client(ConfigServer _obj, const ConfigListener client, CORBA_Environment *ev);
void ConfigServer_remove_client(ConfigServer _obj, const ConfigListener client, CORBA_Environment *ev);
CORBA_long ConfigServer_ping(ConfigServer _obj, CORBA_Environment *ev);
void ConfigServer_shutdown(ConfigServer _obj, CORBA_Environment *ev);
#define ConfigServer2_get_default_database ConfigServer_get_default_database
#define ConfigServer2_get_database ConfigServer_get_database
#define ConfigServer2_add_client ConfigServer_add_client
#define ConfigServer2_remove_client ConfigServer_remove_client
#define ConfigServer2_ping ConfigServer_ping
#define ConfigServer2_shutdown ConfigServer_shutdown
ConfigDatabase ConfigServer2_get_database_for_addresses(ConfigServer2 _obj, const ConfigServer2_AddressList* addresses, CORBA_Environment *ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IInterface ConfigListener__iinterface;
#define ConfigListener_IMETHODS_LEN 5
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IMethod ConfigListener__imethods[ConfigListener_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IInterface ConfigDatabase__iinterface;
#define ConfigDatabase_IMETHODS_LEN 18
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IMethod ConfigDatabase__imethods[ConfigDatabase_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IInterface ConfigDatabase2__iinterface;
#define ConfigDatabase2_IMETHODS_LEN 2
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IMethod ConfigDatabase2__imethods[ConfigDatabase2_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IInterface ConfigDatabase3__iinterface;
#define ConfigDatabase3_IMETHODS_LEN 2
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IMethod ConfigDatabase3__imethods[ConfigDatabase3_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IInterface ConfigServer__iinterface;
#define ConfigServer_IMETHODS_LEN 6
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IMethod ConfigServer__imethods[ConfigServer_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IInterface ConfigServer2__iinterface;
#define ConfigServer2_IMETHODS_LEN 1
#ifdef ORBIT_IDL_C_IMODULE_GConfX
static 
#else
extern 
#endif
ORBit_IMethod ConfigServer2__imethods[ConfigServer2_IMETHODS_LEN];

/** IMethods index */

#ifndef __ConfigListener__imethods_index
#define __ConfigListener__imethods_index
typedef enum {
	ConfigListener_notify__imethods_index,
	ConfigListener_ping__imethods_index,
	ConfigListener_update_listener__imethods_index,
	ConfigListener_invalidate_cached_values__imethods_index,
	ConfigListener_drop_all_caches__imethods_index
} ConfigListener__imethods_index;
#endif /* __ConfigListener__imethods_index */

#ifndef __ConfigDatabase__imethods_index
#define __ConfigDatabase__imethods_index
typedef enum {
	ConfigDatabase_add_listener__imethods_index,
	ConfigDatabase_remove_listener__imethods_index,
	ConfigDatabase_lookup__imethods_index,
	ConfigDatabase_lookup_with_locale__imethods_index,
	ConfigDatabase_lookup_default_value__imethods_index,
	ConfigDatabase_batch_lookup__imethods_index,
	ConfigDatabase_set__imethods_index,
	ConfigDatabase_unset__imethods_index,
	ConfigDatabase_unset_with_locale__imethods_index,
	ConfigDatabase_batch_change__imethods_index,
	ConfigDatabase_dir_exists__imethods_index,
	ConfigDatabase_remove_dir__imethods_index,
	ConfigDatabase_all_entries__imethods_index,
	ConfigDatabase_all_dirs__imethods_index,
	ConfigDatabase_set_schema__imethods_index,
	ConfigDatabase_sync__imethods_index,
	ConfigDatabase_clear_cache__imethods_index,
	ConfigDatabase_synchronous_sync__imethods_index
} ConfigDatabase__imethods_index;
#endif /* __ConfigDatabase__imethods_index */

#ifndef __ConfigDatabase2__imethods_index
#define __ConfigDatabase2__imethods_index
typedef enum {
	ConfigDatabase2_lookup_with_schema_name__imethods_index,
	ConfigDatabase2_all_entries_with_schema_name__imethods_index
} ConfigDatabase2__imethods_index;
#endif /* __ConfigDatabase2__imethods_index */

#ifndef __ConfigDatabase3__imethods_index
#define __ConfigDatabase3__imethods_index
typedef enum {
	ConfigDatabase3_add_listener_with_properties__imethods_index,
	ConfigDatabase3_recursive_unset__imethods_index
} ConfigDatabase3__imethods_index;
#endif /* __ConfigDatabase3__imethods_index */

#ifndef __ConfigServer__imethods_index
#define __ConfigServer__imethods_index
typedef enum {
	ConfigServer_get_default_database__imethods_index,
	ConfigServer_get_database__imethods_index,
	ConfigServer_add_client__imethods_index,
	ConfigServer_remove_client__imethods_index,
	ConfigServer_ping__imethods_index,
	ConfigServer_shutdown__imethods_index
} ConfigServer__imethods_index;
#endif /* __ConfigServer__imethods_index */

#ifndef __ConfigServer2__imethods_index
#define __ConfigServer2__imethods_index
typedef enum {
	ConfigServer2_get_database_for_addresses__imethods_index
} ConfigServer2__imethods_index;
#endif /* __ConfigServer2__imethods_index */

#ifndef __ORBIT_IMETHODS_INDEX
#define __ORBIT_IMETHODS_INDEX
#define ORBIT_IMETHODS_INDEX(m) (m ## __imethods_index)
#endif /* __ORBIT_IMETHODS_INDEX */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif /* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
