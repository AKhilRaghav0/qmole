<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.0"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Atk" version="1.0"/>
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gdk" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <namespace name="Wnck"
             version="1.0"
             shared-library="libwnck-1.so.22"
             c:prefix="Wnck">
    <class name="ActionMenu"
           c:type="WnckActionMenu"
           doc="The #WnckActionMenu struct contains only private fields and should not be
directly accessed."
           parent="Gtk.Menu"
           glib:type-name="WnckActionMenu"
           glib:get-type="wnck_action_menu_get_type"
           glib:type-struct="ActionMenuClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="wnck_action_menu_new"
                   doc="Creates a new #WnckActionMenu. The #WnckActionMenu will be filled with menu
items for window operations on @window."
                   version="2.22">
        <return-value transfer-ownership="full">
          <type name="ActionMenu" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="WnckWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="window" writable="1" construct-only="1">
        <type name="any" c:type="gpointer"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Menu" c:type="GtkMenu"/>
      </field>
      <field name="priv">
        <type name="ActionMenuPrivate" c:type="WnckActionMenuPrivate*"/>
      </field>
    </class>
    <record name="ActionMenuClass"
            c:type="WnckActionMenuClass"
            glib:is-gtype-struct-for="ActionMenu">
      <field name="parent_class">
        <type name="Gtk.MenuClass" c:type="GtkMenuClass"/>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ActionMenuPrivate" c:type="WnckActionMenuPrivate">
    </record>
    <class name="Application"
           c:type="WnckApplication"
           doc="The #WnckApplication struct contains only private fields and should not be
directly accessed."
           parent="GObject.Object"
           glib:type-name="WnckApplication"
           glib:get-type="wnck_application_get_type"
           glib:type-struct="ApplicationClass">
      <function name="get"
                c:identifier="wnck_application_get"
                doc="Gets the #WnckApplication corresponding to the group leader with @xwindow
as X window ID.
there no such #WnckApplication could be found. The returned #WnckApplication
is owned by libwnck and must not be referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Application" c:type="WnckApplication*"/>
        </return-value>
        <parameters>
          <parameter name="xwindow" transfer-ownership="none">
            <type name="ulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_xid"
              c:identifier="wnck_application_get_xid"
              doc="Gets the X window ID of the group leader window for @app.">
        <return-value transfer-ownership="none">
          <type name="ulong" c:type="gulong"/>
        </return-value>
      </method>
      <method name="get_windows"
              c:identifier="wnck_application_get_windows"
              doc="Gets the list of #WnckWindow belonging to @app.
application contains no window. The list should not be modified nor freed,
as it is owned by @app.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_n_windows"
              c:identifier="wnck_application_get_n_windows"
              doc="Gets the number of #WnckWindow belonging to @app.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="wnck_application_get_name"
              doc="Gets the name of @app. Since there is no way to properly find this name,
various suboptimal heuristics are used to find it. GTK+ should probably have
a function to allow applications to set the _NET_WM_NAME property on the
group leader as the application name, and the &lt;ulink
url=&quot;http://standards.freedesktop.org/wm-spec/wm-spec-latest.html&quot;&gt;EWMH&lt;/ulink&gt;
should say that this is where the application name goes.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_icon_name"
              c:identifier="wnck_application_get_icon_name"
              doc="Gets the icon name of @app (to be used when @app is minimized). Since
there is no way to properly find this name, various suboptimal heuristics
are used to find it.
is available.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_pid"
              c:identifier="wnck_application_get_pid"
              doc="Gets the process ID of @app.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_icon"
              c:identifier="wnck_application_get_icon"
              doc="Gets the icon to be used for @app. If no icon is set for @app, a
suboptimal heuristic is used to find an appropriate icon. If no icon was
found, a fallback icon is used.
&lt;classname&gt;GdkPixbuf&lt;/classname&gt; if it needs to keep the icon around.">
        <return-value transfer-ownership="full">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_mini_icon"
              c:identifier="wnck_application_get_mini_icon"
              doc="Gets the mini-icon to be used for @app. If no mini-icon is set for @app,
a suboptimal heuristic is used to find an appropriate icon. If no mini-icon
was found, a fallback mini-icon is used.
returned &lt;classname&gt;GdkPixbuf&lt;/classname&gt; if it needs to keep the mini-icon
around.">
        <return-value transfer-ownership="full">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_icon_is_fallback"
              c:identifier="wnck_application_get_icon_is_fallback"
              doc="Gets whether a default fallback icon is used for @app (because none
was set on @app).">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_startup_id"
              c:identifier="wnck_application_get_startup_id"
              doc="Gets the startup sequence ID used for startup notification of @app.
or %NULL if none is available."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ApplicationPrivate" c:type="WnckApplicationPrivate*"/>
      </field>
      <glib:signal name="icon-changed"
                   doc="Emitted when the icon of @app changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="name-changed"
                   doc="Emitted when the name of @app changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ApplicationClass"
            c:type="WnckApplicationClass"
            glib:is-gtype-struct-for="Application">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name_changed">
        <callback name="name_changed" c:type="name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="WnckApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="icon_changed">
        <callback name="icon_changed" c:type="icon_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="WnckApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ApplicationPrivate" c:type="WnckApplicationPrivate">
    </record>
    <class name="ClassGroup"
           c:type="WnckClassGroup"
           doc="The #WnckClassGroup struct contains only private fields and should not be
directly accessed."
           parent="GObject.Object"
           glib:type-name="WnckClassGroup"
           glib:get-type="wnck_class_group_get_type"
           glib:type-struct="ClassGroupClass">
      <function name="get"
                c:identifier="wnck_class_group_get"
                doc="Gets the #WnckClassGroup corresponding to @res_class.
there is no #WnckClassGroup with the specified @res_class. The returned
#WnckClassGroup is owned by libwnck and must not be referenced or
unreferenced."
                version="2.2">
        <return-value transfer-ownership="full">
          <type name="ClassGroup" c:type="WnckClassGroup*"/>
        </return-value>
        <parameters>
          <parameter name="res_class" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_windows"
              c:identifier="wnck_class_group_get_windows"
              doc="Gets the list of #WnckWindow that are grouped in @class_group.
the group contains no window. The list should not be modified nor freed, as
it is owned by @class_group."
              version="2.2">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_res_class"
              c:identifier="wnck_class_group_get_res_class"
              doc="Gets the resource class name for @class_group.
empty string if the group has no resource class name."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="wnck_class_group_get_name"
              doc="Gets an human-readable name for @class_group. Since there is no way to
properly find this name, a suboptimal heuristic is used to find it. The name
is the name of all #WnckApplication for each #WnckWindow in @class_group if
they all have the same name. If all #WnckApplication don&apos;t have the same
name, the name is the name of all #WnckWindow in @class_group if they all
have the same name. If all #WnckWindow don&apos;t have the same name, the
resource class name is used."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_icon"
              c:identifier="wnck_class_group_get_icon"
              doc="Gets the icon to be used for @class_group. Since there is no way to
properly find the icon, a suboptimal heuristic is used to find it. The icon
is the first icon found by looking at all the #WnckApplication for each
#WnckWindow in @class_group, then at all the #WnckWindow in @class_group. If
no icon was found, a fallback icon is used.
returned &lt;classname&gt;GdkPixbuf&lt;/classname&gt; if it needs to keep the icon
around."
              version="2.2">
        <return-value transfer-ownership="full">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_mini_icon"
              c:identifier="wnck_class_group_get_mini_icon"
              doc="Gets the mini-icon to be used for @class_group. Since there is no way to
properly find the mini-icon, the same suboptimal heuristic as the one for
wnck_class_group_get_icon() is used to find it.
the returned &lt;classname&gt;GdkPixbuf&lt;/classname&gt; if it needs to keep the
mini-icon around."
              version="2.2">
        <return-value transfer-ownership="full">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ClassGroupPrivate" c:type="WnckClassGroupPrivate*"/>
      </field>
      <glib:signal name="icon-changed"
                   doc="Emitted when the icon of @class_group changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="name-changed"
                   doc="Emitted when the name of @class_group changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ClassGroupClass"
            c:type="WnckClassGroupClass"
            glib:is-gtype-struct-for="ClassGroup">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name_changed">
        <callback name="name_changed" c:type="name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="WnckApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="icon_changed">
        <callback name="icon_changed" c:type="icon_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="WnckApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ClassGroupPrivate" c:type="WnckClassGroupPrivate">
    </record>
    <enumeration name="ClientType"
                 doc="with window management, like pagers and taskbars.
Type describing the role of the libwnck user."
                 version="2.14"
                 glib:type-name="WnckClientType"
                 glib:get-type="wnck_client_type_get_type"
                 c:type="WnckClientType">
      <member name="application"
              value="1"
              c:identifier="WNCK_CLIENT_TYPE_APPLICATION"
              glib:nick="application"/>
      <member name="pager"
              value="2"
              c:identifier="WNCK_CLIENT_TYPE_PAGER"
              glib:nick="pager"/>
    </enumeration>
    <callback name="LoadIconFunction"
              c:type="WnckLoadIconFunction"
              doc="icon to load.
been set for the #WnckTasklist.
Specifies the type of function passed to wnck_tasklist_set_icon_loader().
at size @size, or %NULL if no icon for @icon_name at size @size could be
loaded."
              version="2.2">
      <return-value transfer-ownership="full">
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="icon_name" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <type name="int" c:type="int"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <type name="uint" c:type="unsigned int"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="any" c:type="void*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="MotionDirection"
                 doc="#WnckWorkspace.
#WnckWorkspace.
#WnckWorkspace.
#WnckWorkspace.
Type defining a direction in which to search a neighbor #WnckWorkspace."
                 version="2.14"
                 glib:type-name="WnckMotionDirection"
                 glib:get-type="wnck_motion_direction_get_type"
                 c:type="WnckMotionDirection">
      <member name="up"
              value="-1"
              c:identifier="WNCK_MOTION_UP"
              glib:nick="up"/>
      <member name="down"
              value="-2"
              c:identifier="WNCK_MOTION_DOWN"
              glib:nick="down"/>
      <member name="left"
              value="-3"
              c:identifier="WNCK_MOTION_LEFT"
              glib:nick="left"/>
      <member name="right"
              value="-4"
              c:identifier="WNCK_MOTION_RIGHT"
              glib:nick="right"/>
    </enumeration>
    <class name="Pager"
           c:type="WnckPager"
           doc="The #WnckPager struct contains only private fields and should not be
directly accessed."
           parent="Gtk.Widget"
           glib:type-name="WnckPager"
           glib:get-type="wnck_pager_get_type"
           glib:type-struct="PagerClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="wnck_pager_new"
                   doc="Creates a new #WnckPager. The #WnckPager will show the #WnckWorkspace of the
#WnckScreen it is on.">
        <return-value transfer-ownership="full">
          <type name="Pager" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="Screen" c:type="WnckScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_orientation"
              c:identifier="wnck_pager_set_orientation"
              doc="#WnckScreen @pager is watching.
Tries to change the orientation of the layout of #WnckWorkspace on the
#WnckScreen @pager is watching. Since no more than one application should
set this property of a #WnckScreen at a time, setting the layout is not
guaranteed to work.
If @orientation is %GTK_ORIENTATION_HORIZONTAL, the #WnckWorkspace will be
laid out in rows, with the first #WnckWorkspace in the top left corner.
If @orientation is %GTK_ORIENTATION_VERTICAL, the #WnckWorkspace will be
laid out in columns, with the first #WnckWorkspace in the top left corner.
For example, if the layout contains one row, but the orientation of the
layout is vertical, the #WnckPager will display a column of #WnckWorkspace.
If @pager has not been added to a widget hierarchy, the call will fail
because @pager can&apos;t know the screen on which to modify the orientation.
changed or did not need to be changed, %FALSE otherwise.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_n_rows"
              c:identifier="wnck_pager_set_n_rows"
              doc="#WnckScreen @pager is watching.
Tries to change the number of rows in the layout of #WnckWorkspace on the
#WnckScreen @pager is watching. Since no more than one application should
set this property of a #WnckScreen at a time, setting the layout is not
guaranteed to work.
If @pager has not been added to a widget hierarchy, the call will fail
because @pager can&apos;t know the screen on which to modify the layout.
changed or did not need to be changed, %FALSE otherwise.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="n_rows" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_mode"
              c:identifier="wnck_pager_set_display_mode"
              doc="Sets the display mode for @pager to @mode.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mode" transfer-ownership="none">
            <type name="PagerDisplayMode" c:type="WnckPagerDisplayMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_all"
              c:identifier="wnck_pager_set_show_all"
              doc="Sets @pager to display all #WnckWorkspace or not, according to">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show_all_workspaces" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shadow_type"
              c:identifier="wnck_pager_set_shadow_type"
              doc="Sets the shadow type for @pager to @shadow_type. The main use of this
function is proper integration of #WnckPager in panels with non-system
backgrounds."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shadow_type" transfer-ownership="none">
            <type name="Gtk.ShadowType" c:type="GtkShadowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="wnck_pager_set_screen"
              doc="Does nothing.
Deprecated:2.20:"
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="Screen" c:type="WnckScreen*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="PagerPrivate" c:type="WnckPagerPrivate*"/>
      </field>
    </class>
    <record name="PagerClass"
            c:type="WnckPagerClass"
            glib:is-gtype-struct-for="Pager">
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="PagerDisplayMode"
                 doc="workspaces.
for each window in the workspaces.
Mode defining what a #WnckPager will display."
                 glib:type-name="WnckPagerDisplayMode"
                 glib:get-type="wnck_pager_display_mode_get_type"
                 c:type="WnckPagerDisplayMode">
      <member name="name"
              value="0"
              c:identifier="WNCK_PAGER_DISPLAY_NAME"
              glib:nick="name"/>
      <member name="content"
              value="1"
              c:identifier="WNCK_PAGER_DISPLAY_CONTENT"
              glib:nick="content"/>
    </enumeration>
    <record name="PagerPrivate" c:type="WnckPagerPrivate">
    </record>
    <record name="ResourceUsage"
            c:type="WnckResourceUsage"
            doc="the X server.
type Pixmap.
The #WnckResourceUsage struct contains information about the total resource
usage of an X client, and the number of resources allocated for each
resource type."
            version="2.6">
      <field name="total_bytes_estimate" writable="1">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="pixmap_bytes" writable="1">
        <type name="ulong" c:type="gulong"/>
      </field>
      <field name="n_pixmaps" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_windows" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_gcs" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_pictures" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_glyphsets" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_fonts" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_colormap_entries" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_passive_grabs" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_cursors" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="n_other" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad1" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad2" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad3" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad4" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad5" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad6" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad7" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad8" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
      <field name="pad9" writable="1">
        <type name="uint" c:type="unsigned"/>
      </field>
    </record>
    <class name="Screen"
           c:type="WnckScreen"
           doc="The #WnckScreen struct contains only private fields and should not be
directly accessed."
           parent="GObject.Object"
           glib:type-name="WnckScreen"
           glib:get-type="wnck_screen_get_type"
           glib:type-struct="ScreenClass">
      <function name="get_default"
                c:identifier="wnck_screen_get_default"
                doc="Gets the default #WnckScreen on the default display.
owned by libwnck and must not be referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Screen" c:type="WnckScreen*"/>
        </return-value>
      </function>
      <function name="get"
                c:identifier="wnck_screen_get"
                doc="Gets the #WnckScreen for a given screen on the default display.
exists. The returned #WnckScreen is owned by libwnck and must not be
referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Screen" c:type="WnckScreen*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_for_root"
                c:identifier="wnck_screen_get_for_root"
                doc="Gets the #WnckScreen for the root window at @root_window_id, or
%NULL if no #WnckScreen exists for this root window.
This function does not work if wnck_screen_get() was not called for the
sought #WnckScreen before, and returns %NULL.
%NULL. The returned #WnckScreen is owned by libwnck and must not be
referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Screen" c:type="WnckScreen*"/>
        </return-value>
        <parameters>
          <parameter name="root_window_id" transfer-ownership="none">
            <type name="ulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </function>
      <function name="free_workspace_layout"
                c:identifier="wnck_screen_free_workspace_layout"
                doc="Frees the content of @layout. This does not free @layout itself, so you
might want to free @layout yourself after calling this.
Deprecated:2.20:"
                version="2.12">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="layout" transfer-ownership="none">
            <type name="WorkspaceLayout" c:type="WnckWorkspaceLayout*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_number"
              c:identifier="wnck_screen_get_number"
              doc="Gets the index of @screen on the display to which it belongs. The first
#WnckScreen has an index of 0."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_workspace"
              c:identifier="wnck_screen_get_workspace"
              doc="Gets the #WnckWorkspace numbered @workspace on @screen.
%NULL if no such workspace exists. The returned #WnckWorkspace is owned by
libwnck and must not be referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Workspace" c:type="WnckWorkspace*"/>
        </return-value>
        <parameters>
          <parameter name="workspace" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_workspace_index"
              c:identifier="wnck_screen_get_workspace_index"
              doc="Gets the index of @space on @screen. The first #WnckWorkspace has an
index of 0. See also wnck_workspace_get_number()."
              version="2.14">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="space" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_workspace_neighbor"
              c:identifier="wnck_screen_get_workspace_neighbor"
              doc="Gets the neighbor #WnckWorkspace of @space in the @direction direction on
direction on @screen, or %NULL if no such neighbor #WnckWorkspace exists.
The returned #WnckWorkspace is owned by libwnck and must not be referenced
or unreferenced."
              version="2.14">
        <return-value transfer-ownership="full">
          <type name="Workspace" c:type="WnckWorkspace*"/>
        </return-value>
        <parameters>
          <parameter name="space" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace*"/>
          </parameter>
          <parameter name="direction" transfer-ownership="none">
            <type name="MotionDirection" c:type="WnckMotionDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_workspace"
              c:identifier="wnck_screen_get_active_workspace"
              doc="Gets the active #WnckWorkspace on @screen. May return %NULL sometimes,
if libwnck is in a weird state due to the asynchronous nature of the
interaction with the window manager.
#WnckWorkspace is owned by libwnck and must not be referenced or
unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Workspace" c:type="WnckWorkspace*"/>
        </return-value>
      </method>
      <method name="get_workspaces"
              c:identifier="wnck_screen_get_workspaces"
              doc="first element in the list is the first #WnckWorkspace, etc..
modified nor freed, as it is owned by @screen."
              version="2.20">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_active_window"
              c:identifier="wnck_screen_get_active_window"
              doc="Gets the active #WnckWindow on @screen. May return %NULL sometimes, since
not all window managers guarantee that a window is always active.
#WnckWindow is owned by libwnck and must not be referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Window" c:type="WnckWindow*"/>
        </return-value>
      </method>
      <method name="get_previously_active_window"
              c:identifier="wnck_screen_get_previously_active_window"
              doc="Gets the previously active #WnckWindow on @screen. May return %NULL
sometimes, since not all window managers guarantee that a window is always
active.
returned #WnckWindow is owned by libwnck and must not be referenced or
unreferenced."
              version="2.8">
        <return-value transfer-ownership="full">
          <type name="Window" c:type="WnckWindow*"/>
        </return-value>
      </method>
      <method name="get_windows"
              c:identifier="wnck_screen_get_windows"
              doc="Gets the list of #WnckWindow on @screen. The list is not in a defined
order, but should be &quot;stable&quot; (windows should not be reordered in it).
However, the stability of the list is established by the window manager, so
don&apos;t blame libwnck if it breaks down.
window on @screen. The list should not be modified nor freed, as it is owned
by @screen.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="get_windows_stacked"
              c:identifier="wnck_screen_get_windows_stacked"
              doc="Gets the list of #WnckWindow on @screen in bottom-to-top order.
if there is no window on @screen. The list should not be modified nor freed,
as it is owned by @screen.">
        <return-value transfer-ownership="full">
          <type name="GLib.List" c:type="GList*"/>
        </return-value>
      </method>
      <method name="force_update"
              c:identifier="wnck_screen_force_update"
              doc="Synchronously and immediately updates the list of #WnckWindow on @screen.
This bypasses the standard update mechanism, where the list of #WnckWindow
is updated in the idle loop.
This is usually a bad idea for both performance and correctness reasons (to
get things right, you need to write model-view code that tracks changes, not
get a static list of open windows). However, this function can be useful for
small applications that just do something and then exit.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_workspace_count"
              c:identifier="wnck_screen_get_workspace_count"
              doc="Gets the number of #WnckWorkspace on @screen.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="change_workspace_count"
              c:identifier="wnck_screen_change_workspace_count"
              doc="Asks the window manager to change the number of #WnckWorkspace on @screen."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_manager_name"
              c:identifier="wnck_screen_get_window_manager_name"
              doc="Gets the name of the window manager.
does not comply with the &lt;ulink
url=&quot;http://standards.freedesktop.org/wm-spec/wm-spec-latest.html&quot;&gt;EWMH&lt;/ulink&gt;
specification."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="net_wm_supports"
              c:identifier="wnck_screen_net_wm_supports"
              doc="Gets whether the window manager for @screen supports a certain hint from
the &lt;ulink
url=&quot;http://standards.freedesktop.org/wm-spec/wm-spec-latest.html&quot;&gt;Extended
Window Manager Hints specification&lt;/ulink&gt; (EWMH).
When using this function, keep in mind that the window manager can change
over time; so you should not use this function in a way that impacts
persistent application state. A common bug is that your application can
start up before the window manager does when the user logs in, and before
the window manager starts wnck_screen_net_wm_supports() will return %FALSE
for every property.
See also gdk_x11_screen_supports_net_wm_hint() in GDK.
hint, %FALSE otherwise.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="atom" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_background_pixmap"
              c:identifier="wnck_screen_get_background_pixmap"
              doc="Gets the X window ID of the background pixmap of @screen.">
        <return-value transfer-ownership="none">
          <type name="ulong" c:type="gulong"/>
        </return-value>
      </method>
      <method name="get_width"
              c:identifier="wnck_screen_get_width"
              doc="Gets the width of @screen.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_height"
              c:identifier="wnck_screen_get_height"
              doc="Gets the height of @screen.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_showing_desktop"
              c:identifier="wnck_screen_get_showing_desktop"
              doc="Gets whether @screen is in the &quot;showing the desktop&quot; mode. This mode is
changed when a #WnckScreen::showing-desktop-changed signal gets emitted."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="toggle_showing_desktop"
              c:identifier="wnck_screen_toggle_showing_desktop"
              doc="Asks the window manager to set the &quot;showing the desktop&quot; mode on @screen
according to @show."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_viewport"
              c:identifier="wnck_screen_move_viewport"
              doc="Asks the window manager to move the viewport of the current #WnckWorkspace
on @screen."
              version="2.4">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="try_set_workspace_layout"
              c:identifier="wnck_screen_try_set_workspace_layout"
              doc="wnck_screen_try_set_workspace_layout() before, or if you did not keep the
old token.
Tries to modify the layout of #WnckWorkspace on @screen. To do this, tries
to acquire ownership of the layout. If the current process is the owner of
the layout, @current_token is used to determine if the caller is the owner
(there might be more than one part of the same process trying to set the
layout). Since no more than one application should set this property of
If @rows is 0, the actual number of rows will be determined based on
number of columns will be determined based on @rows and the number of
#WnckWorkspace. @rows and @columns must not be 0 at the same time.
You have to release the ownership of the layout with
wnck_screen_release_workspace_layout() when you do not need it anymore.
wnck_screen_try_set_workspace_layout() and to
wnck_screen_release_workspace_layout(), or 0 if the layout could not be set.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="current_token" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="rows" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="release_workspace_layout"
              c:identifier="wnck_screen_release_workspace_layout"
              doc="wnck_screen_try_set_workspace_layout().
Releases the ownership of the layout of #WnckWorkspace on @screen.
If the verification fails, nothing happens.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="current_token" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="calc_workspace_layout"
              c:identifier="wnck_screen_calc_workspace_layout"
              doc="wnck_screen_calc_workspace_layout() find this number.
information.
Calculates the layout of #WnckWorkspace, with additional information like
the row and column of the #WnckWorkspace with index @space_index.
Deprecated:2.20:"
              version="2.12">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="num_workspaces" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="space_index" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="layout" transfer-ownership="none">
            <type name="WorkspaceLayout" c:type="WnckWorkspaceLayout*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ScreenPrivate" c:type="WnckScreenPrivate*"/>
      </field>
      <glib:signal name="active-window-changed"
                   doc="change.
Emitted when the active window on @screen has changed.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="previously_active_window" transfer-ownership="none">
            <type name="Window" c:type="WnckWindow"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="active-workspace-changed"
                   doc="change.
Emitted when the active workspace on @screen has changed.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="previously_active_space" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="application-closed"
                   doc="Emitted when a #WnckApplication is closed on @screen.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app" transfer-ownership="none">
            <type name="Application" c:type="WnckApplication"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="application-opened"
                   doc="Emitted when a new #WnckApplication is opened on @screen.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="app" transfer-ownership="none">
            <type name="Application" c:type="WnckApplication"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="background-changed"
                   doc="Emitted when the background on the root window of @screen has changed.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="class-group-closed"
                   doc="Emitted when a #WnckClassGroup is closed on @screen."
                   version="2.20">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="class_group" transfer-ownership="none">
            <type name="ClassGroup" c:type="WnckClassGroup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="class-group-opened"
                   doc="Emitted when a new #WnckClassGroup is opened on @screen."
                   version="2.20">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="class_group" transfer-ownership="none">
            <type name="ClassGroup" c:type="WnckClassGroup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="showing-desktop-changed"
                   doc="Emitted when &quot;showing the desktop&quot; mode of @screen is toggled."
                   version="2.20">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="viewports-changed"
                   doc="Emitted when a viewport position has changed in a #WnckWorkspace of"
                   version="2.20">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="window-closed"
                   doc="Emitted when a #WnckWindow is closed on @screen.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="WnckWindow"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="window-manager-changed"
                   doc="Emitted when the window manager on @screen has changed."
                   version="2.20">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="window-opened"
                   doc="Emitted when a new #WnckWindow is opened on @screen.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="WnckWindow"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="window-stacking-changed"
                   doc="Emitted when the stacking order of #WnckWindow on @screen has changed.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="workspace-created"
                   doc="Emitted when a #WnckWorkspace is created on @screen.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="space" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="workspace-destroyed"
                   doc="Emitted when a #WnckWorkspace is destroyed on @screen.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="space" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ScreenClass"
            c:type="WnckScreenClass"
            glib:is-gtype-struct-for="Screen">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="active_window_changed">
        <callback name="active_window_changed" c:type="active_window_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="previous_window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="active_workspace_changed">
        <callback name="active_workspace_changed"
                  c:type="active_workspace_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="previous_workspace" transfer-ownership="none">
              <type name="Workspace" c:type="WnckWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_stacking_changed">
        <callback name="window_stacking_changed"
                  c:type="window_stacking_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_opened">
        <callback name="window_opened" c:type="window_opened">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_closed">
        <callback name="window_closed" c:type="window_closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="workspace_created">
        <callback name="workspace_created" c:type="workspace_created">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="space" transfer-ownership="none">
              <type name="Workspace" c:type="WnckWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="workspace_destroyed">
        <callback name="workspace_destroyed" c:type="workspace_destroyed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="space" transfer-ownership="none">
              <type name="Workspace" c:type="WnckWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="application_opened">
        <callback name="application_opened" c:type="application_opened">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="WnckApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="application_closed">
        <callback name="application_closed" c:type="application_closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="app" transfer-ownership="none">
              <type name="Application" c:type="WnckApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="background_changed">
        <callback name="background_changed" c:type="background_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="class_group_opened">
        <callback name="class_group_opened" c:type="class_group_opened">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="class_group" transfer-ownership="none">
              <type name="ClassGroup" c:type="WnckClassGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="class_group_closed">
        <callback name="class_group_closed" c:type="class_group_closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
            <parameter name="class_group" transfer-ownership="none">
              <type name="ClassGroup" c:type="WnckClassGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="showing_desktop_changed">
        <callback name="showing_desktop_changed"
                  c:type="showing_desktop_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="viewports_changed">
        <callback name="viewports_changed" c:type="viewports_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="window_manager_changed">
        <callback name="window_manager_changed"
                  c:type="window_manager_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="screen" transfer-ownership="none">
              <type name="Screen" c:type="WnckScreen*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad5">
        <callback name="pad5" c:type="pad5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad6">
        <callback name="pad6" c:type="pad6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ScreenPrivate" c:type="WnckScreenPrivate">
    </record>
    <class name="Selector"
           c:type="WnckSelector"
           doc="The #WnckSelector struct contains only private fields and should not be
directly accessed."
           parent="Gtk.MenuBar"
           glib:type-name="WnckSelector"
           glib:get-type="wnck_selector_get_type"
           glib:type-struct="SelectorClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="wnck_selector_new"
                   doc="Creates a new #WnckSelector. The #WnckSelector will list #WnckWindow of the
#WnckScreen it is on."
                   version="2.10">
        <return-value transfer-ownership="full">
          <type name="Selector" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.MenuBar" c:type="GtkMenuBar"/>
      </field>
      <field name="priv">
        <type name="SelectorPrivate" c:type="WnckSelectorPrivate*"/>
      </field>
    </class>
    <record name="SelectorClass"
            c:type="WnckSelectorClass"
            glib:is-gtype-struct-for="Selector">
      <field name="parent_class">
        <type name="Gtk.MenuBarClass" c:type="GtkMenuBarClass"/>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="SelectorPrivate" c:type="WnckSelectorPrivate">
    </record>
    <class name="Tasklist"
           c:type="WnckTasklist"
           doc="The #WnckTasklist struct contains only private fields and should not be
directly accessed."
           parent="Gtk.Container"
           glib:type-name="WnckTasklist"
           glib:get-type="wnck_tasklist_get_type"
           glib:type-struct="TasklistClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="wnck_tasklist_new"
                   doc="Creates a new #WnckTasklist. The #WnckTasklist will list #WnckWindow of the
#WnckScreen it is on.">
        <return-value transfer-ownership="full">
          <type name="Tasklist" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="Screen" c:type="WnckScreen*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_size_hint_list"
              c:identifier="wnck_tasklist_get_size_hint_list"
              doc="returned by this function. This number should always be pair.
Since a #WnckTasklist does not have a fixed size (#WnckWindow can be grouped
when needed, for example), the standard size request mechanism in GTK+ is
not enough to announce what sizes can be used by @tasklist. The size hints
mechanism is a solution for this. See panel_applet_set_size_hints() for more
information.
appropriate size for @tasklist.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int*"/>
        </return-value>
        <parameters>
          <parameter name="n_elements"
                     direction="out"
                     transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_grouping"
              c:identifier="wnck_tasklist_set_grouping"
              doc="Sets the grouping policy for @tasklist to @grouping.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="grouping" transfer-ownership="none">
            <type name="TasklistGroupingType"
                  c:type="WnckTasklistGroupingType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_switch_workspace_on_unminimize"
              c:identifier="wnck_tasklist_set_switch_workspace_on_unminimize"
              doc="#WnckWindow is on when unminimizing it.
Sets @tasklist to activate or not the #WnckWorkspace a #WnckWindow is on
when unminimizing it, according to @switch_workspace_on_unminimize.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="switch_workspace_on_unminimize"
                     transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_grouping_limit"
              c:identifier="wnck_tasklist_set_grouping_limit"
              doc="Sets the maximum size of buttons in @tasklist before @tasklist tries to
group #WnckWindow in the same #WnckApplication in only one button. This
limit is valid only when the grouping policy of @tasklist is
%WNCK_TASKLIST_AUTO_GROUP.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="limit" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_include_all_workspaces"
              c:identifier="wnck_tasklist_set_include_all_workspaces"
              doc="#WnckWorkspace in @tasklist.
Sets @tasklist to display #WnckWindow from all #WnckWorkspace or not,
according to @include_all_workspaces.
Note that if the active #WnckWorkspace has a viewport and if
viewport are displayed in @tasklist. The rationale for this is that the
viewport is generally used to implement workspace-like behavior. A
side-effect of this is that, when using multiple #WnckWorkspace with
viewport, it is not possible to show all #WnckWindow from a #WnckWorkspace
(even those that are not visible in the viewport) in @tasklist without
showing all #WnckWindow from all #WnckWorkspace.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="include_all_workspaces" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_button_relief"
              c:identifier="wnck_tasklist_set_button_relief"
              doc="Sets the relief type of the buttons in @tasklist to @relief. The main use of
this function is proper integration of #WnckTasklist in panels with
non-system backgrounds."
              version="2.12">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="relief" transfer-ownership="none">
            <type name="Gtk.ReliefStyle" c:type="GtkReliefStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_minimum_width"
              c:identifier="wnck_tasklist_set_minimum_width"
              doc="Does nothing.
Deprecated:2.20:">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_minimum_width"
              c:identifier="wnck_tasklist_get_minimum_width"
              doc="Returns -1.
Deprecated:2.20:">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_minimum_height"
              c:identifier="wnck_tasklist_set_minimum_height"
              doc="Does nothing.
Deprecated:2.20:">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_minimum_height"
              c:identifier="wnck_tasklist_get_minimum_height"
              doc="Returns -1.
Deprecated:2.20:">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_icon_loader"
              c:identifier="wnck_tasklist_set_icon_loader"
              doc="Sets a function to be used for loading icons."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="load_icon_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <type name="LoadIconFunction" c:type="WnckLoadIconFunction"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="any" c:type="void*"/>
          </parameter>
          <parameter name="free_data_func" transfer-ownership="none">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_screen"
              c:identifier="wnck_tasklist_set_screen"
              doc="Does nothing.
Deprecated:2.20:"
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="screen" transfer-ownership="none">
            <type name="Screen" c:type="WnckScreen*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
      <field name="priv">
        <type name="TasklistPrivate" c:type="WnckTasklistPrivate*"/>
      </field>
    </class>
    <record name="TasklistClass"
            c:type="WnckTasklistClass"
            glib:is-gtype-struct-for="Tasklist">
      <field name="parent_class">
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="TasklistGroupingType"
                 doc="#WnckApplication.
#WnckApplication for some #WnckApplication, when there is not enough place
to have a good-looking list of all #WnckWindow.
#WnckApplication, for all #WnckApplication.
Type defining the policy of the #WnckTasklist for grouping multiple
#WnckWindow of the same #WnckApplication."
                 glib:type-name="WnckTasklistGroupingType"
                 glib:get-type="wnck_tasklist_grouping_type_get_type"
                 c:type="WnckTasklistGroupingType">
      <member name="never_group"
              value="0"
              c:identifier="WNCK_TASKLIST_NEVER_GROUP"
              glib:nick="never-group"/>
      <member name="auto_group"
              value="1"
              c:identifier="WNCK_TASKLIST_AUTO_GROUP"
              glib:nick="auto-group"/>
      <member name="always_group"
              value="2"
              c:identifier="WNCK_TASKLIST_ALWAYS_GROUP"
              glib:nick="always-group"/>
    </enumeration>
    <record name="TasklistPrivate" c:type="WnckTasklistPrivate">
    </record>
    <class name="Window"
           c:type="WnckWindow"
           doc="The #WnckWindow struct contains only private fields and should not be
directly accessed."
           parent="GObject.Object"
           glib:type-name="WnckWindow"
           glib:get-type="wnck_window_get_type"
           glib:type-struct="WindowClass">
      <function name="get"
                c:identifier="wnck_window_get"
                doc="Gets a preexisting #WnckWindow for the X window @xwindow. This will not
create a #WnckWindow if none exists. The function is robust against bogus
window IDs.
owned by libwnck and must not be referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Window" c:type="WnckWindow*"/>
        </return-value>
        <parameters>
          <parameter name="xwindow" transfer-ownership="none">
            <type name="ulong" c:type="gulong"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_screen"
              c:identifier="wnck_window_get_screen"
              doc="Gets the #WnckScreen @window is on.
owned by libwnck and must not be referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Screen" c:type="WnckScreen*"/>
        </return-value>
      </method>
      <method name="has_name"
              c:identifier="wnck_window_has_name"
              doc="Checks whether or not @window has a name. wnck_window_get_name()
will always return some value, even if @window has no name set;
wnck_window_has_name() can be used to tell if that name is
real or not.
For icons titles, use wnck_window_has_icon_name() instead.
name, %FALSE if it returns a fallback name."
              version="2.16">
        <return-value transfer-ownership="none"
                      doc="returns @window&lt;!-- --&gt;&apos;s">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="wnck_window_get_name"
              doc="Gets the name of @window, as it should be displayed in a pager
or tasklist. Always returns some value, even if @window has no name
set; use wnck_window_has_name() if you need to know whether the returned
name is &quot;real&quot; or not.
For icons titles, use wnck_window_get_icon_name() instead.
available.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="has_icon_name"
              c:identifier="wnck_window_has_icon_name"
              doc="Checks whether or not @window has an icon name.
wnck_window_get_icon_name() will always return some value, even if
be used to tell if that icon name is real or not.
(Note that if wnck_window_has_icon_name() returns %FALSE, but
wnck_window_has_name() returns %TRUE, then the name returned by
wnck_window_get_icon_name() is @window&lt;!-- --&gt;&apos;s name. Only when both
methods return %FALSE does wnck_window_get_icon_name() return a
generic fallback name.)"
              version="2.16">
        <return-value transfer-ownership="none" doc="returns">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_icon_name"
              c:identifier="wnck_window_get_icon_name"
              doc="Gets the icon name of @window, as it should be displayed for an icon
(minimized state). Always returns some value, even if @window has no icon
name set; use wnck_window_has_icon_name() if you need to know whether the
returned icon name is &quot;real&quot; or not.
Contrast with wnck_window_get_name(), which returns @window&lt;!-- --&gt;&apos;s
title, not its icon title.
name is available.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_application"
              c:identifier="wnck_window_get_application"
              doc="Gets the #WnckApplication to which @window belongs.
#WnckApplication is owned by libwnck and must not be referenced or
unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Application" c:type="WnckApplication*"/>
        </return-value>
      </method>
      <method name="get_transient"
              c:identifier="wnck_window_get_transient"
              doc="Gets the #WnckWindow for which @window is transient."
              version="2.12">
        <return-value transfer-ownership="full">
          <type name="Window" c:type="WnckWindow*"/>
        </return-value>
      </method>
      <method name="get_group_leader"
              c:identifier="wnck_window_get_group_leader"
              doc="Gets the group leader of the group of windows to which @window belongs.
belongs, or the X window ID of @window if @window does not belong to any
group.">
        <return-value transfer-ownership="none">
          <type name="ulong" c:type="gulong"/>
        </return-value>
      </method>
      <method name="get_xid"
              c:identifier="wnck_window_get_xid"
              doc="Gets the X window ID of @window.">
        <return-value transfer-ownership="none">
          <type name="ulong" c:type="gulong"/>
        </return-value>
      </method>
      <method name="get_class_group"
              c:identifier="wnck_window_get_class_group"
              doc="Gets the #WnckClassGroup to which @window belongs.
#WnckClassGroup is owned by libwnck and must not be referenced or
unreferenced."
              version="2.2">
        <return-value transfer-ownership="full">
          <type name="ClassGroup" c:type="WnckClassGroup*"/>
        </return-value>
      </method>
      <method name="get_session_id"
              c:identifier="wnck_window_get_session_id"
              doc="Gets the session ID for @window in Latin-1 encoding.
string in a GTK+ widget without converting to UTF-8.
See wnck_window_get_session_id_utf8().
no session ID.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_session_id_utf8"
              c:identifier="wnck_window_get_session_id_utf8"
              doc="Gets the session ID for @window in UTF-8 encoding.
The session ID should be in Latin-1 encoding, so the conversion should work,
but a broken client could set a session ID that might not be convertable to
UTF-8.
no session ID.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="get_pid"
              c:identifier="wnck_window_get_pid"
              doc="Gets the process ID of @window.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_sort_order"
              c:identifier="wnck_window_get_sort_order"
              doc="Gets the sort order of @window, used for ordering of @window in
#WnckSelector and #WnckTasklist. The sort order is an internal state in
libwnck. The initial value is defined when the window is created."
              version="2.10">
        <return-value transfer-ownership="none">
          <type name="int" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_sort_order"
              c:identifier="wnck_window_set_sort_order"
              doc="Sets the sort order of @window. The sort order is used for ordering of"
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="order" transfer-ownership="none">
            <type name="int" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_window_type"
              c:identifier="wnck_window_get_window_type"
              doc="Gets the semantic type of @window.">
        <return-value transfer-ownership="full">
          <type name="WindowType" c:type="WnckWindowType"/>
        </return-value>
      </method>
      <method name="set_window_type"
              c:identifier="wnck_window_set_window_type"
              doc="Sets the semantic type of @window to @wintype."
              version="2.12">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="wintype" transfer-ownership="none">
            <type name="WindowType" c:type="WnckWindowType"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_minimized"
              c:identifier="wnck_window_is_minimized"
              doc="Gets whether @window is minimized. Minimization state may change anytime
a #WnckWindow::state-changed signal gets emitted.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_maximized_horizontally"
              c:identifier="wnck_window_is_maximized_horizontally"
              doc="Gets whether @window is maximized horizontally. Horizontal maximization
state may change anytime a #WnckWindow::state-changed signal gets emitted.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_maximized_vertically"
              c:identifier="wnck_window_is_maximized_vertically"
              doc="Gets whether @window is maximized vertically. vertiVal maximization
state may change anytime a #WnckWindow::state-changed signal gets emitted.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_maximized"
              c:identifier="wnck_window_is_maximized"
              doc="Gets whether @window is maximized. Maximization state may change
anytime a #WnckWindow::state-changed signal gets emitted.
As for GDK, &quot;maximized&quot; means both vertically and horizontally. If @window
is maximized in only one direction, then @window is not considered
maximized.
otherwise.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_shaded"
              c:identifier="wnck_window_is_shaded"
              doc="Gets whether @window is shaded. Shade state may change anytime
a #WnckWindow::state-changed signal gets emitted.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_above"
              c:identifier="wnck_window_is_above"
              doc="Gets whether @window is above other windows. This state may change
anytime a #WnckWindow::state-changed signal gets emitted.
See wnck_window_make_above() for more details on this state."
              version="2.14">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_below"
              c:identifier="wnck_window_is_below"
              doc="Gets whether @window is below other windows. This state may change
anytime a #WnckWindow::state-changed signal gets emitted.
See wnck_window_make_below() for more details on this state."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_skip_pager"
              c:identifier="wnck_window_is_skip_pager"
              doc="Gets whether @window is included on pagers. This state may change
anytime a #WnckWindow::state-changed signal gets emitted.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_skip_tasklist"
              c:identifier="wnck_window_is_skip_tasklist"
              doc="Gets whether @window is included on tasklists. This state may change
anytime a #WnckWindow::state-changed signal gets emitted.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_fullscreen"
              c:identifier="wnck_window_is_fullscreen"
              doc="Gets whether @window is fullscreen. Fullscreen state may change
anytime a #WnckWindow::state-changed signal gets emitted."
              version="2.8">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_sticky"
              c:identifier="wnck_window_is_sticky"
              doc="Gets whether @window is sticky. Sticky state may change
anytime a #WnckWindow::state-changed signal gets emitted.
Sticky here means &quot;stuck to the glass&quot;, i.e. does not scroll with the
viewport. In GDK/GTK+ (e.g. gdk_window_stick()/gtk_window_stick()), sticky
means &quot;stuck to the glass&quot; and &lt;emphasis&gt;also&lt;/emphasis&gt; that the window is
on all workspaces. But here it only means the viewport aspect of it.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="needs_attention"
              c:identifier="wnck_window_needs_attention"
              doc="Gets whether @window needs attention. This state may change anytime
a #WnckWindow::state-changed signal gets emitted.
This state depends on flags such as the demands_attention and is_urgent
hints."
              version="2.12">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="or_transient_needs_attention"
              c:identifier="wnck_window_or_transient_needs_attention"
              doc="Gets whether @window or one of its transients needs attention. This state
may change anytime a #WnckWindow::state-changed signal gets emitted.
%FALSE otherwise."
              version="2.12">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_skip_pager"
              c:identifier="wnck_window_set_skip_pager"
              doc="Asks the window manager to make @window included or not included on pagers.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="skip" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_tasklist"
              c:identifier="wnck_window_set_skip_tasklist"
              doc="Asks the window manager to make @window included or not included on
tasklists.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="skip" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fullscreen"
              c:identifier="wnck_window_set_fullscreen"
              doc="Asks the window manager to set the fullscreen state of @window according to"
              version="2.8">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="fullscreen" transfer-ownership="none">
            <type name="boolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="close"
              c:identifier="wnck_window_close"
              doc="this call to occur.
Closes @window.
This function existed before 2.6, but the @timestamp argument was missing
in earlier versions."
              version="2.6">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="minimize"
              c:identifier="wnck_window_minimize"
              doc="Minimizes @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unminimize"
              c:identifier="wnck_window_unminimize"
              doc="this call to occur.
Unminimizes @window by activating it or one of its transients. See
wnck_window_activate_transient() for details on how the activation is done.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="maximize"
              c:identifier="wnck_window_maximize"
              doc="Asks the window manager to maximize @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmaximize"
              c:identifier="wnck_window_unmaximize"
              doc="Asks the window manager to unmaximize @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="maximize_horizontally"
              c:identifier="wnck_window_maximize_horizontally"
              doc="Asks the window manager to maximize horizontally @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmaximize_horizontally"
              c:identifier="wnck_window_unmaximize_horizontally"
              doc="Asks the window manager to unmaximize horizontally @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="maximize_vertically"
              c:identifier="wnck_window_maximize_vertically"
              doc="Asks the window manager to maximize vertically @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmaximize_vertically"
              c:identifier="wnck_window_unmaximize_vertically"
              doc="Asks the window manager to unmaximize vertically @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="shade"
              c:identifier="wnck_window_shade"
              doc="Asks the window manager to shade @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unshade"
              c:identifier="wnck_window_unshade"
              doc="Asks the window manager to unshade @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="make_above"
              c:identifier="wnck_window_make_above"
              doc="Asks the window manager to put @window on top of most windows (@window will
not be on top of focused fullscreen windows, of other windows with this
setting and of dock windows)."
              version="2.14">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmake_above"
              c:identifier="wnck_window_unmake_above"
              doc="Asks the window manager to not put @window on top of most windows, and to
put it again in the stack with other windows."
              version="2.14">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="make_below"
              c:identifier="wnck_window_make_below"
              doc="Asks the window manager to put @window below most windows."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unmake_below"
              c:identifier="wnck_window_unmake_below"
              doc="Asks the window manager to not put @window below most windows, and to
put it again in the stack with other windows."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="stick"
              c:identifier="wnck_window_stick"
              doc="Asks the window manager to keep the @window&lt;!-- --&gt;&apos;s position fixed on the
screen, even when the workspace or viewport scrolls.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unstick"
              c:identifier="wnck_window_unstick"
              doc="Asks the window manager to not have @window&lt;!-- --&gt;&apos;s position fixed on the
screen when the workspace or viewport scrolls.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="keyboard_move"
              c:identifier="wnck_window_keyboard_move"
              doc="Asks the window manager to start moving @window via the keyboard.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="keyboard_size"
              c:identifier="wnck_window_keyboard_size"
              doc="Asks the window manager to start resizing @window via the keyboard.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="get_workspace"
              c:identifier="wnck_window_get_workspace"
              doc="Gets the current workspace @window is on. If the window is pinned (on all
workspaces), or not on any workspaces, %NULL may be returned.
returned #WnckWorkspace is owned by libwnck and must not be referenced or
unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Workspace" c:type="WnckWorkspace*"/>
        </return-value>
      </method>
      <method name="move_to_workspace"
              c:identifier="wnck_window_move_to_workspace"
              doc="Asks the window manager to move @window to @space. If @window was pinned, it
will also result in @window being visible only on @space.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="space" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_pinned"
              c:identifier="wnck_window_is_pinned"
              doc="Gets whether @window is on all workspace. Pinned state may change
anytime a #WnckWindow::workspace-changed signal gets emitted, but not when
a #WnckWindow::state-changed gets emitted.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="pin"
              c:identifier="wnck_window_pin"
              doc="Asks the window manager to put @window on all workspaces.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="unpin"
              c:identifier="wnck_window_unpin"
              doc="Asks the window manager to put @window only in the currently active
workspace, if @window was previously pinned. If @window was not pinned,
does not change @window&lt;!-- --&gt;&apos;s workspace. If the active workspace
is not known for some reason (it should not happen much), sets">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <method name="activate"
              c:identifier="wnck_window_activate"
              doc="this call to occur.
Asks the window manager to make @window the active window. The
window manager may choose to raise @window along with focusing it, and may
decide to refuse the request (to not steal the focus if there is a more
recent user activity, for example).
This function existed before 2.10, but the @timestamp argument was missing
in earlier versions."
              version="2.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_active"
              c:identifier="wnck_window_is_active"
              doc="Gets whether @window is the active window on its #WnckScreen.
%FALSE otherwise.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_most_recently_activated"
              c:identifier="wnck_window_is_most_recently_activated"
              doc="Gets whether @window is the most recently activated window on its
#WnckScreen.
The most recently activated window is identical to the active
window for click and sloppy focus methods (since a window is always
active in those cases) but differs slightly for mouse focus since
there often is no active window.
#WnckScreen, %FALSE otherwise."
              version="2.8">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="activate_transient"
              c:identifier="wnck_window_activate_transient"
              doc="this call to occur.
If @window has transients, activates the most likely transient
instead of the window itself. Otherwise activates @window.
FIXME the ideal behavior of this function is probably to activate
the most recently active window among @window and its transients.
This is probably best implemented on the window manager side.
This function existed before 2.10, but the @timestamp argument was missing
in earlier versions."
              version="2.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="transient_is_most_recently_activated"
              c:identifier="wnck_window_transient_is_most_recently_activated"
              doc="Gets whether one of the transients of @window is the most
recently activated window. See
wnck_window_is_most_recently_activated() for a more complete
description of what is meant by most recently activated.  This
function is needed because clicking on a #WnckTasklist once will
activate a transient instead of @window itself
(wnck_window_activate_transient), and clicking again should
minimize @window and its transients.  (Not doing this can be
especially annoying in the case of modal dialogs that don&apos;t appear
in the #WnckTaslist).
activated window, %FALSE otherwise."
              version="2.12">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_icon"
              c:identifier="wnck_window_get_icon"
              doc="Gets the icon to be used for @window. If no icon was found, a fallback
icon is used. wnck_window_get_icon_is_fallback() can be used to tell if the
icon is the fallback icon.
returned &lt;classname&gt;GdkPixbuf&lt;/classname&gt; if it needs to keep the icon
around.">
        <return-value transfer-ownership="full">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_mini_icon"
              c:identifier="wnck_window_get_mini_icon"
              doc="Gets the mini-icon to be used for @window. If no mini-icon was found, a
fallback mini-icon is used. wnck_window_get_icon_is_fallback() can be used
to tell if the mini-icon is the fallback mini-icon.
returned &lt;classname&gt;GdkPixbuf&lt;/classname&gt; if it needs to keep the icon
around.">
        <return-value transfer-ownership="full">
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
      </method>
      <method name="get_icon_is_fallback"
              c:identifier="wnck_window_get_icon_is_fallback"
              doc="Gets whether a default fallback icon is used for @window (because none
was set on @window).">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_icon_geometry"
              c:identifier="wnck_window_set_icon_geometry"
              doc="Sets the icon geometry for @window. A typical use case for this is the
destination of the minimization animation of @window.">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_actions"
              c:identifier="wnck_window_get_actions"
              doc="Gets the actions that can be done for @window.">
        <return-value transfer-ownership="full">
          <type name="WindowActions" c:type="WnckWindowActions"/>
        </return-value>
      </method>
      <method name="get_state"
              c:identifier="wnck_window_get_state"
              doc="Gets the state of @window.">
        <return-value transfer-ownership="full">
          <type name="WindowState" c:type="WnckWindowState"/>
        </return-value>
      </method>
      <method name="get_client_window_geometry"
              c:identifier="wnck_window_get_client_window_geometry"
              doc="Gets the size and position of @window, as last received
in a ConfigureNotify event (i.e. this call does not round-trip
to the server, just gets the last size we were notified of).
The X and Y coordinates are relative to the root window.
The window manager usually adds a frame around windows. If
you need to know the size of @window with the frame, use
wnck_window_get_geometry()."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
          <parameter name="yp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
          <parameter name="widthp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
          <parameter name="heightp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_geometry"
              c:identifier="wnck_window_get_geometry"
              doc="Gets the size and position of @window, including decorations. This
function uses the information last received in a ConfigureNotify
event and adjusts it according to the size of the frame that is
added by the window manager (this call does not round-trip to the
server, it just gets the last sizes that were notified). The
X and Y coordinates are relative to the root window.
If you need to know the actual size of @window ignoring the frame
added by the window manager, use wnck_window_get_client_window_geometry().">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="xp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
          <parameter name="yp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
          <parameter name="widthp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
          <parameter name="heightp" direction="out" transfer-ownership="full">
            <type name="int" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_geometry"
              c:identifier="wnck_window_set_geometry"
              doc="Sets the size and position of @window. The X and Y coordinates should be
relative to the root window.
Note that the new size and position apply to @window with its frame added
by the window manager. Therefore, using wnck_window_set_geometry() with
the values returned by wnck_window_get_geometry() should be a no-op, while
using wnck_window_set_geometry() with the values returned by
wnck_window_get_client_window_geometry() should reduce the size of @window
and move it."
              version="2.16">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="gravity" transfer-ownership="none">
            <type name="WindowGravity" c:type="WnckWindowGravity"/>
          </parameter>
          <parameter name="geometry_mask" transfer-ownership="none">
            <type name="WindowMoveResizeMask"
                  c:type="WnckWindowMoveResizeMask"/>
          </parameter>
          <parameter name="x" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="int" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_visible_on_workspace"
              c:identifier="wnck_window_is_visible_on_workspace"
              doc="Like wnck_window_is_on_workspace(), but also checks that
the window is in a visible state (i.e. not minimized or shaded).
otherwise.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_on_workspace"
              c:identifier="wnck_window_is_on_workspace"
              doc="Gets whether @window appears on @workspace.">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_in_viewport"
              c:identifier="wnck_window_is_in_viewport"
              doc="Gets %TRUE if @window appears in the current viewport of @workspace.
%FALSE otherwise."
              version="2.4">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="WnckWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WindowPrivate" c:type="WnckWindowPrivate*"/>
      </field>
      <glib:signal name="actions-changed"
                   doc="availabilities for @window that have changed.
Emitted when the actions availabilities for @window change.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="changed_mask" transfer-ownership="none">
            <type name="WindowActions" c:type="WnckWindowActions"/>
          </parameter>
          <parameter name="new_state" transfer-ownership="none">
            <type name="WindowActions" c:type="WnckWindowActions"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="geometry-changed"
                   doc="Emitted when the geometry of @window changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="icon-changed"
                   doc="Emitted when the icon of @window changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="name-changed"
                   doc="Emitted when the name of @window changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="state-changed"
                   doc="that have changed.
Emitted when the state of @window changes. This can happen when @window is
(un)minimized, (un)maximized, (un)sticked, (un)shaded, (un)made above,
(un)made below, (un)set fullscreen, when it needs attention, etc. See
#WnckWindowState for the complete list of states that might have changed.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="changed_mask" transfer-ownership="none">
            <type name="WindowState" c:type="WnckWindowState"/>
          </parameter>
          <parameter name="new_state" transfer-ownership="none">
            <type name="WindowState" c:type="WnckWindowState"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="workspace-changed"
                   doc="Emitted when the current workspace of @window changes, or if @window has
been pinned or unpinned.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <bitfield name="WindowActions"
              doc="horizontally.
vertically.
workspaces, or (un)pinned.
horizontally.
vertically.
Type used as a bitmask to describe the actions that can be done for a
#WnckWindow."
              glib:type-name="WnckWindowActions"
              glib:get-type="wnck_window_actions_get_type"
              c:type="WnckWindowActions">
      <member name="move"
              value="1"
              c:identifier="WNCK_WINDOW_ACTION_MOVE"
              glib:nick="move"/>
      <member name="resize"
              value="2"
              c:identifier="WNCK_WINDOW_ACTION_RESIZE"
              glib:nick="resize"/>
      <member name="shade"
              value="4"
              c:identifier="WNCK_WINDOW_ACTION_SHADE"
              glib:nick="shade"/>
      <member name="stick"
              value="8"
              c:identifier="WNCK_WINDOW_ACTION_STICK"
              glib:nick="stick"/>
      <member name="maximize_horizontally"
              value="16"
              c:identifier="WNCK_WINDOW_ACTION_MAXIMIZE_HORIZONTALLY"
              glib:nick="maximize-horizontally"/>
      <member name="maximize_vertically"
              value="32"
              c:identifier="WNCK_WINDOW_ACTION_MAXIMIZE_VERTICALLY"
              glib:nick="maximize-vertically"/>
      <member name="change_workspace"
              value="64"
              c:identifier="WNCK_WINDOW_ACTION_CHANGE_WORKSPACE"
              glib:nick="change-workspace"/>
      <member name="close"
              value="128"
              c:identifier="WNCK_WINDOW_ACTION_CLOSE"
              glib:nick="close"/>
      <member name="unmaximize_horizontally"
              value="256"
              c:identifier="WNCK_WINDOW_ACTION_UNMAXIMIZE_HORIZONTALLY"
              glib:nick="unmaximize-horizontally"/>
      <member name="unmaximize_vertically"
              value="512"
              c:identifier="WNCK_WINDOW_ACTION_UNMAXIMIZE_VERTICALLY"
              glib:nick="unmaximize-vertically"/>
      <member name="unshade"
              value="1024"
              c:identifier="WNCK_WINDOW_ACTION_UNSHADE"
              glib:nick="unshade"/>
      <member name="unstick"
              value="2048"
              c:identifier="WNCK_WINDOW_ACTION_UNSTICK"
              glib:nick="unstick"/>
      <member name="minimize"
              value="4096"
              c:identifier="WNCK_WINDOW_ACTION_MINIMIZE"
              glib:nick="minimize"/>
      <member name="unminimize"
              value="8192"
              c:identifier="WNCK_WINDOW_ACTION_UNMINIMIZE"
              glib:nick="unminimize"/>
      <member name="maximize"
              value="16384"
              c:identifier="WNCK_WINDOW_ACTION_MAXIMIZE"
              glib:nick="maximize"/>
      <member name="unmaximize"
              value="32768"
              c:identifier="WNCK_WINDOW_ACTION_UNMAXIMIZE"
              glib:nick="unmaximize"/>
      <member name="fullscreen"
              value="65536"
              c:identifier="WNCK_WINDOW_ACTION_FULLSCREEN"
              glib:nick="fullscreen"/>
      <member name="above"
              value="131072"
              c:identifier="WNCK_WINDOW_ACTION_ABOVE"
              glib:nick="above"/>
      <member name="below"
              value="262144"
              c:identifier="WNCK_WINDOW_ACTION_BELOW"
              glib:nick="below"/>
    </bitfield>
    <record name="WindowClass"
            c:type="WnckWindowClass"
            glib:is-gtype-struct-for="Window">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name_changed">
        <callback name="name_changed" c:type="name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_changed">
        <callback name="state_changed" c:type="state_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
            <parameter name="changed_mask" transfer-ownership="none">
              <type name="WindowState" c:type="WnckWindowState"/>
            </parameter>
            <parameter name="new_state" transfer-ownership="none">
              <type name="WindowState" c:type="WnckWindowState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="workspace_changed">
        <callback name="workspace_changed" c:type="workspace_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="icon_changed">
        <callback name="icon_changed" c:type="icon_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="actions_changed">
        <callback name="actions_changed" c:type="actions_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
            <parameter name="changed_mask" transfer-ownership="none">
              <type name="WindowActions" c:type="WnckWindowActions"/>
            </parameter>
            <parameter name="new_actions" transfer-ownership="none">
              <type name="WindowActions" c:type="WnckWindowActions"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="geometry_changed">
        <callback name="geometry_changed" c:type="geometry_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="WnckWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="WindowGravity"
                 doc="as gravity point.
gravity point.
as gravity point.
gravity point.
point.
as gravity point.
window as gravity point.
as gravity point.
window as gravity point.
gravity point.
Flag used when changing the geometry of a #WnckWindow. This is the gravity
point to use as a reference for the new position."
                 version="2.16"
                 glib:type-name="WnckWindowGravity"
                 glib:get-type="wnck_window_gravity_get_type"
                 c:type="WnckWindowGravity">
      <member name="current"
              value="0"
              c:identifier="WNCK_WINDOW_GRAVITY_CURRENT"
              glib:nick="current"/>
      <member name="northwest"
              value="1"
              c:identifier="WNCK_WINDOW_GRAVITY_NORTHWEST"
              glib:nick="northwest"/>
      <member name="north"
              value="2"
              c:identifier="WNCK_WINDOW_GRAVITY_NORTH"
              glib:nick="north"/>
      <member name="northeast"
              value="3"
              c:identifier="WNCK_WINDOW_GRAVITY_NORTHEAST"
              glib:nick="northeast"/>
      <member name="west"
              value="4"
              c:identifier="WNCK_WINDOW_GRAVITY_WEST"
              glib:nick="west"/>
      <member name="center"
              value="5"
              c:identifier="WNCK_WINDOW_GRAVITY_CENTER"
              glib:nick="center"/>
      <member name="east"
              value="6"
              c:identifier="WNCK_WINDOW_GRAVITY_EAST"
              glib:nick="east"/>
      <member name="southwest"
              value="7"
              c:identifier="WNCK_WINDOW_GRAVITY_SOUTHWEST"
              glib:nick="southwest"/>
      <member name="south"
              value="8"
              c:identifier="WNCK_WINDOW_GRAVITY_SOUTH"
              glib:nick="south"/>
      <member name="southeast"
              value="9"
              c:identifier="WNCK_WINDOW_GRAVITY_SOUTHEAST"
              glib:nick="southeast"/>
      <member name="static"
              value="10"
              c:identifier="WNCK_WINDOW_GRAVITY_STATIC"
              glib:nick="static"/>
    </enumeration>
    <bitfield name="WindowMoveResizeMask"
              doc="Flag used as a bitmask when changing the geometry of a #WnckWindow. This
indicates which part of the geometry should be changed."
              version="2.16"
              glib:type-name="WnckWindowMoveResizeMask"
              glib:get-type="wnck_window_move_resize_mask_get_type"
              c:type="WnckWindowMoveResizeMask">
      <member name="x"
              value="1"
              c:identifier="WNCK_WINDOW_CHANGE_X"
              glib:nick="x"/>
      <member name="y"
              value="2"
              c:identifier="WNCK_WINDOW_CHANGE_Y"
              glib:nick="y"/>
      <member name="width"
              value="4"
              c:identifier="WNCK_WINDOW_CHANGE_WIDTH"
              glib:nick="width"/>
      <member name="height"
              value="8"
              c:identifier="WNCK_WINDOW_CHANGE_HEIGHT"
              glib:nick="height"/>
    </bitfield>
    <record name="WindowPrivate" c:type="WnckWindowPrivate">
    </record>
    <bitfield name="WindowState"
              doc="maximized.
tasklists.
wnck_window_is_sticky()).
and viewport (when minimized, for example).
the window requested activation but the window manager refused it, for
example).
wnck_window_make_above()).
wnck_window_make_below()).
Type used as a bitmask to describe the state of a #WnckWindow."
              glib:type-name="WnckWindowState"
              glib:get-type="wnck_window_state_get_type"
              c:type="WnckWindowState">
      <member name="minimized"
              value="1"
              c:identifier="WNCK_WINDOW_STATE_MINIMIZED"
              glib:nick="minimized"/>
      <member name="maximized_horizontally"
              value="2"
              c:identifier="WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY"
              glib:nick="maximized-horizontally"/>
      <member name="maximized_vertically"
              value="4"
              c:identifier="WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY"
              glib:nick="maximized-vertically"/>
      <member name="shaded"
              value="8"
              c:identifier="WNCK_WINDOW_STATE_SHADED"
              glib:nick="shaded"/>
      <member name="skip_pager"
              value="16"
              c:identifier="WNCK_WINDOW_STATE_SKIP_PAGER"
              glib:nick="skip-pager"/>
      <member name="skip_tasklist"
              value="32"
              c:identifier="WNCK_WINDOW_STATE_SKIP_TASKLIST"
              glib:nick="skip-tasklist"/>
      <member name="sticky"
              value="64"
              c:identifier="WNCK_WINDOW_STATE_STICKY"
              glib:nick="sticky"/>
      <member name="hidden"
              value="128"
              c:identifier="WNCK_WINDOW_STATE_HIDDEN"
              glib:nick="hidden"/>
      <member name="fullscreen"
              value="256"
              c:identifier="WNCK_WINDOW_STATE_FULLSCREEN"
              glib:nick="fullscreen"/>
      <member name="demands_attention"
              value="512"
              c:identifier="WNCK_WINDOW_STATE_DEMANDS_ATTENTION"
              glib:nick="demands-attention"/>
      <member name="urgent"
              value="1024"
              c:identifier="WNCK_WINDOW_STATE_URGENT"
              glib:nick="urgent"/>
      <member name="above"
              value="2048"
              c:identifier="WNCK_WINDOW_STATE_ABOVE"
              glib:nick="above"/>
      <member name="below"
              value="4096"
              c:identifier="WNCK_WINDOW_STATE_BELOW"
              glib:nick="below"/>
    </bitfield>
    <enumeration name="WindowType"
                 doc="as a palette or toolbox.
application is starting up.
Type describing the semantic type of a #WnckWindow."
                 glib:type-name="WnckWindowType"
                 glib:get-type="wnck_window_type_get_type"
                 c:type="WnckWindowType">
      <member name="normal"
              value="0"
              c:identifier="WNCK_WINDOW_NORMAL"
              glib:nick="normal"/>
      <member name="desktop"
              value="1"
              c:identifier="WNCK_WINDOW_DESKTOP"
              glib:nick="desktop"/>
      <member name="dock"
              value="2"
              c:identifier="WNCK_WINDOW_DOCK"
              glib:nick="dock"/>
      <member name="dialog"
              value="3"
              c:identifier="WNCK_WINDOW_DIALOG"
              glib:nick="dialog"/>
      <member name="toolbar"
              value="4"
              c:identifier="WNCK_WINDOW_TOOLBAR"
              glib:nick="toolbar"/>
      <member name="menu"
              value="5"
              c:identifier="WNCK_WINDOW_MENU"
              glib:nick="menu"/>
      <member name="utility"
              value="6"
              c:identifier="WNCK_WINDOW_UTILITY"
              glib:nick="utility"/>
      <member name="splashscreen"
              value="7"
              c:identifier="WNCK_WINDOW_SPLASHSCREEN"
              glib:nick="splashscreen"/>
    </enumeration>
    <enumeration name="WnckLayoutCorner" c:type="_WnckLayoutCorner">
      <member name="topleft"
              value="0"
              c:identifier="WNCK_LAYOUT_CORNER_TOPLEFT"/>
      <member name="topright"
              value="1"
              c:identifier="WNCK_LAYOUT_CORNER_TOPRIGHT"/>
      <member name="bottomright"
              value="2"
              c:identifier="WNCK_LAYOUT_CORNER_BOTTOMRIGHT"/>
      <member name="bottomleft"
              value="3"
              c:identifier="WNCK_LAYOUT_CORNER_BOTTOMLEFT"/>
    </enumeration>
    <enumeration name="WnckLayoutOrientation" c:type="_WnckLayoutOrientation">
      <member name="horizontal"
              value="0"
              c:identifier="WNCK_LAYOUT_ORIENTATION_HORIZONTAL"/>
      <member name="vertical"
              value="1"
              c:identifier="WNCK_LAYOUT_ORIENTATION_VERTICAL"/>
    </enumeration>
    <class name="Workspace"
           c:type="WnckWorkspace"
           doc="The #WnckWorkspace struct contains only private fields and should not be
directly accessed."
           parent="GObject.Object"
           glib:type-name="WnckWorkspace"
           glib:get-type="wnck_workspace_get_type"
           glib:type-struct="WorkspaceClass">
      <method name="get_number"
              c:identifier="wnck_workspace_get_number"
              doc="Gets the index of @space on the #WnckScreen to which it belongs. The
first workspace has an index of 0.">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="wnck_workspace_get_name"
              doc="Gets the human-readable name that should be used to refer to @space. If
the user has not set a special name, a fallback like &quot;Workspace 3&quot; will be
used.">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </return-value>
      </method>
      <method name="change_name"
              c:identifier="wnck_workspace_change_name"
              doc="Changes the name of @space."
              version="2.2">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_screen"
              c:identifier="wnck_workspace_get_screen"
              doc="Gets the #WnckScreen @space is on.
owned by libwnck and must not be referenced or unreferenced.">
        <return-value transfer-ownership="full">
          <type name="Screen" c:type="WnckScreen*"/>
        </return-value>
      </method>
      <method name="activate"
              c:identifier="wnck_workspace_activate"
              doc="this call to occur.
Asks the window manager to make @space the active workspace. The window
manager may decide to refuse the request (to not steal the focus if there is
a more recent user activity, for example).
This function existed before 2.10, but the @timestamp argument was missing
in earlier versions."
              version="2.10">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="timestamp" transfer-ownership="none">
            <type name="uint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="wnck_workspace_get_width"
              doc="Gets the width of @space."
              version="2.4">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_height"
              c:identifier="wnck_workspace_get_height"
              doc="Gets the height of @space."
              version="2.4">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_viewport_x"
              c:identifier="wnck_workspace_get_viewport_x"
              doc="Gets the X coordinate of the viewport in @space.
contain a viewport."
              version="2.4">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_viewport_y"
              c:identifier="wnck_workspace_get_viewport_y"
              doc="Gets the Y coordinate of the viewport in @space.
contain a viewport."
              version="2.4">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="is_virtual"
              c:identifier="wnck_workspace_is_virtual"
              doc="Gets whether @space contains a viewport."
              version="2.4">
        <return-value transfer-ownership="none">
          <type name="boolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_layout_row"
              c:identifier="wnck_workspace_get_layout_row"
              doc="Gets the row of @space in the #WnckWorkspace layout. The first row has an
index of 0 and is always the top row, regardless of the starting corner set
for the layout.
errors."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_layout_column"
              c:identifier="wnck_workspace_get_layout_column"
              doc="Gets the column of @space in the #WnckWorkspace layout. The first column
has an index of 0 and is always the left column, regardless of the starting
corner set for the layout and regardless of the default direction of the
environment (i.e., in both Left-To-Right and Right-To-Left environments).
errors."
              version="2.20">
        <return-value transfer-ownership="none">
          <type name="int" c:type="int"/>
        </return-value>
      </method>
      <method name="get_neighbor"
              c:identifier="wnck_workspace_get_neighbor"
              doc="Gets the neighbor #WnckWorkspace of @space in the @direction direction.
direction, or %NULL if no such neighbor #WnckWorkspace exists. The returned
#WnckWorkspace is owned by libwnck and must not be referenced or
unreferenced."
              version="2.20">
        <return-value transfer-ownership="full">
          <type name="Workspace" c:type="WnckWorkspace*"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <type name="MotionDirection" c:type="WnckMotionDirection"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WorkspacePrivate" c:type="WnckWorkspacePrivate*"/>
      </field>
      <glib:signal name="name-changed"
                   doc="Emitted when the name of @space changes.">
        <return-value transfer-ownership="full">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="WorkspaceClass"
            c:type="WnckWorkspaceClass"
            glib:is-gtype-struct-for="Workspace">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name_changed">
        <callback name="name_changed" c:type="name_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="space" transfer-ownership="none">
              <type name="Workspace" c:type="WnckWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pad1">
        <callback name="pad1" c:type="pad1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad2">
        <callback name="pad2" c:type="pad2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad3">
        <callback name="pad3" c:type="pad3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="pad4">
        <callback name="pad4" c:type="pad4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WorkspaceLayout"
            c:type="WnckWorkspaceLayout"
            doc="the #WnckWorkspace for each position in the layout grid, or -1 if the
position does not correspond to any #WnckWorkspace.
bigger than the number of #WnckWorskpace because the grid might not be
filled.
The #WnckWorkspaceLayout struct contains information about the layout of
#WnckWorkspace on a #WnckScreen, and the exact position of a specific
#WnckWorkspace.
Deprecated:2.20:"
            version="2.12">
      <field name="rows" writable="1">
        <type name="int" c:type="int"/>
      </field>
      <field name="cols" writable="1">
        <type name="int" c:type="int"/>
      </field>
      <field name="grid" writable="1">
        <type name="any" c:type="int*"/>
      </field>
      <field name="grid_area" writable="1">
        <type name="int" c:type="int"/>
      </field>
      <field name="current_row" writable="1">
        <type name="int" c:type="int"/>
      </field>
      <field name="current_col" writable="1">
        <type name="int" c:type="int"/>
      </field>
    </record>
    <record name="WorkspacePrivate" c:type="WnckWorkspacePrivate">
    </record>
    <function name="create_window_action_menu"
              c:identifier="wnck_create_window_action_menu"
              doc="Creates a new #WnckActionMenu. The #WnckActionMenu will be filled with menu
items for window operations on @window.">
      <return-value transfer-ownership="full">
        <type name="Gtk.Widget" c:type="GtkWidget*"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Window" c:type="WnckWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_window_set_dock_type"
              c:identifier="wnck_gtk_window_set_dock_type"
              doc="Sets the semantic type of @window to %WNCK_WINDOW_DOCK.">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pid_read_resource_usage"
              c:identifier="wnck_pid_read_resource_usage"
              doc="process ID @pid.
Looks for the X resource usage of the application with process ID @pid on
display @gdisplay. If no resource usage can be found, then all fields of
In order to find the resource usage of an application that does not have an
X window visible to libwnck (panel applets do not have any toplevel windows,
for example), wnck_pid_read_resource_usage() walks through the whole tree of
X windows. Since this walk is expensive in CPU, a cache is created. This
cache is updated in the background. This means there is a non-null
probability that no resource usage will be found for an application, even if
it is an X client. If this happens, calling wnck_pid_read_resource_usage()
again after a few seconds should work.
To properly work, this function requires the XRes extension on the X server."
              version="2.6">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="gdk_display" transfer-ownership="none">
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="pid" transfer-ownership="none">
          <type name="ulong" c:type="gulong"/>
        </parameter>
        <parameter name="usage" transfer-ownership="none">
          <type name="ResourceUsage" c:type="WnckResourceUsage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_client_type"
              c:identifier="wnck_set_client_type"
              doc="Sets the role of the libwnck user.
The default role is %WNCK_CLIENT_TYPE_APPLICATION. Therefore, for
applications providing some window management features, like pagers or
tasklists, it is important to set the role to %WNCK_CLIENT_TYPE_PAGER for
libwnck to properly work."
              version="2.14">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ewmh_sourceindication_client_type"
                   transfer-ownership="none">
          <type name="ClientType" c:type="WnckClientType"/>
        </parameter>
      </parameters>
    </function>
    <function name="xid_read_resource_usage"
              c:identifier="wnck_xid_read_resource_usage"
              doc="the X window ID @xid.
Looks for the X resource usage of the application owning the X window ID
fields of @usage are set to 0.
To properly work, this function requires the XRes extension on the X server."
              version="2.6">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="gdk_display" transfer-ownership="none">
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="xid" transfer-ownership="none">
          <type name="ulong" c:type="gulong"/>
        </parameter>
        <parameter name="usage" transfer-ownership="none">
          <type name="ResourceUsage" c:type="WnckResourceUsage*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
