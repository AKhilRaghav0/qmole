<refentry id="libbonobo-bonobo-persist">
<refmeta>
<refentrytitle>BonoboPersist</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboPersist</refname><refpurpose>Interface for anything that can save / load itself.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="BONOBO-PERSIST-TYPE-CAPS">BONOBO_PERSIST_TYPE</link>
struct      <link linkend="BonoboPersistPrivate">BonoboPersistPrivate</link>;
typedef     <link linkend="BonoboPersist">BonoboPersist</link>;
typedef     <link linkend="BonoboPersistClass">BonoboPersistClass</link>;
<link linkend="Bonobo-Persist-ContentTypeList">Bonobo_Persist_ContentTypeList</link>* <link linkend="bonobo-persist-generate-content-types">bonobo_persist_generate_content_types</link>
                                            (int num,
                                             ...);
<link linkend="BonoboPersist">BonoboPersist</link>* <link linkend="bonobo-persist-construct">bonobo_persist_construct</link>     (<link linkend="BonoboPersist">BonoboPersist</link> *persist,
                                             const <link linkend="gchar">gchar</link> *iid);
void        <link linkend="bonobo-persist-set-dirty">bonobo_persist_set_dirty</link>        (<link linkend="BonoboPersist">BonoboPersist</link> *persist,
                                             <link linkend="gboolean">gboolean</link> dirty);

</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
BonoboPersist is an abstract base class that is useless by itself.
It implements some methods to handle content type querying for
use by the derived <link linkend="BonoboPersistStream">BonoboPersistStream</link> interface.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="BONOBO-PERSIST-TYPE-CAPS">BONOBO_PERSIST_TYPE</title>
<programlisting>#define BONOBO_PERSIST_TYPE        BONOBO_TYPE_PERSIST /* deprecated, you should use BONOBO_TYPE_PERSIST */
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboPersistPrivate">struct BonoboPersistPrivate</title>
<programlisting>struct BonoboPersistPrivate;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboPersist">BonoboPersist</title>
<programlisting>typedef struct {
	BonoboObject object;

	BonoboPersistPrivate *priv;
} BonoboPersist;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="BonoboPersistClass">BonoboPersistClass</title>
<programlisting>typedef struct {
	BonoboObjectClass      parent_class;

	POA_Bonobo_Persist__epv epv;

	Bonobo_Persist_ContentTypeList *
	                      (*get_content_types) (BonoboPersist     *persist,
						    CORBA_Environment *ev);
} BonoboPersistClass;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="bonobo-persist-generate-content-types">bonobo_persist_generate_content_types ()</title>
<programlisting><link linkend="Bonobo-Persist-ContentTypeList">Bonobo_Persist_ContentTypeList</link>* bonobo_persist_generate_content_types
                                            (int num,
                                             ...);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>num</parameter>&nbsp;:</entry>
<entry> the number of content types specified
</entry></row>
<row><entry align="right"><parameter>...</parameter>&nbsp;:</entry>
<entry> the content types (as strings)
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry> a ContentTypeList containing the given ContentTypes
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-persist-construct">bonobo_persist_construct ()</title>
<programlisting><link linkend="BonoboPersist">BonoboPersist</link>* bonobo_persist_construct     (<link linkend="BonoboPersist">BonoboPersist</link> *persist,
                                             const <link linkend="gchar">gchar</link> *iid);</programlisting>
<para>
Initializes the BonoboPersist object. You should only use this
method in derived implementations, because a BonoboPersist instance
doesn't make a lot of sense, but the iid private field has to be
set at construction time.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>persist</parameter>&nbsp;:</entry>
<entry> A BonoboPersist
</entry></row>
<row><entry align="right"><parameter>iid</parameter>&nbsp;:</entry>
<entry> OAF IID of the object this interface is aggregated to
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="bonobo-persist-set-dirty">bonobo_persist_set_dirty ()</title>
<programlisting>void        bonobo_persist_set_dirty        (<link linkend="BonoboPersist">BonoboPersist</link> *persist,
                                             <link linkend="gboolean">gboolean</link> dirty);</programlisting>
<para>
Sets the dirty status of the interface which is reported via
the isDirty method.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>persist</parameter>&nbsp;:</entry>
<entry> A BonoboPersist
</entry></row>
<row><entry align="right"><parameter>dirty</parameter>&nbsp;:</entry>
<entry> A flag indicating the dirty status of this object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
<link linkend="BonoboPersistStream">BonoboPersistStream</link>, <link linkend="BonoboPersistFile">BonoboPersistFile</link>
</para>
</refsect1>

</refentry>
