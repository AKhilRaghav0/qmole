<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupServer">
<refmeta>
<refentrytitle role="top_of_page">SoupServer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupServer</refname>
<refpurpose>HTTP server</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



struct              <link linkend="SoupServer-struct">SoupServer</link>;
<link linkend="SoupServer">SoupServer</link>*         <link linkend="soup-server-new">soup_server_new</link>                     (const <link linkend="char">char</link> *optname1,
                                                         ...);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-server-is-https">soup_server_is_https</link>                (<link linkend="SoupServer">SoupServer</link> *server);
<link linkend="guint">guint</link>               <link linkend="soup-server-get-port">soup_server_get_port</link>                (<link linkend="SoupServer">SoupServer</link> *server);
<link linkend="SoupSocket">SoupSocket</link>*         <link linkend="soup-server-get-listener">soup_server_get_listener</link>            (<link linkend="SoupServer">SoupServer</link> *server);
<link linkend="void">void</link>                <link linkend="soup-server-run">soup_server_run</link>                     (<link linkend="SoupServer">SoupServer</link> *server);
<link linkend="void">void</link>                <link linkend="soup-server-run-async">soup_server_run_async</link>               (<link linkend="SoupServer">SoupServer</link> *server);
<link linkend="void">void</link>                <link linkend="soup-server-quit">soup_server_quit</link>                    (<link linkend="SoupServer">SoupServer</link> *server);
<link linkend="GMainContext">GMainContext</link>*       <link linkend="soup-server-get-async-context">soup_server_get_async_context</link>       (<link linkend="SoupServer">SoupServer</link> *server);

<link linkend="void">void</link>                (<link linkend="SoupServerCallback">*SoupServerCallback</link>)               (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="GHashTable">GHashTable</link> *query,
                                                         <link linkend="SoupClientContext">SoupClientContext</link> *client,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-server-add-handler">soup_server_add_handler</link>             (<link linkend="SoupServer">SoupServer</link> *server,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="SoupServerCallback">SoupServerCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);
<link linkend="void">void</link>                <link linkend="soup-server-remove-handler">soup_server_remove_handler</link>          (<link linkend="SoupServer">SoupServer</link> *server,
                                                         const <link linkend="char">char</link> *path);

typedef             <link linkend="SoupClientContext">SoupClientContext</link>;
<link linkend="SoupSocket">SoupSocket</link>*         <link linkend="soup-client-context-get-socket">soup_client_context_get_socket</link>      (<link linkend="SoupClientContext">SoupClientContext</link> *client);
<link linkend="SoupAddress">SoupAddress</link>*        <link linkend="soup-client-context-get-address">soup_client_context_get_address</link>     (<link linkend="SoupClientContext">SoupClientContext</link> *client);
const <link linkend="char">char</link>*         <link linkend="soup-client-context-get-host">soup_client_context_get_host</link>        (<link linkend="SoupClientContext">SoupClientContext</link> *client);
<link linkend="SoupAuthDomain">SoupAuthDomain</link>*     <link linkend="soup-client-context-get-auth-domain">soup_client_context_get_auth_domain</link> (<link linkend="SoupClientContext">SoupClientContext</link> *client);
const <link linkend="char">char</link>*         <link linkend="soup-client-context-get-auth-user">soup_client_context_get_auth_user</link>   (<link linkend="SoupClientContext">SoupClientContext</link> *client);

<link linkend="void">void</link>                <link linkend="soup-server-add-auth-domain">soup_server_add_auth_domain</link>         (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupAuthDomain">SoupAuthDomain</link> *auth_domain);
<link linkend="void">void</link>                <link linkend="soup-server-remove-auth-domain">soup_server_remove_auth_domain</link>      (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupAuthDomain">SoupAuthDomain</link> *auth_domain);

<link linkend="void">void</link>                <link linkend="soup-server-pause-message">soup_server_pause_message</link>           (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);
<link linkend="void">void</link>                <link linkend="soup-server-unpause-message">soup_server_unpause_message</link>         (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);

#define             <link linkend="SOUP-SERVER-PORT:CAPS">SOUP_SERVER_PORT</link>
#define             <link linkend="SOUP-SERVER-INTERFACE:CAPS">SOUP_SERVER_INTERFACE</link>
#define             <link linkend="SOUP-SERVER-SSL-CERT-FILE:CAPS">SOUP_SERVER_SSL_CERT_FILE</link>
#define             <link linkend="SOUP-SERVER-SSL-KEY-FILE:CAPS">SOUP_SERVER_SSL_KEY_FILE</link>
#define             <link linkend="SOUP-SERVER-ASYNC-CONTEXT:CAPS">SOUP_SERVER_ASYNC_CONTEXT</link>
#define             <link linkend="SOUP-SERVER-RAW-PATHS:CAPS">SOUP_SERVER_RAW_PATHS</link>
#define             <link linkend="SOUP-SERVER-SERVER-HEADER:CAPS">SOUP_SERVER_SERVER_HEADER</link>

</synopsis>
</refsynopsisdiv>

<refsect1 role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----SoupServer
</synopsis>

</refsect1>





<refsect1 role="properties">
<title role="properties.title">Properties</title>
<synopsis>

  &quot;<link linkend="SoupServer--async-context">async-context</link>&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only
  &quot;<link linkend="SoupServer--interface">interface</link>&quot;                <link linkend="SoupAddress">SoupAddress</link>           : Read / Write / Construct Only
  &quot;<link linkend="SoupServer--port">port</link>&quot;                     <link linkend="guint">guint</link>                 : Read / Write / Construct Only
  &quot;<link linkend="SoupServer--raw-paths">raw-paths</link>&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only
  &quot;<link linkend="SoupServer--server-header">server-header</link>&quot;            <link linkend="gchararray">gchararray</link>            : Read / Write / Construct
  &quot;<link linkend="SoupServer--ssl-cert-file">ssl-cert-file</link>&quot;            <link linkend="gchararray">gchararray</link>            : Read / Write / Construct Only
  &quot;<link linkend="SoupServer--ssl-key-file">ssl-key-file</link>&quot;             <link linkend="gchararray">gchararray</link>            : Read / Write / Construct Only
</synopsis>
</refsect1>

<refsect1 role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>

  &quot;<link linkend="SoupServer-request-aborted">request-aborted</link>&quot;                                : Run First
  &quot;<link linkend="SoupServer-request-finished">request-finished</link>&quot;                               : Run First
  &quot;<link linkend="SoupServer-request-read">request-read</link>&quot;                                   : Run First
  &quot;<link linkend="SoupServer-request-started">request-started</link>&quot;                                : Run First
</synopsis>
</refsect1>


<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="SoupServer"><type>SoupServer</type></link> implements a simple HTTP server.
</para>
<para>
To begin, create a server using <link linkend="soup-server-new"><function>soup_server_new()</function></link>. Add at least one
handler by calling <link linkend="soup-server-add-handler"><function>soup_server_add_handler()</function></link>; the handler will be
called to process any requests underneath the path passed to
<link linkend="soup-server-add-handler"><function>soup_server_add_handler()</function></link>. (If you want all requests to go to the
same handler, just pass "/" (or <link linkend="NULL:CAPS"><literal>NULL</literal></link>) for the path.) Any request
that does not match any handler will automatically be returned to
the client with a 404 (Not Found) status.
</para>
<para>
To add authentication to some or all paths, create an appropriate
<link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link> (qv), and add it to the server via
soup_server_add_auth_domain.
</para>
<para>
Additional processing options are available via <link linkend="SoupServer"><type>SoupServer</type></link>'s
signals; Connect to <link linkend="SoupServer-request-started"><type>"request-started"</type></link> to be notified
every time a new request is being processed. (This gives you a
chance to connect to the <link linkend="SoupMessage"><type>SoupMessage</type></link> "got-" signals in case you
want to do processing before the body has been fully read.)
</para>
<para>
Once the server is set up, start it processing connections by
calling <link linkend="soup-server-run-async"><function>soup_server_run_async()</function></link> or <link linkend="soup-server-run"><function>soup_server_run()</function></link>. <link linkend="SoupServer"><type>SoupServer</type></link>
runs via the glib main loop; if you need to have a server that runs
in another thread (or merely isn't bound to the default main loop),
create a <link linkend="GMainContext"><type>GMainContext</type></link> for it to use, and set that via the
<link linkend="SOUP-SERVER-ASYNC-CONTEXT:CAPS"><type>SOUP_SERVER_ASYNC_CONTEXT</type></link> property.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="SoupServer-struct" role="struct"/>struct SoupServer</title>
<indexterm><primary>SoupServer</primary></indexterm><programlisting>struct SoupServer;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="soup-server-new" role="function"/>soup_server_new ()</title>
<indexterm><primary>soup_server_new</primary></indexterm><programlisting><link linkend="SoupServer">SoupServer</link>*         soup_server_new                     (const <link linkend="char">char</link> *optname1,
                                                         ...);</programlisting>
<para>
Creates a new <link linkend="SoupServer"><type>SoupServer</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>optname1</parameter>&nbsp;:</term>
<listitem><simpara> name of first property to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> value of <parameter>optname1</parameter>, followed by additional property/value pairs
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-is-https" role="function"/>soup_server_is_https ()</title>
<indexterm><primary>soup_server_is_https</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_server_is_https                (<link linkend="SoupServer">SoupServer</link> *server);</programlisting>
<para>
Checks whether <parameter>server</parameter> is running plain http or https.
</para>
<para>
In order for a server to run https, you must set the
<link linkend="SOUP-SERVER-SSL-CERT-FILE:CAPS"><literal>SOUP_SERVER_SSL_CERT_FILE</literal></link> and <link linkend="SOUP-SERVER-SSL-KEY-FILE:CAPS"><literal>SOUP_SERVER_SSL_KEY_FILE</literal></link> properties
to provide it with an SSL certificate to use.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>server</parameter> is serving https.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-get-port" role="function"/>soup_server_get_port ()</title>
<indexterm><primary>soup_server_get_port</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_server_get_port                (<link linkend="SoupServer">SoupServer</link> *server);</programlisting>
<para>
Gets the TCP port that <parameter>server</parameter> is listening on. This is most useful
when you did not request a specific port (or explicitly requested
<link linkend="SOUP-ADDRESS-ANY-PORT:CAPS"><literal>SOUP_ADDRESS_ANY_PORT</literal></link>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the port <parameter>server</parameter> is listening on.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-get-listener" role="function"/>soup_server_get_listener ()</title>
<indexterm><primary>soup_server_get_listener</primary></indexterm><programlisting><link linkend="SoupSocket">SoupSocket</link>*         soup_server_get_listener            (<link linkend="SoupServer">SoupServer</link> *server);</programlisting>
<para>
Gets <parameter>server</parameter>'s listening socket. You should treat this as
read-only; writing to it or modifiying it may cause <parameter>server</parameter> to
malfunction.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the listening socket.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-run" role="function"/>soup_server_run ()</title>
<indexterm><primary>soup_server_run</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_run                     (<link linkend="SoupServer">SoupServer</link> *server);</programlisting>
<para>
Starts <parameter>server</parameter>, causing it to listen for and process incoming
connections. Unlike <link linkend="soup-server-run-async"><function>soup_server_run_async()</function></link>, this creates a
<link linkend="GMainLoop"><type>GMainLoop</type></link> and runs it, and it will not return until someone calls
<link linkend="soup-server-quit"><function>soup_server_quit()</function></link> to stop the server.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-run-async" role="function"/>soup_server_run_async ()</title>
<indexterm><primary>soup_server_run_async</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_run_async               (<link linkend="SoupServer">SoupServer</link> *server);</programlisting>
<para>
Starts <parameter>server</parameter>, causing it to listen for and process incoming
connections.
</para>
<para>
The server actually runs in <parameter>server</parameter>'s <link linkend="GMainContext"><type>GMainContext</type></link>. It will not
actually perform any processing unless the appropriate main loop is
running. In the simple case where you did not set the server's
<link linkend="SOUP-SERVER-ASYNC-CONTEXT:CAPS"><literal>SOUP_SERVER_ASYNC_CONTEXT</literal></link> property, this means the server will run
whenever the glib main loop is running.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-quit" role="function"/>soup_server_quit ()</title>
<indexterm><primary>soup_server_quit</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_quit                    (<link linkend="SoupServer">SoupServer</link> *server);</programlisting>
<para>
Stops processing for <parameter>server</parameter>. Call this to clean up after
<link linkend="soup-server-run-async"><function>soup_server_run_async()</function></link>, or to terminate a call to <link linkend="soup-server-run"><function>soup_server_run()</function></link>.
</para>
<para>
<parameter>server</parameter> is still in a working state after this call; you can start
and stop a server as many times as you want.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-get-async-context" role="function"/>soup_server_get_async_context ()</title>
<indexterm><primary>soup_server_get_async_context</primary></indexterm><programlisting><link linkend="GMainContext">GMainContext</link>*       soup_server_get_async_context       (<link linkend="SoupServer">SoupServer</link> *server);</programlisting>
<para>
Gets <parameter>server</parameter>'s async_context. This does not add a ref to the
context, so you will need to ref it yourself if you want it to
outlive its server.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <parameter>server</parameter>'s <link linkend="GMainContext"><type>GMainContext</type></link>, which may be <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupServerCallback" role="function"/>SoupServerCallback ()</title>
<indexterm><primary>SoupServerCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*SoupServerCallback)               (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="GHashTable">GHashTable</link> *query,
                                                         <link linkend="SoupClientContext">SoupClientContext</link> *client,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
A callback used to handle requests to a <link linkend="SoupServer"><type>SoupServer</type></link>. The callback
will be invoked after receiving the request body; <parameter>msg</parameter>'s <link linkend="method"><literal>method</literal></link>,
<link linkend="request-headers"><literal>request_headers</literal></link>, and <link linkend="request-body"><literal>request_body</literal></link> fields will be filled in.
</para>
<para>
<parameter>path</parameter> and <parameter>query</parameter> contain the likewise-named components of the
Request-URI, subject to certain assumptions. By default,
<link linkend="SoupServer"><type>SoupServer</type></link> decodes all percent-encoding in the URI path, such that
"/foo%<!-- -->2Fbar" is treated the same as "/foo/bar". If your
server is serving resources in some non-POSIX-filesystem namespace,
you may want to distinguish those as two distinct paths. In that
case, you can set the <link linkend="SOUP-SERVER-RAW-PATHS:CAPS"><literal>SOUP_SERVER_RAW_PATHS</literal></link> property when creating
the <link linkend="SoupServer"><type>SoupServer</type></link>, and it will leave those characters undecoded. (You
may want to call <link linkend="soup-uri-normalize"><function>soup_uri_normalize()</function></link> to decode any percent-encoded
characters that you aren't handling specially.)
</para>
<para>
<parameter>query</parameter> contains the query component of the Request-URI parsed
according to the rules for HTML form handling. Although this is the
only commonly-used query string format in HTTP, there is nothing
that actually requires that HTTP URIs use that format; if your
server needs to use some other format, you can just ignore <parameter>query</parameter>,
and call <link linkend="soup-message-get-uri"><function>soup_message_get_uri()</function></link> and parse the URI's query field
yourself.
</para>
<para>
After determining what to do with the request, the callback must at
a minimum call <link linkend="soup-message-set-status"><function>soup_message_set_status()</function></link> (or
<link linkend="soup-message-set-status-full"><function>soup_message_set_status_full()</function></link>) on <parameter>msg</parameter> to set the response status
code. Additionally, it may set response headers and/or fill in the
response body.
</para>
<para>
If the callback cannot fully fill in the response before returning
(eg, if it needs to wait for information from a database, or
another network server), it should call <link linkend="soup-server-pause-message"><function>soup_server_pause_message()</function></link>
to tell <link linkend="SoupServer"><type>SoupServer</type></link> to not send the response right away. When the
response is ready, call <link linkend="soup-server-unpause-message"><function>soup_server_unpause_message()</function></link> to cause it
to be sent.
</para>
<para>
To send the response body a bit at a time using "chunked" encoding,
first call <link linkend="soup-message-headers-set-encoding"><function>soup_message_headers_set_encoding()</function></link> to set
<link linkend="SOUP-ENCODING-CHUNKED:CAPS"><literal>SOUP_ENCODING_CHUNKED</literal></link> on the <link linkend="response-headers"><literal>response_headers</literal></link>. Then call
<link linkend="soup-message-body-append"><function>soup_message_body_append()</function></link> (or <link linkend="soup-message-body-append-buffer"><function>soup_message_body_append_buffer()</function></link>)
to append each chunk as it becomes ready, and
<link linkend="soup-server-unpause-message"><function>soup_server_unpause_message()</function></link> to make sure it's running. (The
server will automatically pause the message if it is using chunked
encoding but no more chunks are available.) When you are done, call
<link linkend="soup-message-body-complete"><function>soup_message_body_complete()</function></link> to indicate that no more chunks are
coming.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message being processed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the path component of <parameter>msg</parameter>'s Request-URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>query</parameter>&nbsp;:</term>
<listitem><simpara> the parsed query component of <parameter>msg</parameter>'s Request-URI
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> additional contextual information about the client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> the data passed to <parameter>soup_server_add_handler</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-add-handler" role="function"/>soup_server_add_handler ()</title>
<indexterm><primary>soup_server_add_handler</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_add_handler             (<link linkend="SoupServer">SoupServer</link> *server,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="SoupServerCallback">SoupServerCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);</programlisting>
<para>
Adds a handler to <parameter>server</parameter> for requests under <parameter>path</parameter>. See the
documentation for <link linkend="SoupServerCallback"><type>SoupServerCallback</type></link> for information about
how callbacks should behave.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the toplevel path for the handler
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> callback to invoke for requests under <parameter>path</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data for <parameter>callback</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> destroy notifier to free <parameter>user_data</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-remove-handler" role="function"/>soup_server_remove_handler ()</title>
<indexterm><primary>soup_server_remove_handler</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_remove_handler          (<link linkend="SoupServer">SoupServer</link> *server,
                                                         const <link linkend="char">char</link> *path);</programlisting>
<para>
Removes the handler registered at <parameter>path</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara> the toplevel path for the handler
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupClientContext" role="typedef"/>SoupClientContext</title>
<indexterm><primary>SoupClientContext</primary></indexterm><programlisting>typedef struct SoupClientContext SoupClientContext;
</programlisting>
<para>
A <link linkend="SoupClientContext"><type>SoupClientContext</type></link> provides additional information about the
client making a particular request. In particular, you can use
<link linkend="soup-client-context-get-auth-domain"><function>soup_client_context_get_auth_domain()</function></link> and
<link linkend="soup-client-context-get-auth-user"><function>soup_client_context_get_auth_user()</function></link> to determine if HTTP
authentication was used successfully.
</para>
<para>
<link linkend="soup-client-context-get-address"><function>soup_client_context_get_address()</function></link> and/or
<link linkend="soup-client-context-get-host"><function>soup_client_context_get_host()</function></link> can be used to get information for
logging or debugging purposes. <link linkend="soup-client-context-get-socket"><function>soup_client_context_get_socket()</function></link> may
also be of use in some situations (eg, tracking when multiple
requests are made on the same connection).</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="soup-client-context-get-socket" role="function"/>soup_client_context_get_socket ()</title>
<indexterm><primary>soup_client_context_get_socket</primary></indexterm><programlisting><link linkend="SoupSocket">SoupSocket</link>*         soup_client_context_get_socket      (<link linkend="SoupClientContext">SoupClientContext</link> *client);</programlisting>
<para>
Retrieves the <link linkend="SoupSocket"><type>SoupSocket</type></link> that <parameter>client</parameter> is associated with.
</para>
<para>
If you are using this method to observe when multiple requests are
made on the same persistent HTTP connection (eg, as the ntlm-test
test program does), you will need to pay attention to socket
destruction as well (either by using weak references, or by
connecting to the <link linkend="SoupSocket-disconnected"><type>"disconnected"</type></link> signal), so that you do
not get fooled when the allocator reuses the memory address of a
previously-destroyed socket to represent a new socket.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupClientContext"><type>SoupClientContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="SoupSocket"><type>SoupSocket</type></link> that <parameter>client</parameter> is associated with.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-client-context-get-address" role="function"/>soup_client_context_get_address ()</title>
<indexterm><primary>soup_client_context_get_address</primary></indexterm><programlisting><link linkend="SoupAddress">SoupAddress</link>*        soup_client_context_get_address     (<link linkend="SoupClientContext">SoupClientContext</link> *client);</programlisting>
<para>
Retrieves the <link linkend="SoupAddress"><type>SoupAddress</type></link> associated with the remote end
of a connection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupClientContext"><type>SoupClientContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the <link linkend="SoupAddress"><type>SoupAddress</type></link> associated with the remote end of a
connection.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-client-context-get-host" role="function"/>soup_client_context_get_host ()</title>
<indexterm><primary>soup_client_context_get_host</primary></indexterm><programlisting>const <link linkend="char">char</link>*         soup_client_context_get_host        (<link linkend="SoupClientContext">SoupClientContext</link> *client);</programlisting>
<para>
Retrieves the IP address associated with the remote end of a
connection. (If you want the actual hostname, you'll have to call
<link linkend="soup-client-context-get-address"><function>soup_client_context_get_address()</function></link> and then call the appropriate
<link linkend="SoupAddress"><type>SoupAddress</type></link> method to resolve it.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupClientContext"><type>SoupClientContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the IP address associated with the remote end of a
connection.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-client-context-get-auth-domain" role="function"/>soup_client_context_get_auth_domain ()</title>
<indexterm><primary>soup_client_context_get_auth_domain</primary></indexterm><programlisting><link linkend="SoupAuthDomain">SoupAuthDomain</link>*     soup_client_context_get_auth_domain (<link linkend="SoupClientContext">SoupClientContext</link> *client);</programlisting>
<para>
Checks whether the request associated with <parameter>client</parameter> has been
authenticated, and if so returns the <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link> that
authenticated it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupClientContext"><type>SoupClientContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the request was not
authenticated.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-client-context-get-auth-user" role="function"/>soup_client_context_get_auth_user ()</title>
<indexterm><primary>soup_client_context_get_auth_user</primary></indexterm><programlisting>const <link linkend="char">char</link>*         soup_client_context_get_auth_user   (<link linkend="SoupClientContext">SoupClientContext</link> *client);</programlisting>
<para>
Checks whether the request associated with <parameter>client</parameter> has been
authenticated, and if so returns the username that the client
authenticated as.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupClientContext"><type>SoupClientContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the authenticated-as user, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the request
was not authenticated.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-add-auth-domain" role="function"/>soup_server_add_auth_domain ()</title>
<indexterm><primary>soup_server_add_auth_domain</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_add_auth_domain         (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupAuthDomain">SoupAuthDomain</link> *auth_domain);</programlisting>
<para>
Adds an authentication domain to <parameter>server</parameter>. Each auth domain will
have the chance to require authentication for each request that
comes in; normally auth domains will require authentication for
requests on certain paths that they have been set up to watch, or
that meet other criteria set by the caller. If an auth domain
determines that a request requires authentication (and the request
doesn't contain authentication), <parameter>server</parameter> will automatically reject
the request with an appropriate status (401 Unauthorized or 407
Proxy Authentication Required). If the request used the
"100-continue" Expectation, <parameter>server</parameter> will reject it before the
request body is sent.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth_domain</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-remove-auth-domain" role="function"/>soup_server_remove_auth_domain ()</title>
<indexterm><primary>soup_server_remove_auth_domain</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_remove_auth_domain      (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupAuthDomain">SoupAuthDomain</link> *auth_domain);</programlisting>
<para>
Removes <parameter>auth_domain</parameter> from <parameter>server</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth_domain</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-pause-message" role="function"/>soup_server_pause_message ()</title>
<indexterm><primary>soup_server_pause_message</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_pause_message           (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Pauses I/O on <parameter>msg</parameter>. This can be used when you need to return from
the server handler without having the full response ready yet. Use
<link linkend="soup-server-unpause-message"><function>soup_server_unpause_message()</function></link> to resume I/O.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link> associated with <parameter>server</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-server-unpause-message" role="function"/>soup_server_unpause_message ()</title>
<indexterm><primary>soup_server_unpause_message</primary></indexterm><programlisting><link linkend="void">void</link>                soup_server_unpause_message         (<link linkend="SoupServer">SoupServer</link> *server,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg);</programlisting>
<para>
Resumes I/O on <parameter>msg</parameter>. Use this to resume after calling
<link linkend="soup-server-pause-message"><function>soup_server_pause_message()</function></link>, or after adding a new chunk to a
chunked response.
</para>
<para>
I/O won't actually resume until you return to the main loop.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupServer"><type>SoupServer</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupMessage"><type>SoupMessage</type></link> associated with <parameter>server</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SOUP-SERVER-PORT:CAPS" role="macro"/>SOUP_SERVER_PORT</title>
<indexterm><primary>SOUP_SERVER_PORT</primary></indexterm><programlisting>#define SOUP_SERVER_PORT          "port"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SERVER-INTERFACE:CAPS" role="macro"/>SOUP_SERVER_INTERFACE</title>
<indexterm><primary>SOUP_SERVER_INTERFACE</primary></indexterm><programlisting>#define SOUP_SERVER_INTERFACE     "interface"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SERVER-SSL-CERT-FILE:CAPS" role="macro"/>SOUP_SERVER_SSL_CERT_FILE</title>
<indexterm><primary>SOUP_SERVER_SSL_CERT_FILE</primary></indexterm><programlisting>#define SOUP_SERVER_SSL_CERT_FILE "ssl-cert-file"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SERVER-SSL-KEY-FILE:CAPS" role="macro"/>SOUP_SERVER_SSL_KEY_FILE</title>
<indexterm><primary>SOUP_SERVER_SSL_KEY_FILE</primary></indexterm><programlisting>#define SOUP_SERVER_SSL_KEY_FILE  "ssl-key-file"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SERVER-ASYNC-CONTEXT:CAPS" role="macro"/>SOUP_SERVER_ASYNC_CONTEXT</title>
<indexterm><primary>SOUP_SERVER_ASYNC_CONTEXT</primary></indexterm><programlisting>#define SOUP_SERVER_ASYNC_CONTEXT "async-context"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SERVER-RAW-PATHS:CAPS" role="macro"/>SOUP_SERVER_RAW_PATHS</title>
<indexterm><primary>SOUP_SERVER_RAW_PATHS</primary></indexterm><programlisting>#define SOUP_SERVER_RAW_PATHS     "raw-paths"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-SERVER-SERVER-HEADER:CAPS" role="macro"/>SOUP_SERVER_SERVER_HEADER</title>
<indexterm><primary>SOUP_SERVER_SERVER_HEADER</primary></indexterm><programlisting>#define SOUP_SERVER_SERVER_HEADER "server-header"
</programlisting>
<para>

</para></refsect2>

</refsect1>
<refsect1 role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2><title><anchor id="SoupServer--async-context"/>The <literal>&quot;async-context&quot;</literal> property</title>
<indexterm><primary>SoupServer:async-context</primary></indexterm><programlisting>  &quot;async-context&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write / Construct Only</programlisting>
<para>The GMainContext to dispatch async I/O in.</para></refsect2>
<refsect2><title><anchor id="SoupServer--interface"/>The <literal>&quot;interface&quot;</literal> property</title>
<indexterm><primary>SoupServer:interface</primary></indexterm><programlisting>  &quot;interface&quot;                <link linkend="SoupAddress">SoupAddress</link>           : Read / Write / Construct Only</programlisting>
<para>Address of interface to listen on.</para></refsect2>
<refsect2><title><anchor id="SoupServer--port"/>The <literal>&quot;port&quot;</literal> property</title>
<indexterm><primary>SoupServer:port</primary></indexterm><programlisting>  &quot;port&quot;                     <link linkend="guint">guint</link>                 : Read / Write / Construct Only</programlisting>
<para>Port to listen on.</para><para>Allowed values: &lt;= 65536</para>
<para>Default value: 0</para>
</refsect2>
<refsect2><title><anchor id="SoupServer--raw-paths"/>The <literal>&quot;raw-paths&quot;</literal> property</title>
<indexterm><primary>SoupServer:raw-paths</primary></indexterm><programlisting>  &quot;raw-paths&quot;                <link linkend="gboolean">gboolean</link>              : Read / Write / Construct Only</programlisting>
<para>If %TRUE, percent-encoding in the Request-URI path will not be automatically decoded.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2><title><anchor id="SoupServer--server-header"/>The <literal>&quot;server-header&quot;</literal> property</title>
<indexterm><primary>SoupServer:server-header</primary></indexterm><programlisting>  &quot;server-header&quot;            <link linkend="gchararray">gchararray</link>            : Read / Write / Construct</programlisting>
<para>
If non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, the value to use for the "Server" header on
<link linkend="SoupMessage"><type>SoupMessage</type></link><!-- -->s processed by this server.
</para>
<para>
The Server header is the server equivalent of the
User-Agent header, and provides information about the
server and its components. It contains a list of one or
more product tokens, separated by whitespace, with the most
significant product token coming first. The tokens must be
brief, ASCII, and mostly alphanumeric (although "-", "_",
and "." are also allowed), and may optionally include a "/"
followed by a version string. You may also put comments,
enclosed in parentheses, between or after the tokens.
</para>
<para>
Some HTTP server implementations intentionally do not use
version numbers in their Server header, so that
installations running older versions of the server don't
end up advertising their vulnerability to specific security
holes.
</para>
<para>
As with <link linkend="SoupSession--user-agent"><type>"user_agent"</type></link>, if you set a
<link linkend="server-header"><literal>server_header</literal></link> property that has trailing whitespace,
<link linkend="SoupServer"><type>SoupServer</type></link> will append its own product token (eg,
"<literal>libsoup/2.3.2</literal>") to the end of the
header for you.</para>
<para>

</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="SoupServer--ssl-cert-file"/>The <literal>&quot;ssl-cert-file&quot;</literal> property</title>
<indexterm><primary>SoupServer:ssl-cert-file</primary></indexterm><programlisting>  &quot;ssl-cert-file&quot;            <link linkend="gchararray">gchararray</link>            : Read / Write / Construct Only</programlisting>
<para>File containing server SSL certificate.</para><para>Default value: NULL</para>
</refsect2>
<refsect2><title><anchor id="SoupServer--ssl-key-file"/>The <literal>&quot;ssl-key-file&quot;</literal> property</title>
<indexterm><primary>SoupServer:ssl-key-file</primary></indexterm><programlisting>  &quot;ssl-key-file&quot;             <link linkend="gchararray">gchararray</link>            : Read / Write / Construct Only</programlisting>
<para>File containing server SSL key.</para><para>Default value: NULL</para>
</refsect2>

</refsect1>

<refsect1 role="signals">
<title role="signals.title">Signal Details</title>
<refsect2><title><anchor id="SoupServer-request-aborted"/>The <literal>&quot;request-aborted&quot;</literal> signal</title>
<indexterm><primary>SoupServer::request-aborted</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupServer">SoupServer</link>        *server,
                                                        <link linkend="SoupMessage">SoupMessage</link>       *message,
                                                        <link linkend="SoupClientContext">SoupClientContext</link> *client,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run First</programlisting>
<para>
Emitted when processing has failed for a message; this
could mean either that it could not be read (if
<link linkend="SoupServer-request-read"><type>"request_read"</type></link> has not been emitted for it yet),
or that the response could not be written back (if
<link linkend="SoupServer-request-read"><type>"request_read"</type></link> has been emitted but
<link linkend="SoupServer-request-finished"><type>"request_finished"</type></link> has not been).
</para>
<para>
<parameter>message</parameter> is in an undefined state when this signal is
emitted; the signal exists primarily to allow the server to
free any state that it may have allocated in
<link linkend="SoupServer-request-started"><type>"request_started"</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> the server
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> the client context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupServer-request-finished"/>The <literal>&quot;request-finished&quot;</literal> signal</title>
<indexterm><primary>SoupServer::request-finished</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupServer">SoupServer</link>        *server,
                                                        <link linkend="SoupMessage">SoupMessage</link>       *message,
                                                        <link linkend="SoupClientContext">SoupClientContext</link> *client,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run First</programlisting>
<para>
Emitted when the server has finished writing a response to
a request.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> the server
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> the client context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupServer-request-read"/>The <literal>&quot;request-read&quot;</literal> signal</title>
<indexterm><primary>SoupServer::request-read</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupServer">SoupServer</link>        *server,
                                                        <link linkend="SoupMessage">SoupMessage</link>       *message,
                                                        <link linkend="SoupClientContext">SoupClientContext</link> *client,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run First</programlisting>
<para>
Emitted when the server has successfully read a request.
<parameter>message</parameter> will have all of its request-side information
filled in, and if the message was authenticated, <parameter>client</parameter>
will have information about that. This signal is emitted
before any handlers are called for the message, and if it
sets the message's <link linkend="status-code"><type>status_code</type></link>, then normal handler
processing will be skipped.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> the server
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> the message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> the client context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="SoupServer-request-started"/>The <literal>&quot;request-started&quot;</literal> signal</title>
<indexterm><primary>SoupServer::request-started</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="SoupServer">SoupServer</link>        *server,
                                                        <link linkend="SoupMessage">SoupMessage</link>       *message,
                                                        <link linkend="SoupClientContext">SoupClientContext</link> *client,
                                                        <link linkend="gpointer">gpointer</link>           user_data)      : Run First</programlisting>
<para>
Emitted when the server has started reading a new request.
<parameter>message</parameter> will be completely blank; not even the
Request-Line will have been read yet. About the only thing
you can usefully do with it is connect to its signals.
</para>
<para>
If the request is read successfully, this will eventually
be followed by a <link linkend="SoupServer-request-read"><type>"request_read"</type></link> signal. If a
response is then sent, the request processing will end with
a <link linkend="SoupServer-request-finished"><type>"request_finished"</type></link> signal. If a network error
occurs, the processing will instead end with
<link linkend="SoupServer-request-aborted"><type>"request_aborted"</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&nbsp;:</term>
<listitem><simpara> the server
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> the new message
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client</parameter>&nbsp;:</term>
<listitem><simpara> the client context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1>
<title>See Also</title>
<link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</refsect1>


<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
