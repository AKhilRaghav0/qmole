<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="SoupAuthDomainDigest">
<refmeta>
<refentrytitle role="top_of_page">SoupAuthDomainDigest</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupAuthDomainDigest</refname>
<refpurpose>Server-side "Digest" authentication</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



                    <link linkend="SoupAuthDomainDigest-struct">SoupAuthDomainDigest</link>;
<link linkend="SoupAuthDomain">SoupAuthDomain</link>*     <link linkend="soup-auth-domain-digest-new">soup_auth_domain_digest_new</link>         (const <link linkend="char">char</link> *optname1,
                                                         ...);

<link linkend="char">char</link>*               (<link linkend="SoupAuthDomainDigestAuthCallback">*SoupAuthDomainDigestAuthCallback</link>) (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *username,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-auth-domain-digest-set-auth-callback">soup_auth_domain_digest_set_auth_callback</link>
                                                        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupAuthDomainDigestAuthCallback">SoupAuthDomainDigestAuthCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);
<link linkend="char">char</link>*               <link linkend="soup-auth-domain-digest-encode-password">soup_auth_domain_digest_encode_password</link>
                                                        (const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *realm,
                                                         const <link linkend="char">char</link> *password);

#define             <link linkend="SOUP-AUTH-DOMAIN-DIGEST-AUTH-CALLBACK:CAPS">SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK</link>
#define             <link linkend="SOUP-AUTH-DOMAIN-DIGEST-AUTH-DATA:CAPS">SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA</link>

</synopsis>
</refsynopsisdiv>

<refsect1 role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="SoupAuthDomain">SoupAuthDomain</link>
         +----SoupAuthDomainDigest
</synopsis>

</refsect1>





<refsect1 role="properties">
<title role="properties.title">Properties</title>
<synopsis>

  &quot;<link linkend="SoupAuthDomainDigest--auth-callback">auth-callback</link>&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write
  &quot;<link linkend="SoupAuthDomainDigest--auth-data">auth-data</link>&quot;                <link linkend="gpointer">gpointer</link>              : Read / Write
</synopsis>
</refsect1>



<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="SoupAuthDomainBasic"><type>SoupAuthDomainBasic</type></link> handles the server side of HTTP "Digest"
authentication.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="SoupAuthDomainDigest-struct" role="struct"/>SoupAuthDomainDigest</title>
<indexterm><primary>SoupAuthDomainDigest</primary></indexterm><programlisting>typedef struct _SoupAuthDomainDigest SoupAuthDomainDigest;</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="soup-auth-domain-digest-new" role="function"/>soup_auth_domain_digest_new ()</title>
<indexterm><primary>soup_auth_domain_digest_new</primary></indexterm><programlisting><link linkend="SoupAuthDomain">SoupAuthDomain</link>*     soup_auth_domain_digest_new         (const <link linkend="char">char</link> *optname1,
                                                         ...);</programlisting>
<para>
Creates a <link linkend="SoupAuthDomainDigest"><type>SoupAuthDomainDigest</type></link>. You must set the
<link linkend="SOUP-AUTH-DOMAIN-REALM:CAPS"><literal>SOUP_AUTH_DOMAIN_REALM</literal></link> parameter, to indicate the realm name to be
returned with the authentication challenge to the client. Other
parameters are optional.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>optname1</parameter>&nbsp;:</term>
<listitem><simpara> name of first option, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> option name/value pairs
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupAuthDomain"><type>SoupAuthDomain</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupAuthDomainDigestAuthCallback" role="function"/>SoupAuthDomainDigestAuthCallback ()</title>
<indexterm><primary>SoupAuthDomainDigestAuthCallback</primary></indexterm><programlisting><link linkend="char">char</link>*               (*SoupAuthDomainDigestAuthCallback) (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         const <link linkend="char">char</link> *username,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Callback used by <link linkend="SoupAuthDomainDigest"><type>SoupAuthDomainDigest</type></link> for authentication purposes.
The application should look up <parameter>username</parameter> in its password database,
and return the corresponding encoded password (see
<link linkend="soup-auth-domain-digest-encode-password"><function>soup_auth_domain_digest_encode_password()</function></link>).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the domain
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message being authenticated
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&nbsp;:</term>
<listitem><simpara> the username provided by the client
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> the data passed to <link linkend="soup-auth-domain-digest-set-auth-callback"><function>soup_auth_domain_digest_set_auth_callback()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the encoded password, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if <parameter>username</parameter> is not a
valid user. <parameter>domain</parameter> will free the password when it is done with it.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-auth-domain-digest-set-auth-callback" role="function"/>soup_auth_domain_digest_set_auth_callback ()</title>
<indexterm><primary>soup_auth_domain_digest_set_auth_callback</primary></indexterm><programlisting><link linkend="void">void</link>                soup_auth_domain_digest_set_auth_callback
                                                        (<link linkend="SoupAuthDomain">SoupAuthDomain</link> *domain,
                                                         <link linkend="SoupAuthDomainDigestAuthCallback">SoupAuthDomainDigestAuthCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> dnotify);</programlisting>
<para>
Sets the callback that <parameter>domain</parameter> will use to authenticate incoming
requests. For each request containing authorization, <parameter>domain</parameter> will
invoke the callback, and then either accept or reject the request
based on <parameter>callback</parameter>'s return value.
</para>
<para>
You can also set the auth callback by setting the
<link linkend="SOUP-AUTH-DOMAIN-DIGEST-AUTH-CALLBACK:CAPS"><literal>SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK</literal></link> and
<link linkend="SOUP-AUTH-DOMAIN-DIGEST-AUTH-DATA:CAPS"><literal>SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA</literal></link> properties, which can also be
used to set the callback at construct time.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>domain</parameter>&nbsp;:</term>
<listitem><simpara> the domain
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>auth_callback</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dnotify</parameter>&nbsp;:</term>
<listitem><simpara> destroy notifier to free <parameter>user_data</parameter> when <parameter>domain</parameter>
is destroyed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-auth-domain-digest-encode-password" role="function"/>soup_auth_domain_digest_encode_password ()</title>
<indexterm><primary>soup_auth_domain_digest_encode_password</primary></indexterm><programlisting><link linkend="char">char</link>*               soup_auth_domain_digest_encode_password
                                                        (const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *realm,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
Encodes the username/realm/password triplet for Digest
authentication. (That is, it returns a stringified MD5 hash of
<parameter>username</parameter>, <parameter>realm</parameter>, and <parameter>password</parameter> concatenated together). This is
the form that is needed as the return value of
<link linkend="SoupAuthDomainDigest"><type>SoupAuthDomainDigest</type></link>'s auth handler.
</para>
<para>
For security reasons, you should store the encoded hash, rather
than storing the cleartext password itself and calling this method
only when you need to verify it. This way, if your server is
compromised, the attackers will not gain access to cleartext
passwords which might also be usable at other sites. (Note also
that the encoded password returned by this method is identical to
the encoded password stored in an Apache .htdigest file.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>username</parameter>&nbsp;:</term>
<listitem><simpara> a username
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>realm</parameter>&nbsp;:</term>
<listitem><simpara> an auth realm name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&nbsp;:</term>
<listitem><simpara> the password for <parameter>username</parameter> in <parameter>realm</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the encoded password
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SOUP-AUTH-DOMAIN-DIGEST-AUTH-CALLBACK:CAPS" role="macro"/>SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK</title>
<indexterm><primary>SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_DIGEST_AUTH_CALLBACK "auth-callback"
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SOUP-AUTH-DOMAIN-DIGEST-AUTH-DATA:CAPS" role="macro"/>SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA</title>
<indexterm><primary>SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA</primary></indexterm><programlisting>#define SOUP_AUTH_DOMAIN_DIGEST_AUTH_DATA     "auth-data"
</programlisting>
<para>

</para></refsect2>

</refsect1>
<refsect1 role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2><title><anchor id="SoupAuthDomainDigest--auth-callback"/>The <literal>&quot;auth-callback&quot;</literal> property</title>
<indexterm><primary>SoupAuthDomainDigest:auth-callback</primary></indexterm><programlisting>  &quot;auth-callback&quot;            <link linkend="gpointer">gpointer</link>              : Read / Write</programlisting>
<para>Password-finding callback.</para></refsect2>
<refsect2><title><anchor id="SoupAuthDomainDigest--auth-data"/>The <literal>&quot;auth-data&quot;</literal> property</title>
<indexterm><primary>SoupAuthDomainDigest:auth-data</primary></indexterm><programlisting>  &quot;auth-data&quot;                <link linkend="gpointer">gpointer</link>              : Read / Write</programlisting>
<para>Data to pass to authentication callback.</para></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
