<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-24-SoupLogger">
<refmeta>
<refentrytitle role="top_of_page">SoupLogger</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>SoupLogger</refname>
<refpurpose>Debug logging support</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



                    <link linkend="SoupLogger">SoupLogger</link>;
enum                <link linkend="SoupLoggerLogLevel">SoupLoggerLogLevel</link>;
<link linkend="SoupLogger">SoupLogger</link>*         <link linkend="soup-logger-new">soup_logger_new</link>                     (<link linkend="SoupLoggerLogLevel">SoupLoggerLogLevel</link> level,
                                                         <link linkend="int">int</link> max_body_size);
<link linkend="void">void</link>                <link linkend="soup-logger-attach">soup_logger_attach</link>                  (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupSession">SoupSession</link> *session);
<link linkend="void">void</link>                <link linkend="soup-logger-detach">soup_logger_detach</link>                  (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupSession">SoupSession</link> *session);

<link linkend="SoupLoggerLogLevel">SoupLoggerLogLevel</link>  (<link linkend="SoupLoggerFilter">*SoupLoggerFilter</link>)                 (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-logger-set-request-filter">soup_logger_set_request_filter</link>      (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerFilter">SoupLoggerFilter</link> request_filter,
                                                         <link linkend="gpointer">gpointer</link> filter_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);
<link linkend="void">void</link>                <link linkend="soup-logger-set-response-filter">soup_logger_set_response_filter</link>     (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerFilter">SoupLoggerFilter</link> response_filter,
                                                         <link linkend="gpointer">gpointer</link> filter_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);

<link linkend="void">void</link>                (<link linkend="SoupLoggerPrinter">*SoupLoggerPrinter</link>)                (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerLogLevel">SoupLoggerLogLevel</link> level,
                                                         <link linkend="char">char</link> direction,
                                                         const <link linkend="char">char</link> *data,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="soup-logger-set-printer">soup_logger_set_printer</link>             (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerPrinter">SoupLoggerPrinter</link> printer,
                                                         <link linkend="gpointer">gpointer</link> printer_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);

</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="SoupLogger"><type>SoupLogger</type></link> watches a <link linkend="SoupSession"><type>SoupSession</type></link> and logs the HTTP traffic that
it generates, for debugging purposes. Many applications use an
environment variable to determine whether or not to use
<link linkend="SoupLogger"><type>SoupLogger</type></link>, and to determine the amount of debugging output.
</para>
<para>
To use <link linkend="SoupLogger"><type>SoupLogger</type></link>, first create a logger with <link linkend="soup-logger-new"><function>soup_logger_new()</function></link>,
optionally configure it with <link linkend="soup-logger-set-request-filter"><function>soup_logger_set_request_filter()</function></link>,
<link linkend="soup-logger-set-response-filter"><function>soup_logger_set_response_filter()</function></link>, and <link linkend="soup-logger-set-printer"><function>soup_logger_set_printer()</function></link>,
and then attach it to a session (or multiple sessions) with
<link linkend="soup-logger-attach"><function>soup_logger_attach()</function></link>.
</para>
<para>
By default, the debugging output is sent to <link linkend="stdout"><literal>stdout</literal></link>, and looks
something like:
</para>
<para>
<informalexample><screen>
&gt; POST /unauth HTTP/1.1
&gt; Soup-Debug-Timestamp: 1200171744
&gt; Soup-Debug: SoupSessionAsync 1 (0x612190), SoupMessage 1 (0x617000), SoupSocket 1 (0x612220)
&gt; Host: localhost
&gt; Content-Type: text/plain
&gt; Connection: close
&gt; 
&gt; This is a test.
  
&lt; HTTP/1.1 201 Created
&lt; Soup-Debug-Timestamp: 1200171744
&lt; Soup-Debug: SoupMessage 1 (0x617000)
&lt; Date: Sun, 12 Jan 2008 21:02:24 GMT
&lt; Content-Length: 0
</screen></informalexample>
</para>
<para>
The <literal>Soup-Debug-Timestamp</literal> line gives the time (as
a <link linkend="time-t"><type>time_t</type></link>) when the request was sent, or the response fully
received.
</para>
<para>
The <literal>Soup-Debug</literal> line gives further debugging
information about the <link linkend="SoupSession"><type>SoupSession</type></link>, <link linkend="SoupMessage"><type>SoupMessage</type></link>, and <link linkend="SoupSocket"><type>SoupSocket</type></link>
involved; the hex numbers are the addresses of the objects in
question (which may be useful if you are running in a debugger).
The decimal IDs are simply counters that uniquely identify objects
across the lifetime of the <link linkend="SoupLogger"><type>SoupLogger</type></link>. In particular, this can be
used to identify when multiple messages are sent across the same
connection.</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="SoupLogger" role="struct"/>SoupLogger</title>
<indexterm><primary>SoupLogger</primary></indexterm><programlisting>typedef struct {
	GObject parent;
} SoupLogger;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="SoupLoggerLogLevel" role="enum"/>enum SoupLoggerLogLevel</title>
<indexterm><primary>SoupLoggerLogLevel</primary></indexterm><programlisting>typedef enum {
	SOUP_LOGGER_LOG_NONE,
	SOUP_LOGGER_LOG_MINIMAL,
	SOUP_LOGGER_LOG_HEADERS,
	SOUP_LOGGER_LOG_BODY
} SoupLoggerLogLevel;
</programlisting>
<para>
Describes the level of logging output to provide.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-LOGGER-LOG-NONE:CAPS" role="constant"/><literal>SOUP_LOGGER_LOG_NONE</literal></term>
<listitem><simpara> No logging
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-LOGGER-LOG-MINIMAL:CAPS" role="constant"/><literal>SOUP_LOGGER_LOG_MINIMAL</literal></term>
<listitem><simpara> Log the Request-Line or Status-Line and
the Soup-Debug pseudo-headers
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-LOGGER-LOG-HEADERS:CAPS" role="constant"/><literal>SOUP_LOGGER_LOG_HEADERS</literal></term>
<listitem><simpara> Log the full request/response headers
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-LOGGER-LOG-BODY:CAPS" role="constant"/><literal>SOUP_LOGGER_LOG_BODY</literal></term>
<listitem><simpara> Log the full headers and request/response
bodies.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-logger-new" role="function"/>soup_logger_new ()</title>
<indexterm><primary>soup_logger_new</primary></indexterm><programlisting><link linkend="SoupLogger">SoupLogger</link>*         soup_logger_new                     (<link linkend="SoupLoggerLogLevel">SoupLoggerLogLevel</link> level,
                                                         <link linkend="int">int</link> max_body_size);</programlisting>
<para>
Creates a new <link linkend="SoupLogger"><type>SoupLogger</type></link> with the given debug level. If <parameter>level</parameter> is
<link linkend="SOUP-LOGGER-LOG-BODY:CAPS"><literal>SOUP_LOGGER_LOG_BODY</literal></link>, <parameter>max_body_size</parameter> gives the maximum number of
bytes of the body that will be logged. (-1 means "no limit".)
</para>
<para>
If you need finer control over what message parts are and aren't
logged, use <link linkend="soup-logger-set-request-filter"><function>soup_logger_set_request_filter()</function></link> and
<link linkend="soup-logger-set-response-filter"><function>soup_logger_set_response_filter()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara> the debug level
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_body_size</parameter>&nbsp;:</term>
<listitem><simpara> the maximum body size to output, or -1
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-logger-attach" role="function"/>soup_logger_attach ()</title>
<indexterm><primary>soup_logger_attach</primary></indexterm><programlisting><link linkend="void">void</link>                soup_logger_attach                  (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupSession">SoupSession</link> *session);</programlisting>
<para>
Sets <parameter>logger</parameter> to watch <parameter>session</parameter> and print debug information for
its messages.
</para>
<para>
(The session will take a reference on <parameter>logger</parameter>, which will be
removed when you call <link linkend="soup-logger-detach"><function>soup_logger_detach()</function></link>, or when the session is
destroyed.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logger</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-logger-detach" role="function"/>soup_logger_detach ()</title>
<indexterm><primary>soup_logger_detach</primary></indexterm><programlisting><link linkend="void">void</link>                soup_logger_detach                  (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupSession">SoupSession</link> *session);</programlisting>
<para>
Stops <parameter>logger</parameter> from watching <parameter>session</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logger</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupSession"><type>SoupSession</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupLoggerFilter" role="function"/>SoupLoggerFilter ()</title>
<indexterm><primary>SoupLoggerFilter</primary></indexterm><programlisting><link linkend="SoupLoggerLogLevel">SoupLoggerLogLevel</link>  (*SoupLoggerFilter)                 (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupMessage">SoupMessage</link> *msg,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The prototype for a logging filter. The filter callback will be
invoked for each request or response, and should analyze it and
return a <link linkend="SoupLoggerLogLevel"><type>SoupLoggerLogLevel</type></link> value indicating how much of the
message to log. Eg, it might choose between <link linkend="SOUP-LOGGER-LOG-BODY:CAPS"><literal>SOUP_LOGGER_LOG_BODY</literal></link>
and <link linkend="SOUP-LOGGER-LOG-HEADERS:CAPS"><literal>SOUP_LOGGER_LOG_HEADERS</literal></link> depending on the Content-Type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logger</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara> the message being logged
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> the data passed to <link linkend="soup-logger-set-request-filter"><function>soup_logger_set_request_filter()</function></link>
or <link linkend="soup-logger-set-response-filter"><function>soup_logger_set_response_filter()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="SoupLoggerLogLevel"><type>SoupLoggerLogLevel</type></link> value indicating how much of
the message to log
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-logger-set-request-filter" role="function"/>soup_logger_set_request_filter ()</title>
<indexterm><primary>soup_logger_set_request_filter</primary></indexterm><programlisting><link linkend="void">void</link>                soup_logger_set_request_filter      (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerFilter">SoupLoggerFilter</link> request_filter,
                                                         <link linkend="gpointer">gpointer</link> filter_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);</programlisting>
<para>
Sets up a filter to determine the log level for a given request.
For each HTTP request <parameter>logger</parameter> will invoke <parameter>request_filter</parameter> to
determine how much (if any) of that request to log. (If you do not
set a request filter, <parameter>logger</parameter> will just always log requests at the
level passed to <link linkend="soup-logger-new"><function>soup_logger_new()</function></link>.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logger</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_filter</parameter>&nbsp;:</term>
<listitem><simpara> the callback for request debugging
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filter_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> to free <parameter>filter_data</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-logger-set-response-filter" role="function"/>soup_logger_set_response_filter ()</title>
<indexterm><primary>soup_logger_set_response_filter</primary></indexterm><programlisting><link linkend="void">void</link>                soup_logger_set_response_filter     (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerFilter">SoupLoggerFilter</link> response_filter,
                                                         <link linkend="gpointer">gpointer</link> filter_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);</programlisting>
<para>
Sets up a filter to determine the log level for a given response.
For each HTTP response <parameter>logger</parameter> will invoke <parameter>response_filter</parameter> to
determine how much (if any) of that response to log. (If you do not
set a response filter, <parameter>logger</parameter> will just always log responses at
the level passed to <link linkend="soup-logger-new"><function>soup_logger_new()</function></link>.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logger</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response_filter</parameter>&nbsp;:</term>
<listitem><simpara> the callback for response debugging
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filter_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> to free <parameter>filter_data</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupLoggerPrinter" role="function"/>SoupLoggerPrinter ()</title>
<indexterm><primary>SoupLoggerPrinter</primary></indexterm><programlisting><link linkend="void">void</link>                (*SoupLoggerPrinter)                (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerLogLevel">SoupLoggerLogLevel</link> level,
                                                         <link linkend="char">char</link> direction,
                                                         const <link linkend="char">char</link> *data,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The prototype for a custom printing callback.
</para>
<para>
<parameter>level</parameter> indicates what kind of information is being printed. Eg, it
will be <link linkend="SOUP-LOGGER-LOG-HEADERS:CAPS"><literal>SOUP_LOGGER_LOG_HEADERS</literal></link> if <parameter>data</parameter> is header data.
</para>
<para>
<parameter>direction</parameter> is either '&lt;', '>', or ' ', and <parameter>data</parameter> is the single line
to print; the printer is expected to add a terminating newline.
</para>
<para>
To get the effect of the default printer, you would do:
</para>
<para>
<informalexample><programlisting>
printf ("%c %s\n", direction, data);
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logger</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&nbsp;:</term>
<listitem><simpara> the level of the information being printed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>direction</parameter>&nbsp;:</term>
<listitem><simpara> a single-character prefix to <parameter>data</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> data to print
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> the data passed to <link linkend="soup-logger-set-printer"><function>soup_logger_set_printer()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-logger-set-printer" role="function"/>soup_logger_set_printer ()</title>
<indexterm><primary>soup_logger_set_printer</primary></indexterm><programlisting><link linkend="void">void</link>                soup_logger_set_printer             (<link linkend="SoupLogger">SoupLogger</link> *logger,
                                                         <link linkend="SoupLoggerPrinter">SoupLoggerPrinter</link> printer,
                                                         <link linkend="gpointer">gpointer</link> printer_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);</programlisting>
<para>
Sets up an alternate log printing routine, if you don't want
the log to go to <link linkend="stdout"><literal>stdout</literal></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>logger</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupLogger"><type>SoupLogger</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>printer</parameter>&nbsp;:</term>
<listitem><simpara> the callback for printing logging output
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>printer_data</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to the callback
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GDestroyNotify"><type>GDestroyNotify</type></link> to free <parameter>printer_data</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
