<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libsoup-24-Soup-Miscellaneous-Utilities">
<refmeta>
<refentrytitle role="top_of_page">Soup Miscellaneous Utilities</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBSOUP-2.4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Soup Miscellaneous Utilities</refname>
<refpurpose>Miscellaneous functions</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



                    <link linkend="SoupDate">SoupDate</link>;
enum                <link linkend="SoupDateFormat">SoupDateFormat</link>;
<link linkend="SoupDate">SoupDate</link>*           <link linkend="soup-date-new">soup_date_new</link>                       (<link linkend="int">int</link> year,
                                                         <link linkend="int">int</link> month,
                                                         <link linkend="int">int</link> day,
                                                         <link linkend="int">int</link> hour,
                                                         <link linkend="int">int</link> minute,
                                                         <link linkend="int">int</link> second);
<link linkend="SoupDate">SoupDate</link>*           <link linkend="soup-date-new-from-string">soup_date_new_from_string</link>           (const <link linkend="char">char</link> *date_string);
<link linkend="SoupDate">SoupDate</link>*           <link linkend="soup-date-new-from-time-t">soup_date_new_from_time_t</link>           (<link linkend="time-t">time_t</link> when);
<link linkend="SoupDate">SoupDate</link>*           <link linkend="soup-date-new-from-now">soup_date_new_from_now</link>              (<link linkend="int">int</link> offset_seconds);
<link linkend="char">char</link>*               <link linkend="soup-date-to-string">soup_date_to_string</link>                 (<link linkend="SoupDate">SoupDate</link> *date,
                                                         <link linkend="SoupDateFormat">SoupDateFormat</link> format);
<link linkend="time-t">time_t</link>              <link linkend="soup-date-to-time-t">soup_date_to_time_t</link>                 (<link linkend="SoupDate">SoupDate</link> *date);
<link linkend="void">void</link>                <link linkend="soup-date-free">soup_date_free</link>                      (<link linkend="SoupDate">SoupDate</link> *date);

<link linkend="GHashTable">GHashTable</link>*         <link linkend="soup-form-decode">soup_form_decode</link>                    (const <link linkend="char">char</link> *encoded_form);
<link linkend="char">char</link>*               <link linkend="soup-form-encode">soup_form_encode</link>                    (const <link linkend="char">char</link> *first_field,
                                                         ...);
<link linkend="char">char</link>*               <link linkend="soup-form-encode-datalist">soup_form_encode_datalist</link>           (<link linkend="GData">GData</link> **form_data_set);
<link linkend="char">char</link>*               <link linkend="soup-form-encode-hash">soup_form_encode_hash</link>               (<link linkend="GHashTable">GHashTable</link> *form_data_set);
<link linkend="char">char</link>*               <link linkend="soup-form-encode-valist">soup_form_encode_valist</link>             (const <link linkend="char">char</link> *first_field,
                                                         <link linkend="va-list">va_list</link> args);
<link linkend="SoupMessage">SoupMessage</link>*        <link linkend="soup-form-request-new">soup_form_request_new</link>               (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri,
                                                         const <link linkend="char">char</link> *first_field,
                                                         ...);
<link linkend="SoupMessage">SoupMessage</link>*        <link linkend="soup-form-request-new-from-datalist">soup_form_request_new_from_datalist</link> (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri,
                                                         <link linkend="GData">GData</link> **form_data_set);
<link linkend="SoupMessage">SoupMessage</link>*        <link linkend="soup-form-request-new-from-hash">soup_form_request_new_from_hash</link>     (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri,
                                                         <link linkend="GHashTable">GHashTable</link> *form_data_set);

<link linkend="guint">guint</link>               <link linkend="soup-headers-parse-request">soup_headers_parse_request</link>          (const <link linkend="char">char</link> *str,
                                                         <link linkend="int">int</link> len,
                                                         <link linkend="SoupMessageHeaders">SoupMessageHeaders</link> *req_headers,
                                                         <link linkend="char">char</link> **req_method,
                                                         <link linkend="char">char</link> **req_path,
                                                         <link linkend="SoupHTTPVersion">SoupHTTPVersion</link> *ver);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-headers-parse-response">soup_headers_parse_response</link>         (const <link linkend="char">char</link> *str,
                                                         <link linkend="int">int</link> len,
                                                         <link linkend="SoupMessageHeaders">SoupMessageHeaders</link> *headers,
                                                         <link linkend="SoupHTTPVersion">SoupHTTPVersion</link> *ver,
                                                         <link linkend="guint">guint</link> *status_code,
                                                         <link linkend="char">char</link> **reason_phrase);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-headers-parse-status-line">soup_headers_parse_status_line</link>      (const <link linkend="char">char</link> *status_line,
                                                         <link linkend="SoupHTTPVersion">SoupHTTPVersion</link> *ver,
                                                         <link linkend="guint">guint</link> *status_code,
                                                         <link linkend="char">char</link> **reason_phrase);

<link linkend="GSList">GSList</link>*             <link linkend="soup-header-parse-list">soup_header_parse_list</link>              (const <link linkend="char">char</link> *header);
<link linkend="GSList">GSList</link>*             <link linkend="soup-header-parse-quality-list">soup_header_parse_quality_list</link>      (const <link linkend="char">char</link> *header,
                                                         <link linkend="GSList">GSList</link> **unacceptable);
<link linkend="void">void</link>                <link linkend="soup-header-free-list">soup_header_free_list</link>               (<link linkend="GSList">GSList</link> *list);
<link linkend="gboolean">gboolean</link>            <link linkend="soup-header-contains">soup_header_contains</link>                (const <link linkend="char">char</link> *header,
                                                         const <link linkend="char">char</link> *token);
<link linkend="GHashTable">GHashTable</link>*         <link linkend="soup-header-parse-param-list">soup_header_parse_param_list</link>        (const <link linkend="char">char</link> *header);
<link linkend="void">void</link>                <link linkend="soup-header-free-param-list">soup_header_free_param_list</link>         (<link linkend="GHashTable">GHashTable</link> *param_list);

<link linkend="gboolean">gboolean</link>            <link linkend="soup-str-case-equal">soup_str_case_equal</link>                 (<link linkend="gconstpointer">gconstpointer</link> v1,
                                                         <link linkend="gconstpointer">gconstpointer</link> v2);
<link linkend="guint">guint</link>               <link linkend="soup-str-case-hash">soup_str_case_hash</link>                  (<link linkend="gconstpointer">gconstpointer</link> key);

<link linkend="GSource">GSource</link>*            <link linkend="soup-add-idle">soup_add_idle</link>                       (<link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> function,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="GSource">GSource</link>*            <link linkend="soup-add-io-watch">soup_add_io_watch</link>                   (<link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="GIOChannel">GIOChannel</link> *chan,
                                                         <link linkend="GIOCondition">GIOCondition</link> condition,
                                                         <link linkend="GIOFunc">GIOFunc</link> function,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="GSource">GSource</link>*            <link linkend="soup-add-timeout">soup_add_timeout</link>                    (<link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="guint">guint</link> interval,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> function,
                                                         <link linkend="gpointer">gpointer</link> data);

extern              const gboolean <link linkend="soup-ssl-supported">soup_ssl_supported</link>;

</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
</para>
<para>

</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="SoupDate" role="struct"/>SoupDate</title>
<indexterm><primary>SoupDate</primary></indexterm><programlisting>typedef struct {
	int      year;
	int      month;
	int      day;

	int      hour;
	int      minute;
	int      second;

	gboolean utc;
	int      offset;
} SoupDate;
</programlisting>
<para>
A date and time. The date is assumed to be in the (proleptic)
Gregorian calendar. The time is in UTC if <parameter>utc</parameter> is <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>. Otherwise,
the time is a local time, and <parameter>offset</parameter> gives the offset from UTC in
minutes (such that adding <parameter>offset</parameter> to the time would give the
correct UTC time). If <parameter>utc</parameter> is <link linkend="FALSE:CAPS"><literal>FALSE</literal></link> and <parameter>offset</parameter> is 0, then the
<link linkend="SoupDate"><literal>SoupDate</literal></link> represents a "floating" time with no associated timezone
information.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="int">int</link>&nbsp;<structfield>year</structfield>;</term>
<listitem><simpara> the year, 1 to 9999
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="int">int</link>&nbsp;<structfield>month</structfield>;</term>
<listitem><simpara> the month, 1 to 12
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="int">int</link>&nbsp;<structfield>day</structfield>;</term>
<listitem><simpara> day of the month, 1 to 31
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="int">int</link>&nbsp;<structfield>hour</structfield>;</term>
<listitem><simpara> hour of the day, 0 to 23
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="int">int</link>&nbsp;<structfield>minute</structfield>;</term>
<listitem><simpara> minute, 0 to 59
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="int">int</link>&nbsp;<structfield>second</structfield>;</term>
<listitem><simpara> second, 0 to 59 (or up to 61 in the case of leap seconds)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link>&nbsp;<structfield>utc</structfield>;</term>
<listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the date is in UTC
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="int">int</link>&nbsp;<structfield>offset</structfield>;</term>
<listitem><simpara> offset from UTC
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="SoupDateFormat" role="enum"/>enum SoupDateFormat</title>
<indexterm><primary>SoupDateFormat</primary></indexterm><programlisting>typedef enum {
	SOUP_DATE_HTTP = 1,
	SOUP_DATE_COOKIE,
	SOUP_DATE_RFC2822,
	SOUP_DATE_ISO8601_COMPACT,
	SOUP_DATE_ISO8601_FULL,
	SOUP_DATE_ISO8601 = SOUP_DATE_ISO8601_FULL,
	SOUP_DATE_ISO8601_XMLRPC
} SoupDateFormat;
</programlisting>
<para>
Date formats that <link linkend="soup-date-to-string"><function>soup_date_to_string()</function></link> can use.
</para>
<para>
<parameter>SOUP_DATE_HTTP</parameter> and <parameter>SOUP_DATE_COOKIE</parameter> always coerce the time to
UTC. <parameter>SOUP_DATE_ISO8601_XMLRPC</parameter> uses the time as given, ignoring the
offset completely. <parameter>SOUP_DATE_RFC2822</parameter> and the other ISO 8601
variants use the local time, appending the offset information if
available.
</para>
<para>
This enum may be extended with more values in future releases.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="SOUP-DATE-HTTP:CAPS" role="constant"/><literal>SOUP_DATE_HTTP</literal></term>
<listitem><simpara> RFC 1123 format, used by the HTTP "Date" header. Eg
"Sun, 06 Nov 1994 08:49:37 GMT"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-DATE-COOKIE:CAPS" role="constant"/><literal>SOUP_DATE_COOKIE</literal></term>
<listitem><simpara> The format for the "Expires" timestamp in the
Netscape cookie specification. Eg, "Sun, 06-Nov-1994 08:49:37 GMT".
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-DATE-RFC2822:CAPS" role="constant"/><literal>SOUP_DATE_RFC2822</literal></term>
<listitem><simpara> RFC 2822 format, eg "Sun, 6 Nov 1994 09:49:37 -0100"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-DATE-ISO8601-COMPACT:CAPS" role="constant"/><literal>SOUP_DATE_ISO8601_COMPACT</literal></term>
<listitem><simpara> ISO 8601 date/time with no optional
punctuation. Eg, "19941106T094937-0100".
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-DATE-ISO8601-FULL:CAPS" role="constant"/><literal>SOUP_DATE_ISO8601_FULL</literal></term>
<listitem><simpara> ISO 8601 date/time with all optional
punctuation. Eg, "1994-11-06T09:49:37-01:00".
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-DATE-ISO8601:CAPS" role="constant"/><literal>SOUP_DATE_ISO8601</literal></term>
<listitem><simpara> An alias for <parameter>SOUP_DATE_ISO8601_FULL</parameter>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="SOUP-DATE-ISO8601-XMLRPC:CAPS" role="constant"/><literal>SOUP_DATE_ISO8601_XMLRPC</literal></term>
<listitem><simpara> ISO 8601 date/time as used by XML-RPC.
Eg, "19941106T09:49:37".
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-date-new" role="function"/>soup_date_new ()</title>
<indexterm><primary>soup_date_new</primary></indexterm><programlisting><link linkend="SoupDate">SoupDate</link>*           soup_date_new                       (<link linkend="int">int</link> year,
                                                         <link linkend="int">int</link> month,
                                                         <link linkend="int">int</link> day,
                                                         <link linkend="int">int</link> hour,
                                                         <link linkend="int">int</link> minute,
                                                         <link linkend="int">int</link> second);</programlisting>
<para>
Creates a <link linkend="SoupDate"><type>SoupDate</type></link> representing the indicated time, UTC.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>year</parameter>&nbsp;:</term>
<listitem><simpara> the year (1-9999)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>month</parameter>&nbsp;:</term>
<listitem><simpara> the month (1-12)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>day</parameter>&nbsp;:</term>
<listitem><simpara> the day of the month (1-31, as appropriate for <parameter>month</parameter>)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hour</parameter>&nbsp;:</term>
<listitem><simpara> the hour (0-23)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>minute</parameter>&nbsp;:</term>
<listitem><simpara> the minute (0-59)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>second</parameter>&nbsp;:</term>
<listitem><simpara> the second (0-59)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="SoupDate"><type>SoupDate</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-date-new-from-string" role="function"/>soup_date_new_from_string ()</title>
<indexterm><primary>soup_date_new_from_string</primary></indexterm><programlisting><link linkend="SoupDate">SoupDate</link>*           soup_date_new_from_string           (const <link linkend="char">char</link> *date_string);</programlisting>
<para>
Parses <parameter>date_string</parameter> and tries to extract a date from it. This
recognizes all of the "HTTP-date" formats from RFC 2616, all ISO
8601 formats containing both a time and a date, RFC 2822 dates,
and reasonable approximations thereof. (Eg, it is lenient about
whitespace, leading "0"s, etc.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>date_string</parameter>&nbsp;:</term>
<listitem><simpara> the date in some plausible format
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="SoupDate"><type>SoupDate</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-date-new-from-time-t" role="function"/>soup_date_new_from_time_t ()</title>
<indexterm><primary>soup_date_new_from_time_t</primary></indexterm><programlisting><link linkend="SoupDate">SoupDate</link>*           soup_date_new_from_time_t           (<link linkend="time-t">time_t</link> when);</programlisting>
<para>
Creates a <link linkend="SoupDate"><type>SoupDate</type></link> corresponding to <parameter>when</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>when</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="time-t"><type>time_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="SoupDate"><type>SoupDate</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-date-new-from-now" role="function"/>soup_date_new_from_now ()</title>
<indexterm><primary>soup_date_new_from_now</primary></indexterm><programlisting><link linkend="SoupDate">SoupDate</link>*           soup_date_new_from_now              (<link linkend="int">int</link> offset_seconds);</programlisting>
<para>
Creates a <link linkend="SoupDate"><type>SoupDate</type></link> representing a time <parameter>offset_seconds</parameter> after the
current time (or before it, if <parameter>offset_seconds</parameter> is negative). If
offset_seconds is 0, returns the current time.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>offset_seconds</parameter>&nbsp;:</term>
<listitem><simpara> offset from current time
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="SoupDate"><type>SoupDate</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-date-to-string" role="function"/>soup_date_to_string ()</title>
<indexterm><primary>soup_date_to_string</primary></indexterm><programlisting><link linkend="char">char</link>*               soup_date_to_string                 (<link linkend="SoupDate">SoupDate</link> *date,
                                                         <link linkend="SoupDateFormat">SoupDateFormat</link> format);</programlisting>
<para>
Converts <parameter>date</parameter> to a string in the format described by <parameter>format</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>date</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupDate"><type>SoupDate</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara> the format to generate the date in
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <parameter>date</parameter> as a string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-date-to-time-t" role="function"/>soup_date_to_time_t ()</title>
<indexterm><primary>soup_date_to_time_t</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              soup_date_to_time_t                 (<link linkend="SoupDate">SoupDate</link> *date);</programlisting>
<para>
Converts <parameter>date</parameter> to a <link linkend="time-t"><literal>time_t</literal></link>.
</para>
<para>
If <parameter>date</parameter> is not representable as a <link linkend="time-t"><literal>time_t</literal></link>, it will be clamped into
range. (In particular, some HTTP cookies have expiration dates
after "Y2.038k" (2038-01-19T03:14:07Z).)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>date</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupDate"><type>SoupDate</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <parameter>date</parameter> as a <link linkend="time-t"><literal>time_t</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-date-free" role="function"/>soup_date_free ()</title>
<indexterm><primary>soup_date_free</primary></indexterm><programlisting><link linkend="void">void</link>                soup_date_free                      (<link linkend="SoupDate">SoupDate</link> *date);</programlisting>
<para>
Frees <parameter>date</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>date</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="SoupDate"><type>SoupDate</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-decode" role="function"/>soup_form_decode ()</title>
<indexterm><primary>soup_form_decode</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link>*         soup_form_decode                    (const <link linkend="char">char</link> *encoded_form);</programlisting>
<para>
Decodes <parameter>form</parameter>, which is an urlencoded dataset as defined in the
HTML 4.01 spec.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>encoded_form</parameter>&nbsp;:</term>
<listitem><simpara> data of type "application/x-www-form-urlencoded"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a hash table containing the name/value pairs from
<parameter>encoded_form</parameter>, which you can free with <link linkend="g-hash-table-destroy"><function>g_hash_table_destroy()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-encode" role="function"/>soup_form_encode ()</title>
<indexterm><primary>soup_form_encode</primary></indexterm><programlisting><link linkend="char">char</link>*               soup_form_encode                    (const <link linkend="char">char</link> *first_field,
                                                         ...);</programlisting>
<para>
Encodes the given field names and values into a value of type
"application/x-www-form-urlencoded", as defined in the HTML 4.01
spec.
</para>
<para>
This method requires you to know the names of the form fields (or
at the very least, the total number of fields) at compile time; for
working with dynamic forms, use <link linkend="soup-form-encode-hash"><function>soup_form_encode_hash()</function></link> or
<link linkend="soup-form-encode-datalist"><function>soup_form_encode_datalist()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>first_field</parameter>&nbsp;:</term>
<listitem><simpara> name of the first form field
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> value of <parameter>first_field</parameter>, followed by additional field names
and values, terminated by <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the encoded form
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-encode-datalist" role="function"/>soup_form_encode_datalist ()</title>
<indexterm><primary>soup_form_encode_datalist</primary></indexterm><programlisting><link linkend="char">char</link>*               soup_form_encode_datalist           (<link linkend="GData">GData</link> **form_data_set);</programlisting>
<para>
Encodes <parameter>form_data_set</parameter> into a value of type
"application/x-www-form-urlencoded", as defined in the HTML 4.01
spec. Unlike <link linkend="soup-form-encode-hash"><function>soup_form_encode_hash()</function></link>, this preserves the ordering
of the form elements, which may be required in some situations.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>form_data_set</parameter>&nbsp;:</term>
<listitem><simpara> a datalist containing name/value pairs
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the encoded form
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-encode-hash" role="function"/>soup_form_encode_hash ()</title>
<indexterm><primary>soup_form_encode_hash</primary></indexterm><programlisting><link linkend="char">char</link>*               soup_form_encode_hash               (<link linkend="GHashTable">GHashTable</link> *form_data_set);</programlisting>
<para>
Encodes <parameter>form_data_set</parameter> into a value of type
"application/x-www-form-urlencoded", as defined in the HTML 4.01
spec.
</para>
<para>
Note that the HTML spec states that "The control names/values are
listed in the order they appear in the document." Since this method
takes a hash table, it cannot enforce that; if you care about the
ordering of the form fields, use <link linkend="soup-form-encode-datalist"><function>soup_form_encode_datalist()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>form_data_set</parameter>&nbsp;:</term>
<listitem><simpara> a hash table containing name/value pairs (as strings)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the encoded form
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-encode-valist" role="function"/>soup_form_encode_valist ()</title>
<indexterm><primary>soup_form_encode_valist</primary></indexterm><programlisting><link linkend="char">char</link>*               soup_form_encode_valist             (const <link linkend="char">char</link> *first_field,
                                                         <link linkend="va-list">va_list</link> args);</programlisting>
<para>
See <link linkend="soup-form-encode"><function>soup_form_encode()</function></link>. This is mostly an internal method, used by
various other methods such as <link linkend="soup-uri-set-query-from-fields"><function>soup_uri_set_query_from_fields()</function></link> and
<link linkend="soup-form-request-new"><function>soup_form_request_new()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>first_field</parameter>&nbsp;:</term>
<listitem><simpara> name of the first form field
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>args</parameter>&nbsp;:</term>
<listitem><simpara> pointer to additional values, as in <link linkend="soup-form-encode"><function>soup_form_encode()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the encoded form
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-request-new" role="function"/>soup_form_request_new ()</title>
<indexterm><primary>soup_form_request_new</primary></indexterm><programlisting><link linkend="SoupMessage">SoupMessage</link>*        soup_form_request_new               (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri,
                                                         const <link linkend="char">char</link> *first_field,
                                                         ...);</programlisting>
<para>
Creates a new <link linkend="SoupMessage"><literal>SoupMessage</literal></link> and sets it up to send the given data
to <parameter>uri</parameter> via <parameter>method</parameter>. (That is, if <parameter>method</parameter> is "GET", it will encode
the form data into <parameter>uri</parameter>'s query field, and if <parameter>method</parameter> is "POST", it
will encode it into the <link linkend="SoupMessage"><literal>SoupMessage</literal></link>'s request_body.)</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>method</parameter>&nbsp;:</term>
<listitem><simpara> the HTTP method, either "GET" or "POST"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the URI to send the form data to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_field</parameter>&nbsp;:</term>
<listitem><simpara> name of the first form field
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> value of <parameter>first_field</parameter>, followed by additional field names
and values, terminated by <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupMessage"><literal>SoupMessage</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-request-new-from-datalist" role="function"/>soup_form_request_new_from_datalist ()</title>
<indexterm><primary>soup_form_request_new_from_datalist</primary></indexterm><programlisting><link linkend="SoupMessage">SoupMessage</link>*        soup_form_request_new_from_datalist (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri,
                                                         <link linkend="GData">GData</link> **form_data_set);</programlisting>
<para>
Creates a new <link linkend="SoupMessage"><literal>SoupMessage</literal></link> and sets it up to send <parameter>form_data_set</parameter> to
<parameter>uri</parameter> via <parameter>method</parameter>, as with <link linkend="soup-form-request-new"><function>soup_form_request_new()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>method</parameter>&nbsp;:</term>
<listitem><simpara> the HTTP method, either "GET" or "POST"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the URI to send the form data to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>form_data_set</parameter>&nbsp;:</term>
<listitem><simpara> the data to send to <parameter>uri</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupMessage"><literal>SoupMessage</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-form-request-new-from-hash" role="function"/>soup_form_request_new_from_hash ()</title>
<indexterm><primary>soup_form_request_new_from_hash</primary></indexterm><programlisting><link linkend="SoupMessage">SoupMessage</link>*        soup_form_request_new_from_hash     (const <link linkend="char">char</link> *method,
                                                         const <link linkend="char">char</link> *uri,
                                                         <link linkend="GHashTable">GHashTable</link> *form_data_set);</programlisting>
<para>
Creates a new <link linkend="SoupMessage"><literal>SoupMessage</literal></link> and sets it up to send <parameter>form_data_set</parameter> to
<parameter>uri</parameter> via <parameter>method</parameter>, as with <link linkend="soup-form-request-new"><function>soup_form_request_new()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>method</parameter>&nbsp;:</term>
<listitem><simpara> the HTTP method, either "GET" or "POST"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara> the URI to send the form data to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>form_data_set</parameter>&nbsp;:</term>
<listitem><simpara> the data to send to <parameter>uri</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new <link linkend="SoupMessage"><literal>SoupMessage</literal></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-headers-parse-request" role="function"/>soup_headers_parse_request ()</title>
<indexterm><primary>soup_headers_parse_request</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_headers_parse_request          (const <link linkend="char">char</link> *str,
                                                         <link linkend="int">int</link> len,
                                                         <link linkend="SoupMessageHeaders">SoupMessageHeaders</link> *req_headers,
                                                         <link linkend="char">char</link> **req_method,
                                                         <link linkend="char">char</link> **req_path,
                                                         <link linkend="SoupHTTPVersion">SoupHTTPVersion</link> *ver);</programlisting>
<para>
Parses the headers of an HTTP request in <parameter>str</parameter> and stores the
results in <parameter>req_method</parameter>, <parameter>req_path</parameter>, <parameter>ver</parameter>, and <parameter>req_headers</parameter>.
</para>
<para>
Beware that <parameter>req_headers</parameter> may be modified even on failure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> the header string (including the trailing blank line)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>str</parameter> up to (but not including) the terminating blank line.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req_headers</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="SoupMessageHeaders"><type>SoupMessageHeaders</type></link> to store the header values in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req_method</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the request method
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req_path</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the request path
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ver</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the HTTP version
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="SOUP-STATUS-OK:CAPS"><literal>SOUP_STATUS_OK</literal></link> if the headers could be parsed, or an
HTTP error to be returned to the client if they could not be.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-headers-parse-response" role="function"/>soup_headers_parse_response ()</title>
<indexterm><primary>soup_headers_parse_response</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_headers_parse_response         (const <link linkend="char">char</link> *str,
                                                         <link linkend="int">int</link> len,
                                                         <link linkend="SoupMessageHeaders">SoupMessageHeaders</link> *headers,
                                                         <link linkend="SoupHTTPVersion">SoupHTTPVersion</link> *ver,
                                                         <link linkend="guint">guint</link> *status_code,
                                                         <link linkend="char">char</link> **reason_phrase);</programlisting>
<para>
Parses the headers of an HTTP response in <parameter>str</parameter> and stores the
results in <parameter>ver</parameter>, <parameter>status_code</parameter>, <parameter>reason_phrase</parameter>, and <parameter>headers</parameter>.
</para>
<para>
Beware that <parameter>headers</parameter> may be modified even on failure.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> the header string (including the trailing blank line)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> length of <parameter>str</parameter> up to (but not including) the terminating blank line.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>headers</parameter>&nbsp;:</term>
<listitem><simpara> <link linkend="SoupMessageheaders"><type>SoupMessageheaders</type></link> to store the header values in
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ver</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the HTTP version
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_code</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the status code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason_phrase</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the reason
phrase
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> success or failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-headers-parse-status-line" role="function"/>soup_headers_parse_status_line ()</title>
<indexterm><primary>soup_headers_parse_status_line</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_headers_parse_status_line      (const <link linkend="char">char</link> *status_line,
                                                         <link linkend="SoupHTTPVersion">SoupHTTPVersion</link> *ver,
                                                         <link linkend="guint">guint</link> *status_code,
                                                         <link linkend="char">char</link> **reason_phrase);</programlisting>
<para>
Parses the HTTP Status-Line string in <parameter>status_line</parameter> into <parameter>ver</parameter>,
<parameter>status_code</parameter>, and <parameter>reason_phrase</parameter>. <parameter>status_line</parameter> must be terminated by
either "\0" or "\r\n".</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>status_line</parameter>&nbsp;:</term>
<listitem><simpara> an HTTP Status-Line
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ver</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the HTTP version
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status_code</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the status code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason_phrase</parameter>&nbsp;:</term>
<listitem><simpara> if non-<link linkend="NULL:CAPS"><literal>NULL</literal></link>, will be filled in with the reason
phrase
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if <parameter>status_line</parameter> was parsed successfully.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-header-parse-list" role="function"/>soup_header_parse_list ()</title>
<indexterm><primary>soup_header_parse_list</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*             soup_header_parse_list              (const <link linkend="char">char</link> *header);</programlisting>
<para>
Parses a header whose content is described by RFC2616 as
"<link linkend="something"><type>something</type></link>", where "something" does not itself contain commas,
except as part of quoted-strings.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> a header value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GSList"><type>GSList</type></link> of list elements, as allocated strings
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-header-parse-quality-list" role="function"/>soup_header_parse_quality_list ()</title>
<indexterm><primary>soup_header_parse_quality_list</primary></indexterm><programlisting><link linkend="GSList">GSList</link>*             soup_header_parse_quality_list      (const <link linkend="char">char</link> *header,
                                                         <link linkend="GSList">GSList</link> **unacceptable);</programlisting>
<para>
Parses a header whose content is a list of items with optional
"qvalue"s (eg, Accept, Accept-Charset, Accept-Encoding,
Accept-Language, TE).
</para>
<para>
If <parameter>unacceptable</parameter> is not <link linkend="NULL:CAPS"><literal>NULL</literal></link>, then on return, it will contain the
items with qvalue 0. Either way, those items will be removed from
the main list.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> a header value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unacceptable</parameter>&nbsp;:</term>
<listitem><simpara> on return, will contain a list of unacceptable
values
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GSList"><type>GSList</type></link> of acceptable values (as allocated
strings), highest-qvalue first.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-header-free-list" role="function"/>soup_header_free_list ()</title>
<indexterm><primary>soup_header_free_list</primary></indexterm><programlisting><link linkend="void">void</link>                soup_header_free_list               (<link linkend="GSList">GSList</link> *list);</programlisting>
<para>
Frees <parameter>list</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GSList"><type>GSList</type></link> returned from <link linkend="soup-header-parse-list"><function>soup_header_parse_list()</function></link> or
<link linkend="soup-header-parse-quality-list"><function>soup_header_parse_quality_list()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-header-contains" role="function"/>soup_header_contains ()</title>
<indexterm><primary>soup_header_contains</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_header_contains                (const <link linkend="char">char</link> *header,
                                                         const <link linkend="char">char</link> *token);</programlisting>
<para>
Parses <parameter>header</parameter> to see if it contains the token <parameter>token</parameter> (matched
case-insensitively). Note that this can't be used with lists
that have qvalues.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> An HTTP header suitable for parsing with
<link linkend="soup-header-parse-list"><function>soup_header_parse_list()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>token</parameter>&nbsp;:</term>
<listitem><simpara> a token
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> whether or not <parameter>header</parameter> contains <parameter>token</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-header-parse-param-list" role="function"/>soup_header_parse_param_list ()</title>
<indexterm><primary>soup_header_parse_param_list</primary></indexterm><programlisting><link linkend="GHashTable">GHashTable</link>*         soup_header_parse_param_list        (const <link linkend="char">char</link> *header);</programlisting>
<para>
Parses a header which is a list of something like
  token [ "=" ( token | quoted-string ) ]
</para>
<para>
Tokens that don't have an associated value will still be added to
the resulting hash table, but with a <link linkend="NULL:CAPS"><literal>NULL</literal></link> value.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&nbsp;:</term>
<listitem><simpara> a header value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> of list elements.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-header-free-param-list" role="function"/>soup_header_free_param_list ()</title>
<indexterm><primary>soup_header_free_param_list</primary></indexterm><programlisting><link linkend="void">void</link>                soup_header_free_param_list         (<link linkend="GHashTable">GHashTable</link> *param_list);</programlisting>
<para>
Frees <parameter>param_list</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>param_list</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GHashTable"><type>GHashTable</type></link> returned from <link linkend="soup-header-parse-param-list"><function>soup_header_parse_param_list()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-str-case-equal" role="function"/>soup_str_case_equal ()</title>
<indexterm><primary>soup_str_case_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            soup_str_case_equal                 (<link linkend="gconstpointer">gconstpointer</link> v1,
                                                         <link linkend="gconstpointer">gconstpointer</link> v2);</programlisting>
<para>
Compares <parameter>v1</parameter> and <parameter>v2</parameter> in a case-insensitive manner</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>v1</parameter>&nbsp;:</term>
<listitem><simpara> an ASCII string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v2</parameter>&nbsp;:</term>
<listitem><simpara> another ASCII string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if they are equal (modulo case)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-str-case-hash" role="function"/>soup_str_case_hash ()</title>
<indexterm><primary>soup_str_case_hash</primary></indexterm><programlisting><link linkend="guint">guint</link>               soup_str_case_hash                  (<link linkend="gconstpointer">gconstpointer</link> key);</programlisting>
<para>
Hashes <parameter>key</parameter> in a case-insensitive manner.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> ASCII string to hash
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the hash code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-add-idle" role="function"/>soup_add_idle ()</title>
<indexterm><primary>soup_add_idle</primary></indexterm><programlisting><link linkend="GSource">GSource</link>*            soup_add_idle                       (<link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> function,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Adds an idle event as with <link linkend="g-idle-add"><function>g_idle_add()</function></link>, but using the given
<parameter>async_context</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>async_context</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GMainContext"><type>GMainContext</type></link> to dispatch the idle event in, or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> for the default context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara> the callback to invoke at idle time
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> user data to pass to <parameter>function</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GSource"><type>GSource</type></link>, which can be removed from <parameter>async_context</parameter>
with <link linkend="g-source-destroy"><function>g_source_destroy()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-add-io-watch" role="function"/>soup_add_io_watch ()</title>
<indexterm><primary>soup_add_io_watch</primary></indexterm><programlisting><link linkend="GSource">GSource</link>*            soup_add_io_watch                   (<link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="GIOChannel">GIOChannel</link> *chan,
                                                         <link linkend="GIOCondition">GIOCondition</link> condition,
                                                         <link linkend="GIOFunc">GIOFunc</link> function,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Adds an I/O watch as with <link linkend="g-io-add-watch"><function>g_io_add_watch()</function></link>, but using the given
<parameter>async_context</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>async_context</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GMainContext"><type>GMainContext</type></link> to dispatch the I/O watch in, or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> for the default context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>chan</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GIOChannel"><type>GIOChannel</type></link> to watch
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>condition</parameter>&nbsp;:</term>
<listitem><simpara> the condition to watch for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara> the callback to invoke when <parameter>condition</parameter> occurs
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> user data to pass to <parameter>function</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GSource"><type>GSource</type></link>, which can be removed from <parameter>async_context</parameter>
with <link linkend="g-source-destroy"><function>g_source_destroy()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-add-timeout" role="function"/>soup_add_timeout ()</title>
<indexterm><primary>soup_add_timeout</primary></indexterm><programlisting><link linkend="GSource">GSource</link>*            soup_add_timeout                    (<link linkend="GMainContext">GMainContext</link> *async_context,
                                                         <link linkend="guint">guint</link> interval,
                                                         <link linkend="GSourceFunc">GSourceFunc</link> function,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Adds a timeout as with <link linkend="g-timeout-add"><function>g_timeout_add()</function></link>, but using the given
<parameter>async_context</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>async_context</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GMainContext"><type>GMainContext</type></link> to dispatch the timeout in, or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> for the default context
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interval</parameter>&nbsp;:</term>
<listitem><simpara> the timeout interval, in milliseconds
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>function</parameter>&nbsp;:</term>
<listitem><simpara> the callback to invoke at timeout time
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> user data to pass to <parameter>function</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a <link linkend="GSource"><type>GSource</type></link>, which can be removed from <parameter>async_context</parameter>
with <link linkend="g-source-destroy"><function>g_source_destroy()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="soup-ssl-supported" role="variable"/>soup_ssl_supported</title>
<indexterm><primary>soup_ssl_supported</primary></indexterm><programlisting>extern const gboolean soup_ssl_supported;
</programlisting>
<para>
Can be used to test if libsoup was compiled with ssl support.</para>
<para>

</para></refsect2>

</refsect1>





<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
