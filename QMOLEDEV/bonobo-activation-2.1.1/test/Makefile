# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SHELL = /bin/sh

srcdir = .
top_srcdir = ..

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/bonobo-activation
pkglibdir = $(libdir)/bonobo-activation
pkgincludedir = $(includedir)/bonobo-activation

top_builddir = ..

ACLOCAL = /home/chris/DEV/bonobo-activation-2.1.1/missing aclocal-1.4
AUTOCONF = autoconf
AUTOMAKE = /home/chris/DEV/bonobo-activation-2.1.1/missing automake-1.4
AUTOHEADER = autoheader

INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL} $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_SCRIPT = ${INSTALL}
transform = s,x,x,

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = 
host_triplet = arm-apple-darwin11.0.0
AS = @AS@
BONOBO_ACTIVATION_BINARY_AGE = 0
BONOBO_ACTIVATION_CFLAGS = -D_REENTRANT -DORBIT2=1 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/orbit-2.0 -I/usr/local/include/linc-1.0  
BONOBO_ACTIVATION_INTERFACE_AGE = 4
BONOBO_ACTIVATION_LIBS = -L/usr/local/lib -lgmodule-2.0 -lORBit-2 -llinc -lgobject-2.0 -lgthread-2.0 -lglib-2.0 -lintl  
BONOBO_ACTIVATION_MAJOR_VERSION = 2
BONOBO_ACTIVATION_MICRO_VERSION = 1
BONOBO_ACTIVATION_MINOR_VERSION = 1
BONOBO_SLAY = bonobo-slay
BUILD_INCLUDED_LIBINTL = @BUILD_INCLUDED_LIBINTL@
CATALOGS =  az.gmo ar.gmo be.gmo bg.gmo ca.gmo cs.gmo da.gmo de.gmo el.gmo es.gmo fi.gmo fr.gmo ga.gmo gl.gmo hi.gmo hu.gmo it.gmo ja.gmo ko.gmo lv.gmo ms.gmo nl.gmo nn.gmo no.gmo pl.gmo pt.gmo pt_BR.gmo ro.gmo ru.gmo sk.gmo sl.gmo sq.gmo sv.gmo ta.gmo tr.gmo uk.gmo vi.gmo zh_CN.gmo zh_TW.gmo
CATOBJEXT = .gmo
CC = /usr/bin/gcc
DATADIRNAME = share
DB2HTML = false
DLLTOOL = @DLLTOOL@
ECHO = echo
EXEEXT = 
GENCAT = @GENCAT@
GETTEXT_PACKAGE = bonobo-activation
GMOFILES =  az.gmo ar.gmo be.gmo bg.gmo ca.gmo cs.gmo da.gmo de.gmo el.gmo es.gmo fi.gmo fr.gmo ga.gmo gl.gmo hi.gmo hu.gmo it.gmo ja.gmo ko.gmo lv.gmo ms.gmo nl.gmo nn.gmo no.gmo pl.gmo pt.gmo pt_BR.gmo ro.gmo ru.gmo sk.gmo sl.gmo sq.gmo sv.gmo ta.gmo tr.gmo uk.gmo vi.gmo zh_CN.gmo zh_TW.gmo
GMSGFMT = /usr/local/bin/msgfmt
GTKDOC = false
GT_NO = @GT_NO@
GT_YES = @GT_YES@
HAVE_GTK_DOC = 
HTML_DIR = ${datadir}/gtk-doc/html
IF_BSD_PS = #
IF_POSIX_PS = 
INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@
INSTOBJEXT = .mo
INTLDEPS = 
INTLLIBS = -lintl -liconv
INTLOBJS = 
INTLTOOL_CAVES_RULE = %.caves:     %.caves.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_DESKTOP_RULE = %.desktop:   %.desktop.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_DIRECTORY_RULE = %.directory: %.directory.in $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_EXTRACT = $(top_builddir)/intltool-extract
INTLTOOL_KEYS_RULE = %.keys:      %.keys.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -k -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_MERGE = $(top_builddir)/intltool-merge
INTLTOOL_OAF_RULE = %.oaf:       %.oaf.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -o -p
INTLTOOL_PERL = /usr/local/bin/perl
INTLTOOL_PONG_RULE = %.pong:      %.pong.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_PROP_RULE = %.prop:      %.prop.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SCHEMAS_RULE = %.schemas:   %.schemas.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -s -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SERVER_RULE = %.server:    %.server.in    $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -o -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SHEET_RULE = %.sheet:     %.sheet.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SOUNDLIST_RULE = %.soundlist: %.soundlist.in $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_THEME_RULE = %.theme:     %.theme.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_UI_RULE = %.ui:        %.ui.in        $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_UPDATE = $(top_builddir)/intltool-update
INTLTOOL_XML_RULE = %.xml:       %.xml.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
LEX = flex
LFLAGS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LT_AGE = 0
LT_CURRENT = 4
LT_REVISION = 0
LT_VERSION_INFO = -version-info ${LT_CURRENT}:${LT_REVISION}:${LT_AGE}
MAINT = #
MAKEINFO = makeinfo
MKINSTALLDIRS = ./mkinstalldirs
OBJDUMP = @OBJDUMP@
OBJEXT = o
ORBIT_IDL = /usr/local/bin/orbit-idl-2
PACKAGE = bonobo-activation
PERL_PATH = /usr/local/bin/perl
PKG_CONFIG = /usr/local/bin/pkg-config
POFILES =  az.po ar.po be.po bg.po ca.po cs.po da.po de.po el.po es.po fi.po fr.po ga.po gl.po hi.po hu.po it.po ja.po ko.po lv.po ms.po nl.po nn.po no.po pl.po pt.po pt_BR.po ro.po ru.po sk.po sl.po sq.po sv.po ta.po tr.po uk.po vi.po zh_CN.po zh_TW.po
POSUB = po
PS_PATH = /bin/ps
RANLIB = ranlib
SERVER_CFLAGS = -D_REENTRANT -DORBIT2=1 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/orbit-2.0 -I/usr/local/include/libxml2  
SERVER_LIBS = -L/usr/local/lib -lgmodule-2.0 -lORBitCosNaming-2 -lORBit-2 -lgobject-2.0 -lgthread-2.0 -lglib-2.0 -lintl -lxml2  
STRIP = strip
USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@
USE_NLS = yes
UTILS_CFLAGS = -D_REENTRANT -DORBIT2=1 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/orbit-2.0 -I/usr/local/include/libxml2  
UTILS_LIBS = -L/usr/local/lib -lgmodule-2.0 -lORBit-2 -lgobject-2.0 -lgthread-2.0 -lglib-2.0 -lintl -lxml2  
VERSION = 2.1.1
YACC = bison -y
l = @l@

NULL = 

noinst_PROGRAMS = \
	bonobo-activation-test		\
	bonobo-activation-test-async	\
	$(NULL)


noinst_LTLIBRARIES = \
	libtest-plugin.la		\
	$(NULL)


bin_PROGRAMS = \
	bonobo-activation-empty-server 	\
	bonobo-activation-run-query	\
	$(NULL)


bonobo_activation_test_async_SOURCES = \
	bonobo-activation-test-async.c 	\
	$(NULL)


bonobo_activation_test_SOURCES = \
	bonobo-activation-test.c	\
	empty-common.c			\
	empty.h				\
	empty-stubs.c			\
	plugin-common.c			\
	plugin.h			\
	plugin-stubs.c			\
	$(NULL)


# Horrible, digusting and atrocious hack to
# get libtool to build a noinst shared lib.
libtest_plugin_la_LDFLAGS = \
	-rpath $(shell (cd $(top_builddir);pwd))/test/.libs 	\
	-module -avoid-version					\
	$(NULL)


libtest_plugin_la_SOURCES = \
	plugin.h			\
	plugin-common.c			\
	plugin-skels.c			\
	bonobo-activation-testplugin.c	\
	$(NULL)


bonobo_activation_run_query_SOURCES = \
	bonobo-activation-run-query.c 	\
	empty-common.c			\
	empty.h				\
	empty-stubs.c			\
	$(NULL)


bonobo_activation_empty_server_SOURCES = \
	empty-server.c			\
	empty.h				\
	empty-common.c			\
	empty-skels.c			\
	$(NULL)


BUILT_SOURCES = \
	empty.h				\
	empty-common.c			\
	empty-stubs.c			\
	empty-skels.c			\
	$(NULL)


CLEANFILES = empty_built plugin_built

INCLUDES = \
	-I$(top_srcdir)			\
	-I$(top_builddir)		\
	-DG_DISABLE_DEPRECATED $(UTILS_CFLAGS)


LDADD = ../bonobo-activation/libbonobo-activation.la $(UTILS_LIBS)

serverfiles = empty.server broken.server plugin.server

emptydatadir = $(libdir)/bonobo/servers
emptydata_DATA = $(serverfiles)

EXTRA_DIST = empty.idl plugin.idl $(serverfiles)

TESTS_ENVIRONMENT = \
	BONOBO_ACTIVATION_PATH="$(top_srcdir)/test:$$BONOBO_ACTIVATION_PATH" \
	PATH="$(top_builddir)/test:$$PATH" \
	LD_LIBRARY_PATH="$(top_builddir)/test/.libs:$$LD_LIBRARY_PATH"


TESTS = bonobo-activation-test bonobo-activation-test-async
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES = 
LTLIBRARIES =  $(noinst_LTLIBRARIES)


DEFS = -DHAVE_CONFIG_H -I. -I$(srcdir) -I..
CPPFLAGS = 
LDFLAGS = 
LIBS = -lpopt  -liconv
libtest_plugin_la_LIBADD = 
libtest_plugin_la_OBJECTS =  plugin-common.lo plugin-skels.lo \
bonobo-activation-testplugin.lo
bin_PROGRAMS =  bonobo-activation-empty-server$(EXEEXT) \
bonobo-activation-run-query$(EXEEXT)
noinst_PROGRAMS =  bonobo-activation-test$(EXEEXT) \
bonobo-activation-test-async$(EXEEXT)
PROGRAMS =  $(bin_PROGRAMS) $(noinst_PROGRAMS)

bonobo_activation_empty_server_OBJECTS =  empty-server.$(OBJEXT) \
empty-common.$(OBJEXT) empty-skels.$(OBJEXT)
bonobo_activation_empty_server_LDADD = $(LDADD)
bonobo_activation_empty_server_DEPENDENCIES =  \
../bonobo-activation/libbonobo-activation.la
bonobo_activation_empty_server_LDFLAGS = 
bonobo_activation_run_query_OBJECTS =  \
bonobo-activation-run-query.$(OBJEXT) empty-common.$(OBJEXT) \
empty-stubs.$(OBJEXT)
bonobo_activation_run_query_LDADD = $(LDADD)
bonobo_activation_run_query_DEPENDENCIES =  \
../bonobo-activation/libbonobo-activation.la
bonobo_activation_run_query_LDFLAGS = 
bonobo_activation_test_OBJECTS =  bonobo-activation-test.$(OBJEXT) \
empty-common.$(OBJEXT) empty-stubs.$(OBJEXT) plugin-common.$(OBJEXT) \
plugin-stubs.$(OBJEXT)
bonobo_activation_test_LDADD = $(LDADD)
bonobo_activation_test_DEPENDENCIES =  \
../bonobo-activation/libbonobo-activation.la
bonobo_activation_test_LDFLAGS = 
bonobo_activation_test_async_OBJECTS =  \
bonobo-activation-test-async.$(OBJEXT)
bonobo_activation_test_async_LDADD = $(LDADD)
bonobo_activation_test_async_DEPENDENCIES =  \
../bonobo-activation/libbonobo-activation.la
bonobo_activation_test_async_LDFLAGS = 
CFLAGS = -g -O2
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
DATA =  $(emptydata_DATA)

DIST_COMMON =  Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
SOURCES = $(libtest_plugin_la_SOURCES) $(bonobo_activation_empty_server_SOURCES) $(bonobo_activation_run_query_SOURCES) $(bonobo_activation_test_SOURCES) $(bonobo_activation_test_async_SOURCES)
OBJECTS = $(libtest_plugin_la_OBJECTS) $(bonobo_activation_empty_server_OBJECTS) $(bonobo_activation_run_query_OBJECTS) $(bonobo_activation_test_OBJECTS) $(bonobo_activation_test_async_OBJECTS)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: # Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu --include-deps test/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-noinstLTLIBRARIES:

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)

distclean-noinstLTLIBRARIES:

maintainer-clean-noinstLTLIBRARIES:

.c.o:
	$(COMPILE) -c $<

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

libtest-plugin.la: $(libtest_plugin_la_OBJECTS) $(libtest_plugin_la_DEPENDENCIES)
	$(LINK)  $(libtest_plugin_la_LDFLAGS) $(libtest_plugin_la_OBJECTS) $(libtest_plugin_la_LIBADD) $(LIBS)

mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	done

mostlyclean-noinstPROGRAMS:

clean-noinstPROGRAMS:
	-test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)

distclean-noinstPROGRAMS:

maintainer-clean-noinstPROGRAMS:

bonobo-activation-empty-server$(EXEEXT): $(bonobo_activation_empty_server_OBJECTS) $(bonobo_activation_empty_server_DEPENDENCIES)
	@rm -f bonobo-activation-empty-server$(EXEEXT)
	$(LINK) $(bonobo_activation_empty_server_LDFLAGS) $(bonobo_activation_empty_server_OBJECTS) $(bonobo_activation_empty_server_LDADD) $(LIBS)

bonobo-activation-run-query$(EXEEXT): $(bonobo_activation_run_query_OBJECTS) $(bonobo_activation_run_query_DEPENDENCIES)
	@rm -f bonobo-activation-run-query$(EXEEXT)
	$(LINK) $(bonobo_activation_run_query_LDFLAGS) $(bonobo_activation_run_query_OBJECTS) $(bonobo_activation_run_query_LDADD) $(LIBS)

bonobo-activation-test$(EXEEXT): $(bonobo_activation_test_OBJECTS) $(bonobo_activation_test_DEPENDENCIES)
	@rm -f bonobo-activation-test$(EXEEXT)
	$(LINK) $(bonobo_activation_test_LDFLAGS) $(bonobo_activation_test_OBJECTS) $(bonobo_activation_test_LDADD) $(LIBS)

bonobo-activation-test-async$(EXEEXT): $(bonobo_activation_test_async_OBJECTS) $(bonobo_activation_test_async_DEPENDENCIES)
	@rm -f bonobo-activation-test-async$(EXEEXT)
	$(LINK) $(bonobo_activation_test_async_LDFLAGS) $(bonobo_activation_test_async_OBJECTS) $(bonobo_activation_test_async_LDADD) $(LIBS)

install-emptydataDATA: $(emptydata_DATA)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(emptydatadir)
	@list='$(emptydata_DATA)'; for p in $$list; do \
	  if test -f $(srcdir)/$$p; then \
	    echo " $(INSTALL_DATA) $(srcdir)/$$p $(DESTDIR)$(emptydatadir)/$$p"; \
	    $(INSTALL_DATA) $(srcdir)/$$p $(DESTDIR)$(emptydatadir)/$$p; \
	  else if test -f $$p; then \
	    echo " $(INSTALL_DATA) $$p $(DESTDIR)$(emptydatadir)/$$p"; \
	    $(INSTALL_DATA) $$p $(DESTDIR)$(emptydatadir)/$$p; \
	  fi; fi; \
	done

uninstall-emptydataDATA:
	@$(NORMAL_UNINSTALL)
	list='$(emptydata_DATA)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(emptydatadir)/$$p; \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = test

distdir: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
bonobo-activation-run-query.o: bonobo-activation-run-query.c empty.h \
	../bonobo-activation/bonobo-activation.h \
	../bonobo-activation/Bonobo_Unknown.h \
	../bonobo-activation/Bonobo_GenericFactory.h \
	../bonobo-activation/Bonobo_Activation_types.h \
	../bonobo-activation/bonobo-activation-version.h \
	../bonobo-activation/bonobo-activation-activate.h \
	../bonobo-activation/bonobo-activation-server-info.h \
	../bonobo-activation/bonobo-activation-init.h \
	../bonobo-activation/bonobo-activation-base-service.h \
	../bonobo-activation/bonobo-activation-id.h \
	../bonobo-activation/bonobo-activation-shlib.h \
	../bonobo-activation/bonobo-activation-register.h \
	../bonobo-activation/bonobo-activation-async.h
bonobo-activation-test-async.o: bonobo-activation-test-async.c \
	../bonobo-activation/bonobo-activation.h \
	../bonobo-activation/Bonobo_Unknown.h \
	../bonobo-activation/Bonobo_GenericFactory.h \
	../bonobo-activation/Bonobo_Activation_types.h \
	../bonobo-activation/bonobo-activation-version.h \
	../bonobo-activation/bonobo-activation-activate.h \
	../bonobo-activation/bonobo-activation-server-info.h \
	../bonobo-activation/bonobo-activation-init.h \
	../bonobo-activation/bonobo-activation-base-service.h \
	../bonobo-activation/bonobo-activation-id.h \
	../bonobo-activation/bonobo-activation-shlib.h \
	../bonobo-activation/bonobo-activation-register.h \
	../bonobo-activation/bonobo-activation-async.h
bonobo-activation-test.o: bonobo-activation-test.c \
	../bonobo-activation/bonobo-activation.h \
	../bonobo-activation/Bonobo_Unknown.h \
	../bonobo-activation/Bonobo_GenericFactory.h \
	../bonobo-activation/Bonobo_Activation_types.h \
	../bonobo-activation/bonobo-activation-version.h \
	../bonobo-activation/bonobo-activation-activate.h \
	../bonobo-activation/bonobo-activation-server-info.h \
	../bonobo-activation/bonobo-activation-init.h \
	../bonobo-activation/bonobo-activation-base-service.h \
	../bonobo-activation/bonobo-activation-id.h \
	../bonobo-activation/bonobo-activation-shlib.h \
	../bonobo-activation/bonobo-activation-register.h \
	../bonobo-activation/bonobo-activation-async.h \
	../bonobo-activation/bonobo-activation-private.h ../config.h \
	../bonobo-activation/Bonobo_ActivationContext.h \
	../bonobo-activation/Bonobo_ObjectDirectory.h \
	../server/server.h empty.h plugin.h
bonobo-activation-testplugin.lo bonobo-activation-testplugin.o : \
	bonobo-activation-testplugin.c \
	../bonobo-activation/bonobo-activation.h \
	../bonobo-activation/Bonobo_Unknown.h \
	../bonobo-activation/Bonobo_GenericFactory.h \
	../bonobo-activation/Bonobo_Activation_types.h \
	../bonobo-activation/bonobo-activation-version.h \
	../bonobo-activation/bonobo-activation-activate.h \
	../bonobo-activation/bonobo-activation-server-info.h \
	../bonobo-activation/bonobo-activation-init.h \
	../bonobo-activation/bonobo-activation-base-service.h \
	../bonobo-activation/bonobo-activation-id.h \
	../bonobo-activation/bonobo-activation-shlib.h \
	../bonobo-activation/bonobo-activation-register.h \
	../bonobo-activation/bonobo-activation-async.h plugin.h
empty-common.o: empty-common.c empty.h
empty-server.o: empty-server.c ../bonobo-activation/bonobo-activation.h \
	../bonobo-activation/Bonobo_Unknown.h \
	../bonobo-activation/Bonobo_GenericFactory.h \
	../bonobo-activation/Bonobo_Activation_types.h \
	../bonobo-activation/bonobo-activation-version.h \
	../bonobo-activation/bonobo-activation-activate.h \
	../bonobo-activation/bonobo-activation-server-info.h \
	../bonobo-activation/bonobo-activation-init.h \
	../bonobo-activation/bonobo-activation-base-service.h \
	../bonobo-activation/bonobo-activation-id.h \
	../bonobo-activation/bonobo-activation-shlib.h \
	../bonobo-activation/bonobo-activation-register.h \
	../bonobo-activation/bonobo-activation-async.h empty.h
empty-skels.o: empty-skels.c empty.h
empty-stubs.o: empty-stubs.c empty.h
plugin-common.lo plugin-common.o : plugin-common.c plugin.h
plugin-skels.lo plugin-skels.o : plugin-skels.c plugin.h
plugin-stubs.o: plugin-stubs.c plugin.h
test-performance.o: test-performance.c \
	../bonobo-activation/bonobo-activation.h \
	../bonobo-activation/Bonobo_Unknown.h \
	../bonobo-activation/Bonobo_GenericFactory.h \
	../bonobo-activation/Bonobo_Activation_types.h \
	../bonobo-activation/bonobo-activation-version.h \
	../bonobo-activation/bonobo-activation-activate.h \
	../bonobo-activation/bonobo-activation-server-info.h \
	../bonobo-activation/bonobo-activation-init.h \
	../bonobo-activation/bonobo-activation-base-service.h \
	../bonobo-activation/bonobo-activation-id.h \
	../bonobo-activation/bonobo-activation-shlib.h \
	../bonobo-activation/bonobo-activation-register.h \
	../bonobo-activation/bonobo-activation-async.h \
	../bonobo-activation/bonobo-activation-private.h ../config.h \
	../bonobo-activation/Bonobo_ActivationContext.h \
	../bonobo-activation/Bonobo_ObjectDirectory.h \
	../server/server.h

check-TESTS: $(TESTS)
	@failed=0; all=0; \
	srcdir=$(srcdir); export srcdir; \
	for tst in $(TESTS); do \
	  if test -f $$tst; then dir=.; \
	  else dir="$(srcdir)"; fi; \
	  if $(TESTS_ENVIRONMENT) $$dir/$$tst; then \
	    all=`expr $$all + 1`; \
	    echo "PASS: $$tst"; \
	  elif test $$? -ne 77; then \
	    all=`expr $$all + 1`; \
	    failed=`expr $$failed + 1`; \
	    echo "FAIL: $$tst"; \
	  fi; \
	done; \
	if test "$$failed" -eq 0; then \
	  banner="All $$all tests passed"; \
	else \
	  banner="$$failed of $$all tests failed"; \
	fi; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"; \
	test "$$failed" -eq 0
info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am: install-binPROGRAMS
install-exec: install-exec-am

install-data-am: install-emptydataDATA
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am: uninstall-binPROGRAMS uninstall-emptydataDATA
uninstall: uninstall-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(DATA)
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(bindir) $(DESTDIR)$(emptydatadir)


mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean-am:  mostlyclean-noinstLTLIBRARIES mostlyclean-compile \
		mostlyclean-libtool mostlyclean-binPROGRAMS \
		mostlyclean-noinstPROGRAMS mostlyclean-tags \
		mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-noinstLTLIBRARIES clean-compile clean-libtool \
		clean-binPROGRAMS clean-noinstPROGRAMS clean-tags \
		clean-generic mostlyclean-am

clean: clean-am

distclean-am:  distclean-noinstLTLIBRARIES distclean-compile \
		distclean-libtool distclean-binPROGRAMS \
		distclean-noinstPROGRAMS distclean-tags \
		distclean-generic clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-noinstLTLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-binPROGRAMS \
		maintainer-clean-noinstPROGRAMS maintainer-clean-tags \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-noinstLTLIBRARIES distclean-noinstLTLIBRARIES \
clean-noinstLTLIBRARIES maintainer-clean-noinstLTLIBRARIES \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool mostlyclean-binPROGRAMS \
distclean-binPROGRAMS clean-binPROGRAMS maintainer-clean-binPROGRAMS \
uninstall-binPROGRAMS install-binPROGRAMS mostlyclean-noinstPROGRAMS \
distclean-noinstPROGRAMS clean-noinstPROGRAMS \
maintainer-clean-noinstPROGRAMS uninstall-emptydataDATA \
install-emptydataDATA tags mostlyclean-tags distclean-tags clean-tags \
maintainer-clean-tags distdir check-TESTS info-am info dvi-am dvi check \
check-am installcheck-am installcheck install-exec-am install-exec \
install-data-am install-data install-am install uninstall-am uninstall \
all-redirect all-am all installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean


empty.h empty-common.c empty-stubs.c empty-skels.c: empty_built
plugin.h plugin-common.c plugin-stubs.c plugin-skels.c: plugin_built

empty_built: empty.idl $(ORBIT_IDL)
	$(ORBIT_IDL) $(srcdir)/empty.idl
	touch empty_built

plugin_built: plugin.idl $(ORBIT_IDL)
	$(ORBIT_IDL) $(srcdir)/plugin.idl
	touch plugin_built

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
