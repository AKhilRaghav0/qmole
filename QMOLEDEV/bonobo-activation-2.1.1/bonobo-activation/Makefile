# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SHELL = /bin/sh

srcdir = .
top_srcdir = ..

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/bonobo-activation
pkglibdir = $(libdir)/bonobo-activation
pkgincludedir = $(includedir)/bonobo-activation

top_builddir = ..

ACLOCAL = /home/chris/DEV/bonobo-activation-2.1.1/missing aclocal-1.4
AUTOCONF = autoconf
AUTOMAKE = /home/chris/DEV/bonobo-activation-2.1.1/missing automake-1.4
AUTOHEADER = autoheader

INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL} $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_SCRIPT = ${INSTALL}
transform = s,x,x,

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = 
host_triplet = arm-apple-darwin11.0.0
AS = @AS@
BONOBO_ACTIVATION_BINARY_AGE = 0
BONOBO_ACTIVATION_CFLAGS = -D_REENTRANT -DORBIT2=1 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/orbit-2.0 -I/usr/local/include/linc-1.0  
BONOBO_ACTIVATION_INTERFACE_AGE = 4
BONOBO_ACTIVATION_LIBS = -L/usr/local/lib -lgmodule-2.0 -lORBit-2 -llinc -lgobject-2.0 -lgthread-2.0 -lglib-2.0 -lintl  
BONOBO_ACTIVATION_MAJOR_VERSION = 2
BONOBO_ACTIVATION_MICRO_VERSION = 1
BONOBO_ACTIVATION_MINOR_VERSION = 1
BONOBO_SLAY = bonobo-slay
BUILD_INCLUDED_LIBINTL = @BUILD_INCLUDED_LIBINTL@
CATALOGS =  az.gmo ar.gmo be.gmo bg.gmo ca.gmo cs.gmo da.gmo de.gmo el.gmo es.gmo fi.gmo fr.gmo ga.gmo gl.gmo hi.gmo hu.gmo it.gmo ja.gmo ko.gmo lv.gmo ms.gmo nl.gmo nn.gmo no.gmo pl.gmo pt.gmo pt_BR.gmo ro.gmo ru.gmo sk.gmo sl.gmo sq.gmo sv.gmo ta.gmo tr.gmo uk.gmo vi.gmo zh_CN.gmo zh_TW.gmo
CATOBJEXT = .gmo
CC = /usr/bin/gcc
DATADIRNAME = share
DB2HTML = false
DLLTOOL = @DLLTOOL@
ECHO = echo
EXEEXT = 
GENCAT = @GENCAT@
GETTEXT_PACKAGE = bonobo-activation
GMOFILES =  az.gmo ar.gmo be.gmo bg.gmo ca.gmo cs.gmo da.gmo de.gmo el.gmo es.gmo fi.gmo fr.gmo ga.gmo gl.gmo hi.gmo hu.gmo it.gmo ja.gmo ko.gmo lv.gmo ms.gmo nl.gmo nn.gmo no.gmo pl.gmo pt.gmo pt_BR.gmo ro.gmo ru.gmo sk.gmo sl.gmo sq.gmo sv.gmo ta.gmo tr.gmo uk.gmo vi.gmo zh_CN.gmo zh_TW.gmo
GMSGFMT = /usr/local/bin/msgfmt
GTKDOC = false
GT_NO = @GT_NO@
GT_YES = @GT_YES@
HAVE_GTK_DOC = 
HTML_DIR = ${datadir}/gtk-doc/html
IF_BSD_PS = #
IF_POSIX_PS = 
INCLUDE_LOCALE_H = @INCLUDE_LOCALE_H@
INSTOBJEXT = .mo
INTLDEPS = 
INTLLIBS = -lintl -liconv
INTLOBJS = 
INTLTOOL_CAVES_RULE = %.caves:     %.caves.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_DESKTOP_RULE = %.desktop:   %.desktop.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_DIRECTORY_RULE = %.directory: %.directory.in $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_EXTRACT = $(top_builddir)/intltool-extract
INTLTOOL_KEYS_RULE = %.keys:      %.keys.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -k -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_MERGE = $(top_builddir)/intltool-merge
INTLTOOL_OAF_RULE = %.oaf:       %.oaf.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -o -p
INTLTOOL_PERL = /usr/local/bin/perl
INTLTOOL_PONG_RULE = %.pong:      %.pong.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_PROP_RULE = %.prop:      %.prop.in      $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SCHEMAS_RULE = %.schemas:   %.schemas.in   $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -s -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SERVER_RULE = %.server:    %.server.in    $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -o -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SHEET_RULE = %.sheet:     %.sheet.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_SOUNDLIST_RULE = %.soundlist: %.soundlist.in $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_THEME_RULE = %.theme:     %.theme.in     $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_UI_RULE = %.ui:        %.ui.in        $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
INTLTOOL_UPDATE = $(top_builddir)/intltool-update
INTLTOOL_XML_RULE = %.xml:       %.xml.in       $(INTLTOOL_MERGE) $(wildcard $(top_srcdir)/po/*.po) ; $(INTLTOOL_MERGE) $(top_srcdir)/po $< $@ -x -u -c $(top_builddir)/po/.intltool-merge-cache
LEX = flex
LFLAGS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LT_AGE = 0
LT_CURRENT = 4
LT_REVISION = 0
LT_VERSION_INFO = -version-info ${LT_CURRENT}:${LT_REVISION}:${LT_AGE}
MAINT = #
MAKEINFO = makeinfo
MKINSTALLDIRS = ./mkinstalldirs
OBJDUMP = @OBJDUMP@
OBJEXT = o
ORBIT_IDL = /usr/local/bin/orbit-idl-2
PACKAGE = bonobo-activation
PERL_PATH = /usr/local/bin/perl
PKG_CONFIG = /usr/local/bin/pkg-config
POFILES =  az.po ar.po be.po bg.po ca.po cs.po da.po de.po el.po es.po fi.po fr.po ga.po gl.po hi.po hu.po it.po ja.po ko.po lv.po ms.po nl.po nn.po no.po pl.po pt.po pt_BR.po ro.po ru.po sk.po sl.po sq.po sv.po ta.po tr.po uk.po vi.po zh_CN.po zh_TW.po
POSUB = po
PS_PATH = /bin/ps
RANLIB = ranlib
SERVER_CFLAGS = -D_REENTRANT -DORBIT2=1 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/orbit-2.0 -I/usr/local/include/libxml2  
SERVER_LIBS = -L/usr/local/lib -lgmodule-2.0 -lORBitCosNaming-2 -lORBit-2 -lgobject-2.0 -lgthread-2.0 -lglib-2.0 -lintl -lxml2  
STRIP = strip
USE_INCLUDED_LIBINTL = @USE_INCLUDED_LIBINTL@
USE_NLS = yes
UTILS_CFLAGS = -D_REENTRANT -DORBIT2=1 -I/usr/local/lib/glib-2.0/include -I/usr/local/include/orbit-2.0 -I/usr/local/include/libxml2  
UTILS_LIBS = -L/usr/local/lib -lgmodule-2.0 -lORBit-2 -lgobject-2.0 -lgthread-2.0 -lglib-2.0 -lintl -lxml2  
VERSION = 2.1.1
YACC = bison -y
l = @l@

NULL = 

lib_LTLIBRARIES = libbonobo-activation.la

INCLUDES = \
	-I$(top_srcdir)				\
	-I$(top_builddir)			\
	-DSERVER_LIBEXECDIR=\""$(libexecdir)\"" \
        -DBONOBO_ACTIVATION_LOCALEDIR=\""${prefix}/${DATADIRNAME}/locale"\" \
	$(BONOBO_ACTIVATION_CFLAGS)		\
	-DVERSION=\"$(VERSION)\"		\
	-DG_DISABLE_DEPRECATED			\
	$(NULL)


LDFLAGS = \
	$(BONOBO_ACTIVATION_LIBS)		\
	-version-info ${LT_CURRENT}:${LT_REVISION}:${LT_AGE}			\
	$(NULL)


bonobo_activationincludedir = $(includedir)/bonobo-activation-2.0/bonobo-activation

bonobo_activationinclude_HEADERS = \
	Bonobo_Unknown.h			\
	Bonobo_GenericFactory.h			\
	Bonobo_Activation_types.h		\
	bonobo-activation.h			\
	bonobo-activation-async.h		\
	bonobo-activation-base-service.h	\
	bonobo-activation-id.h			\
	bonobo-activation-activate.h		\
	bonobo-activation-init.h		\
	bonobo-activation-shlib.h		\
	bonobo-activation-register.h		\
	bonobo-activation-server-info.h		\
	bonobo-activation-async.h		\
	bonobo-activation-version.h		\
	$(NULL)


libbonobo_activation_la_SOURCES = \
	$(BUILT_SOURCES)			\
	bonobo-activation-client.c		\
	bonobo-activation-client.h		\
	bonobo-activation-id.c			\
	bonobo-activation-private.h		\
	bonobo-activation-shlib.c		\
	bonobo-activation-activate.c		\
	bonobo-activation-activate-private.h	\
	bonobo-activation-base-service.c	\
	bonobo-activation-register.c		\
	bonobo-activation-server-info.c		\
	bonobo-activation-i18n.h		\
	bonobo-activation-fork-server.c		\
	bonobo-activation-init.c		\
	$(NULL)


IDL_FLAGS = -I$(top_srcdir)/idl
IDL_DIR = $(top_srcdir)/idl/
IDL_FILES = Bonobo_Unknown.idl			\
	    Bonobo_GenericFactory.idl		\
	    Bonobo_Activation_types.idl		\
	    Bonobo_ObjectDirectory.idl		\
	    Bonobo_ActivationContext.idl	\
	    $(NULL)


IDL_HEADER_FILES = $(IDL_FILES:.idl=.h)
IDL_COMMONS = $(IDL_FILES:.idl=-common.c)
IDL_SKELS = $(IDL_FILES:.idl=-skels.c)
IDL_STUBS = $(IDL_FILES:.idl=-stubs.c)

BUILT_SOURCES = $(IDL_HEADER_FILES) $(IDL_COMMONS) $(IDL_SKELS) $(IDL_STUBS) \
	$(NULL)


#DEPS_MAGIC := #$(shell mkdir .deps > /dev/null 2>&1 || :)
#IDL_DEP_FILES = #$(IDL_FILES:%.idl=.deps/%.idl.P)

CLEANFILES = \
	$(BUILT_SOURCES)			\
	$(NULL)

mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES =  bonobo-activation-version.h
LTLIBRARIES =  $(lib_LTLIBRARIES)


DEFS = -DHAVE_CONFIG_H -I. -I$(srcdir) -I..
CPPFLAGS = 
LIBS = -lpopt  -liconv
libbonobo_activation_la_LDFLAGS = 
libbonobo_activation_la_LIBADD = 
libbonobo_activation_la_OBJECTS =  Bonobo_Unknown-common.lo \
Bonobo_GenericFactory-common.lo Bonobo_Activation_types-common.lo \
Bonobo_ObjectDirectory-common.lo Bonobo_ActivationContext-common.lo \
Bonobo_Unknown-skels.lo Bonobo_GenericFactory-skels.lo \
Bonobo_Activation_types-skels.lo Bonobo_ObjectDirectory-skels.lo \
Bonobo_ActivationContext-skels.lo Bonobo_Unknown-stubs.lo \
Bonobo_GenericFactory-stubs.lo Bonobo_Activation_types-stubs.lo \
Bonobo_ObjectDirectory-stubs.lo Bonobo_ActivationContext-stubs.lo \
bonobo-activation-client.lo bonobo-activation-id.lo \
bonobo-activation-shlib.lo bonobo-activation-activate.lo \
bonobo-activation-base-service.lo bonobo-activation-register.lo \
bonobo-activation-server-info.lo bonobo-activation-fork-server.lo \
bonobo-activation-init.lo
CFLAGS = -g -O2
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
HEADERS =  $(bonobo_activationinclude_HEADERS)

DIST_COMMON =  Makefile.am Makefile.in bonobo-activation-version.h.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = gtar
GZIP_ENV = --best
SOURCES = $(libbonobo_activation_la_SOURCES)
OBJECTS = $(libbonobo_activation_la_OBJECTS)

all: all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .lo .o .obj .s
$(srcdir)/Makefile.in: # Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu --include-deps bonobo-activation/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

bonobo-activation-version.h: $(top_builddir)/config.status bonobo-activation-version.h.in
	cd $(top_builddir) && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

mostlyclean-libLTLIBRARIES:

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)

distclean-libLTLIBRARIES:

maintainer-clean-libLTLIBRARIES:

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL) $$p $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p; \
	done

.c.o:
	$(COMPILE) -c $<

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

libbonobo-activation.la: $(libbonobo_activation_la_OBJECTS) $(libbonobo_activation_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libbonobo_activation_la_LDFLAGS) $(libbonobo_activation_la_OBJECTS) $(libbonobo_activation_la_LIBADD) $(LIBS)

install-bonobo_activationincludeHEADERS: $(bonobo_activationinclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bonobo_activationincludedir)
	@list='$(bonobo_activationinclude_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d= ; else d="$(srcdir)/"; fi; \
	  echo " $(INSTALL_DATA) $$d$$p $(DESTDIR)$(bonobo_activationincludedir)/$$p"; \
	  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(bonobo_activationincludedir)/$$p; \
	done

uninstall-bonobo_activationincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	list='$(bonobo_activationinclude_HEADERS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bonobo_activationincludedir)/$$p; \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = bonobo-activation

distdir: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) top_distdir="$(top_distdir)" distdir="$(distdir)" dist-hook
bonobo-activation-activate.lo bonobo-activation-activate.o : \
	bonobo-activation-activate.c ../config.h \
	bonobo-activation-activate.h Bonobo_Activation_types.h \
	bonobo-activation-id.h bonobo-activation-init.h \
	bonobo-activation-server-info.h bonobo-activation-private.h \
	bonobo-activation-base-service.h Bonobo_ActivationContext.h \
	Bonobo_Unknown.h Bonobo_ObjectDirectory.h \
	bonobo-activation-shlib.h bonobo-activation-client.h \
	bonobo-activation-private.h bonobo-activation-async.h \
	bonobo-activation-i18n.h
bonobo-activation-async-callback.lo bonobo-activation-async-callback.o : \
	bonobo-activation-async-callback.c ../config.h \
	bonobo-activation-async.h Bonobo_Activation_types.h \
	bonobo-activation-async-callback.h bonobo-activation-i18n.h \
	bonobo-activation-init.h bonobo-activation-shlib.h \
	Bonobo_ActivationContext.h Bonobo_Unknown.h \
	Bonobo_ObjectDirectory.h
bonobo-activation-async.lo bonobo-activation-async.o : \
	bonobo-activation-async.c ../config.h bonobo-activation-async.h \
	Bonobo_Activation_types.h Bonobo_ActivationContext.h \
	Bonobo_Unknown.h Bonobo_ObjectDirectory.h \
	bonobo-activation-activate-private.h Bonobo_GenericFactory.h \
	bonobo-activation-activate.h bonobo-activation-shlib.h \
	bonobo-activation-async-callback.h bonobo-activation-id.h \
	bonobo-activation-init.h bonobo-activation-private.h \
	bonobo-activation-base-service.h
bonobo-activation-base-service.lo bonobo-activation-base-service.o : \
	bonobo-activation-base-service.c bonobo-activation-i18n.h \
	bonobo-activation-init.h bonobo-activation-base-service.h \
	bonobo-activation-private.h ../config.h \
	Bonobo_ActivationContext.h Bonobo_Unknown.h \
	Bonobo_Activation_types.h Bonobo_ObjectDirectory.h \
	bonobo-activation-client.h bonobo-activation-private.h
bonobo-activation-client.lo bonobo-activation-client.o : \
	bonobo-activation-client.c ../config.h bonobo-activation.h \
	Bonobo_Unknown.h Bonobo_GenericFactory.h \
	Bonobo_Activation_types.h bonobo-activation-version.h \
	bonobo-activation-activate.h bonobo-activation-server-info.h \
	bonobo-activation-init.h bonobo-activation-base-service.h \
	bonobo-activation-id.h bonobo-activation-shlib.h \
	bonobo-activation-register.h bonobo-activation-async.h \
	bonobo-activation-client.h bonobo-activation-private.h \
	Bonobo_ActivationContext.h Bonobo_ObjectDirectory.h
bonobo-activation-fork-server.lo bonobo-activation-fork-server.o : \
	bonobo-activation-fork-server.c ../config.h \
	bonobo-activation-private.h bonobo-activation-base-service.h \
	Bonobo_ActivationContext.h Bonobo_Unknown.h \
	Bonobo_Activation_types.h Bonobo_ObjectDirectory.h \
	bonobo-activation-i18n.h bonobo-activation-init.h
bonobo-activation-id.lo bonobo-activation-id.o : bonobo-activation-id.c \
	../config.h bonobo-activation-id.h Bonobo_Activation_types.h \
	bonobo-activation-private.h bonobo-activation-base-service.h \
	Bonobo_ActivationContext.h Bonobo_Unknown.h \
	Bonobo_ObjectDirectory.h
bonobo-activation-init.lo bonobo-activation-init.o : \
	bonobo-activation-init.c ../config.h bonobo-activation-init.h \
	bonobo-activation-client.h bonobo-activation-private.h \
	bonobo-activation-base-service.h Bonobo_ActivationContext.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h \
	Bonobo_ObjectDirectory.h Bonobo_ActivationContext.h \
	bonobo-activation-i18n.h bonobo-activation-register.h \
	bonobo-activation-version.h
bonobo-activation-register.lo bonobo-activation-register.o : \
	bonobo-activation-register.c ../config.h \
	bonobo-activation-register.h Bonobo_Activation_types.h \
	bonobo-activation-private.h bonobo-activation-base-service.h \
	Bonobo_ActivationContext.h Bonobo_Unknown.h \
	Bonobo_ObjectDirectory.h bonobo-activation-init.h
bonobo-activation-server-info.lo bonobo-activation-server-info.o : \
	bonobo-activation-server-info.c ../config.h \
	bonobo-activation-server-info.h Bonobo_Activation_types.h
bonobo-activation-shlib.lo bonobo-activation-shlib.o : \
	bonobo-activation-shlib.c ../config.h bonobo-activation-shlib.h \
	Bonobo_Activation_types.h Bonobo_GenericFactory.h \
	Bonobo_Unknown.h bonobo-activation-i18n.h \
	bonobo-activation-init.h bonobo-activation-private.h \
	bonobo-activation-base-service.h Bonobo_ActivationContext.h \
	Bonobo_ObjectDirectory.h
Bonobo_Activation_types-common.lo Bonobo_Activation_types-common.o : \
	Bonobo_Activation_types-common.c Bonobo_Activation_types.h
Bonobo_Activation_types-skels.lo Bonobo_Activation_types-skels.o : \
	Bonobo_Activation_types-skels.c Bonobo_Activation_types.h
Bonobo_Activation_types-stubs.lo Bonobo_Activation_types-stubs.o : \
	Bonobo_Activation_types-stubs.c Bonobo_Activation_types.h
Bonobo_Activation_types-stubs.c Bonobo_Activation_types-skels.c Bonobo_Activation_types-common.c Bonobo_Activation_types.h Bonobo_Activation_types-skelimpl.c Bonobo_Activation_types-imodule.c : \
	../idl/Bonobo_Activation_types.idl
Bonobo_ActivationContext-common.lo Bonobo_ActivationContext-common.o : \
	Bonobo_ActivationContext-common.c Bonobo_ActivationContext.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h \
	Bonobo_ObjectDirectory.h Bonobo_ActivationContext.h
Bonobo_ActivationContext-skels.lo Bonobo_ActivationContext-skels.o : \
	Bonobo_ActivationContext-skels.c Bonobo_ActivationContext.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h \
	Bonobo_ObjectDirectory.h Bonobo_ActivationContext.h
Bonobo_ActivationContext-stubs.lo Bonobo_ActivationContext-stubs.o : \
	Bonobo_ActivationContext-stubs.c Bonobo_ActivationContext.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h \
	Bonobo_ObjectDirectory.h Bonobo_ActivationContext.h
Bonobo_ActivationContext-stubs.c Bonobo_ActivationContext-skels.c Bonobo_ActivationContext-common.c Bonobo_ActivationContext.h Bonobo_ActivationContext-skelimpl.c Bonobo_ActivationContext-imodule.c : \
	../idl/Bonobo_ActivationContext.idl ../idl/Bonobo_Unknown.idl \
	../idl/Bonobo_ActivationContext.idl \
	../idl/Bonobo_Activation_types.idl \
	../idl/Bonobo_ActivationContext.idl \
	../idl/Bonobo_ObjectDirectory.idl \
	../idl/Bonobo_ActivationContext.idl \
	../idl/Bonobo_ObjectDirectory.idl \
	../idl/Bonobo_ActivationContext.idl
Bonobo_GenericFactory-common.lo Bonobo_GenericFactory-common.o : \
	Bonobo_GenericFactory-common.c Bonobo_GenericFactory.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h
Bonobo_GenericFactory-skels.lo Bonobo_GenericFactory-skels.o : \
	Bonobo_GenericFactory-skels.c Bonobo_GenericFactory.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h
Bonobo_GenericFactory-stubs.lo Bonobo_GenericFactory-stubs.o : \
	Bonobo_GenericFactory-stubs.c Bonobo_GenericFactory.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h
Bonobo_GenericFactory-stubs.c Bonobo_GenericFactory-skels.c Bonobo_GenericFactory-common.c Bonobo_GenericFactory.h Bonobo_GenericFactory-skelimpl.c Bonobo_GenericFactory-imodule.c : \
	../idl/Bonobo_GenericFactory.idl ../idl/Bonobo_Unknown.idl \
	../idl/Bonobo_GenericFactory.idl \
	../idl/Bonobo_Activation_types.idl \
	../idl/Bonobo_GenericFactory.idl
Bonobo_ObjectDirectory-common.lo Bonobo_ObjectDirectory-common.o : \
	Bonobo_ObjectDirectory-common.c Bonobo_ObjectDirectory.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h \
	Bonobo_ActivationContext.h Bonobo_ObjectDirectory.h
Bonobo_ObjectDirectory-skels.lo Bonobo_ObjectDirectory-skels.o : \
	Bonobo_ObjectDirectory-skels.c Bonobo_ObjectDirectory.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h \
	Bonobo_ActivationContext.h Bonobo_ObjectDirectory.h
Bonobo_ObjectDirectory-stubs.lo Bonobo_ObjectDirectory-stubs.o : \
	Bonobo_ObjectDirectory-stubs.c Bonobo_ObjectDirectory.h \
	Bonobo_Unknown.h Bonobo_Activation_types.h \
	Bonobo_ActivationContext.h Bonobo_ObjectDirectory.h
Bonobo_ObjectDirectory-stubs.c Bonobo_ObjectDirectory-skels.c Bonobo_ObjectDirectory-common.c Bonobo_ObjectDirectory.h Bonobo_ObjectDirectory-skelimpl.c Bonobo_ObjectDirectory-imodule.c : \
	../idl/Bonobo_ObjectDirectory.idl ../idl/Bonobo_Unknown.idl \
	../idl/Bonobo_ObjectDirectory.idl \
	../idl/Bonobo_Activation_types.idl \
	../idl/Bonobo_ObjectDirectory.idl \
	../idl/Bonobo_ActivationContext.idl \
	../idl/Bonobo_ObjectDirectory.idl \
	../idl/Bonobo_ActivationContext.idl \
	../idl/Bonobo_ObjectDirectory.idl
Bonobo_Unknown-common.lo Bonobo_Unknown-common.o : \
	Bonobo_Unknown-common.c Bonobo_Unknown.h
Bonobo_Unknown-skels.lo Bonobo_Unknown-skels.o : Bonobo_Unknown-skels.c \
	Bonobo_Unknown.h
Bonobo_Unknown-stubs.lo Bonobo_Unknown-stubs.o : Bonobo_Unknown-stubs.c \
	Bonobo_Unknown.h
Bonobo_Unknown-stubs.c Bonobo_Unknown-skels.c Bonobo_Unknown-common.c Bonobo_Unknown.h Bonobo_Unknown-skelimpl.c Bonobo_Unknown-imodule.c : \
	../idl/Bonobo_Unknown.idl

info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am: install-libLTLIBRARIES
install-exec: install-exec-am

install-data-am: install-bonobo_activationincludeHEADERS
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am: uninstall-libLTLIBRARIES \
		uninstall-bonobo_activationincludeHEADERS
uninstall: uninstall-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir) \
		$(DESTDIR)$(bonobo_activationincludedir)


mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean-am:  mostlyclean-libLTLIBRARIES mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags \
		mostlyclean-generic

mostlyclean: mostlyclean-am

clean-am:  clean-libLTLIBRARIES clean-compile clean-libtool clean-tags \
		clean-generic mostlyclean-am

clean: clean-am

distclean-am:  distclean-libLTLIBRARIES distclean-compile \
		distclean-libtool distclean-tags distclean-generic \
		clean-am distclean-local
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-libLTLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-generic \
		distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-libLTLIBRARIES distclean-libLTLIBRARIES \
clean-libLTLIBRARIES maintainer-clean-libLTLIBRARIES \
uninstall-libLTLIBRARIES install-libLTLIBRARIES mostlyclean-compile \
distclean-compile clean-compile maintainer-clean-compile \
mostlyclean-libtool distclean-libtool clean-libtool \
maintainer-clean-libtool uninstall-bonobo_activationincludeHEADERS \
install-bonobo_activationincludeHEADERS tags mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir info-am info \
dvi-am dvi check check-am installcheck-am installcheck install-exec-am \
install-exec install-data-am install-data install-am install \
uninstall-am uninstall all-redirect all-am all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


$(libbonobo_activation_la_OBJECTS): $(BUILT_SOURCES)

%.h %-stubs.c %-skels.c %-common.c %-imodule.c %-skelimpl.c: $(IDL_DIR)%.idl $(ORBIT_IDL)
	echo "top_srcdir: $(top_srcdir)"
	echo "IDL_DIR: $(IDL_DIR)"
	echo "IDL file: $<"
	-(rm -f $(*).h $(*)-stubs.c $(*)-skels.c $(*)-common.c $(*)-imodule.c $(*)-skelimpl.c || true) > /dev/null
	$(ORBIT_IDL) $(IDL_FLAGS) "-D__$(*)_COMPILATION" --deps $(*D)/.deps/$(*F).idl.P $<
#-include $(IDL_DEP_FILES)
#distclean-local:
#	-rm -rf .deps

dist-hook:
	cd $(distdir) ; rm -f $(CLEANFILES)

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
